<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>派大星</title>
  
  <subtitle>派大星</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-19T15:21:08.432Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>派大星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax基本概念=&gt;part one</title>
    <link href="http://example.com/2022/05/19/08-ajax-Day01/"/>
    <id>http://example.com/2022/05/19/08-ajax-Day01/</id>
    <published>2022-05-19T15:10:17.737Z</published>
    <updated>2022-05-19T15:21:08.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>能够知道和服务器相关的基本概念</li><li>能够知道客户端和服务器通信的过程</li><li>能够知道数据也是一种资源</li><li>能够说出什么是<code>Ajax</code>以及应用场景</li><li>能够使用<code>jQuery</code>中的<code>Ajax</code>函数请求数据</li><li>能够知道接口和接口文档的概念<span id="more"></span><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1></li></ul><h2 id="客户端与服务器（⭐⭐⭐）"><a href="#客户端与服务器（⭐⭐⭐）" class="headerlink" title="客户端与服务器（⭐⭐⭐）"></a>客户端与服务器（⭐⭐⭐）</h2><h3 id="上网的目的"><a href="#上网的目的" class="headerlink" title="上网的目的"></a>上网的目的</h3><p>上网的<strong>本质目的：</strong>通过互联网的形式来 <strong>获取和消费资源</strong></p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>上网过程中，负责 <strong>存放和对外提供资源</strong> 的电脑，叫做服务器</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E4%B8%8A%E7%BD%91%E7%9B%AE%E7%9A%84.png" alt="上网目的"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>在上网过程中，负责 <strong>获取和消费资源</strong> 的电脑，叫做客户端</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt="客户端"></p><h2 id="URL地址的概念-amp-组成"><a href="#URL地址的概念-amp-组成" class="headerlink" title="URL地址的概念&amp;组成"></a>URL地址的概念&amp;组成</h2><h3 id="URL的概念"><a href="#URL的概念" class="headerlink" title="URL的概念"></a>URL的概念</h3><p>URL（全称是 <code>UniformResourceLocator</code>） 中文叫 <strong>统一资源定位符</strong>，用于标识互联网上每个资源的唯一存放位置。浏览器只有通过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源</p><h3 id="URL的组成"><a href="#URL的组成" class="headerlink" title="URL的组成"></a>URL的组成</h3><p>URL地址一般由三部分组成:</p><ul><li>客户端与服务器之间的 <strong>通信协议</strong></li><li>存有该资源的 <strong>服务器名称</strong></li><li>资源在服务器上 <strong>具体的存放位置</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/URL%E7%BB%84%E6%88%90.png" alt="URL组成"></p><h2 id="客户端与服务器通讯过程（⭐⭐⭐）"><a href="#客户端与服务器通讯过程（⭐⭐⭐）" class="headerlink" title="客户端与服务器通讯过程（⭐⭐⭐）"></a>客户端与服务器通讯过程（⭐⭐⭐）</h2><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%A6%82%E4%BD%95%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png" alt="如何请求数据"></p><p><strong>注意：</strong></p><ul><li>客户端与服务器之间的通讯过程，分为： <strong>请求-处理-响应</strong> 三个步骤</li><li>网页中每一个资源，都是通过 <strong>请求-处理-响应</strong> 的方式从服务器获取回来的</li></ul><h2 id="基于浏览器工具分析通讯过程"><a href="#基于浏览器工具分析通讯过程" class="headerlink" title="基于浏览器工具分析通讯过程"></a>基于浏览器工具分析通讯过程</h2><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%B7%A5%E5%85%B7%E6%9D%A5%E5%88%86%E6%9E%90%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png" alt="工具来分析通讯过程"></p><p><strong>步骤：</strong></p><ul><li>打开<code>Chorme</code>浏览器</li><li><code>Ctrl + Shift + I（F12）</code> 打开 Chrome 的开发者工具</li><li>切换到 <code>Network</code> 面板</li><li>选中<code>Doc</code> 页签</li><li>刷新页面，分析客户端与服务器的通讯过程</li></ul><h2 id="服务器对外提供的资源"><a href="#服务器对外提供的资源" class="headerlink" title="服务器对外提供的资源"></a>服务器对外提供的资源</h2><h3 id="常见资源"><a href="#常见资源" class="headerlink" title="常见资源"></a>常见资源</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B5%84%E6%BA%90.png" alt="对外提供的资源"></p><h3 id="数据也是资源（⭐⭐⭐）"><a href="#数据也是资源（⭐⭐⭐）" class="headerlink" title="数据也是资源（⭐⭐⭐）"></a>数据也是资源（⭐⭐⭐）</h3><p><strong>网页中的数据，也是服务器对外提供的一种资源</strong>，例如股票数据，各行业排行榜等</p><h2 id="网页中如何请求数据"><a href="#网页中如何请求数据" class="headerlink" title="网页中如何请求数据"></a>网页中如何请求数据</h2><blockquote><p>数据，也是服务器对外提供的一种 资源，只要是资源，必然要通过 请求 - 处理 - 响应 的方式进行获取</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/2022-05-19_230420.png" alt="2022-05-19_230420"></p><p>如果要在网页中请求服务器上的数据资源，需要用到 <code>XMLHttpRequest</code> 对象</p><p><code>XMLHttpRequest</code>（简称 <code>xhr</code>）是浏览器提供的<code>JS</code>成员，通过它，可以请求服务器上的数据资源</p><p>最简单的用法 <code>var xhrObj = new XMLHttpRequest()</code></p><h2 id="资源的请求方式（⭐⭐⭐）"><a href="#资源的请求方式（⭐⭐⭐）" class="headerlink" title="资源的请求方式（⭐⭐⭐）"></a>资源的请求方式（⭐⭐⭐）</h2><p>客户端请求服务器时，请求的方式 <strong>有很多种</strong>，最常见的两种请求方式分别是 <code>get</code> 和 <code>post</code> 请求</p><ul><li><p><code>get 请求</code>，通常用于 <strong>获取服务器资源</strong>（要资源）</p><p>例如：根据 <code>URL</code> 地址，从服务器获取 <code>HTML</code>文件、<code>css</code>文件、<code>js</code>文件、图片文件、数据资源等</p></li><li><p><code>post 请求</code>，通常用于 <strong>向服务器提交数据</strong>（送资源）</p><p>例如：登录时，向服务器 <strong>提交登录信息</strong>、注册时向服务器 <strong>提交注册信息</strong>、添加用户时向服务器 <strong>提交用户信息</strong>等各种 <strong>数据提交操作</strong></p></li></ul><h1 id="了解Ajax"><a href="#了解Ajax" class="headerlink" title="了解Ajax"></a>了解<code>Ajax</code></h1><h2 id="什么是Ajax（⭐⭐⭐）"><a href="#什么是Ajax（⭐⭐⭐）" class="headerlink" title="什么是Ajax（⭐⭐⭐）"></a>什么是<code>Ajax</code>（⭐⭐⭐）</h2><p><code>Ajax</code> 的全称是 <code>Asynchronous JavaScript And XML</code>（异步 <code>JavaScript</code> 和 <code>xml</code>）</p><p>通俗理解：在网页中利用 <code>XMLHttpRequest</code> 对象和服务器进行数据交互的方式，就是<code>Ajax</code></p><h2 id="为什么要学Ajax"><a href="#为什么要学Ajax" class="headerlink" title="为什么要学Ajax"></a>为什么要学<code>Ajax</code></h2><p>之前所学的技术，只能把网页做的更美观漂亮，或添加一些动画效果，但还是，<code>Ajax</code>能让我们轻松实现 <strong>网页</strong> 与 <strong>服务器</strong>之间的 <strong>数据交互</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0ajax.png"></p><h2 id="Ajax应该用场景（⭐⭐⭐）"><a href="#Ajax应该用场景（⭐⭐⭐）" class="headerlink" title="Ajax应该用场景（⭐⭐⭐）"></a><code>Ajax</code>应该用场景（⭐⭐⭐）</h2><h4 id="场景一：用户名检测"><a href="#场景一：用户名检测" class="headerlink" title="场景一：用户名检测"></a>场景一：用户名检测</h4><p>注册用户时，通过 <code>ajax</code> 的形式，动态 <strong>检测用户名是否被占用</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt="ajax应用场景"></p><h4 id="场景二：搜索提示"><a href="#场景二：搜索提示" class="headerlink" title="场景二：搜索提示"></a>场景二：搜索提示</h4><p>当输入搜索关键字时，通过 <code>ajax</code> 的形式，动态 <strong>加载搜索提示列表</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-02.png" alt="ajax应用场景-02"></p><h4 id="场景三：数据分页显示"><a href="#场景三：数据分页显示" class="headerlink" title="场景三：数据分页显示"></a>场景三：数据分页显示</h4><p>当点击页码值得时候，通过 <code>ajax</code> 的形式，<strong>根据页码值动态刷新表格的数据</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-03.png"></p><h4 id="场景四：数据的增删改查"><a href="#场景四：数据的增删改查" class="headerlink" title="场景四：数据的增删改查"></a>场景四：数据的增删改查</h4><p>数据的添加、删除、修改、查询操作，都需要通过 <code>ajax</code> 的形式，来实现数据的交互<br><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-04.png"></p><h1 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a><code>jQuery</code>中的Ajax</h1><p>浏览器中提供的 <code>XMLHttpRequest</code> 用法比较复杂，所以 <code>jQuery</code> 对 <code>XMLHttpRequest</code> 进行了封装，提供了一系列Ajax相关的函数，极大地 <strong>降低了Ajax的使用难度</strong></p><p><code>jQuery</code>中发起 Ajax 请求最常用的三个方法如下：</p><ul><li><code>$.get()</code> get方式请求，用于获取数据</li><li><code>$.post()</code> post方式请求，用于提交数据</li><li><code>$.ajax()</code> 比较综合，既可以获取数据，又可以提交数据</li></ul><h2 id="get-函数介绍（⭐⭐）"><a href="#get-函数介绍（⭐⭐）" class="headerlink" title="$.get() 函数介绍（⭐⭐）"></a>$.get() 函数介绍（⭐⭐）</h2><p><code>jQuery</code> 中 <code>$.get()</code> 函数的功能单一，专门用来发起 <code>get</code> 请求，从而将服务器上的资源请求到客户端来进行使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png"></p><h3 id="get-发起不带参数的请求"><a href="#get-发起不带参数的请求" class="headerlink" title="$.get()发起不带参数的请求"></a>$.get()发起不带参数的请求</h3><p>使用 $.get() 函数 发起不带参数的请求时，直接提供给 <strong>请求的 URL 地址</strong> 和 <strong>请求成功之后的回调函数</strong> 即可，示例代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E8%AF%B7%E6%B1%82%E4%B8%8D%E5%B8%A6%E5%8F%82%E6%95%B0.png"></p><h3 id="get-发起携带参数的请求"><a href="#get-发起携带参数的请求" class="headerlink" title="$.get()发起携带参数的请求"></a>$.get()发起携带参数的请求</h3><p>使用<code>$.get()</code> 发起携带参数的请求，那么携带的参数应该写在第二个参数的位置，示例代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0.png"></p><h2 id="post-函数介绍（⭐⭐）"><a href="#post-函数介绍（⭐⭐）" class="headerlink" title="$.post() 函数介绍（⭐⭐）"></a>$.post() 函数介绍（⭐⭐）</h2><p><code>jQuery</code> 中 <code>$.post()</code> 函数的功能单一，专门用来发起<code>post</code>请求，从而向服务器提交数据</p><p><code>$.post()</code> 函数的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><p>参数各自代表的含义如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/post%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png"></p><h3 id="post-向服务器提交数据"><a href="#post-向服务器提交数据" class="headerlink" title="$.post() 向服务器提交数据"></a>$.post() 向服务器提交数据</h3><p>使用 <code>$.post()</code> 向服务器提交数据的示例代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/post%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png"></p><h2 id="ajax-函数介绍（⭐⭐⭐）"><a href="#ajax-函数介绍（⭐⭐⭐）" class="headerlink" title="$.ajax() 函数介绍（⭐⭐⭐）"></a><code>$.ajax()</code> 函数介绍（⭐⭐⭐）</h2><p>相比于 <code>$.get()</code> 和 <code>$.post()</code> 函数，<code>jQuery</code> 中提供的 <code>$.ajax()</code> 函数，是一个功能比较综合的函数，它允许我们对 <code>Ajax</code> 请求进行更详细的配置。</p><p><code>$.ajax()</code> 函数的基本语法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E8%AF%AD%E6%B3%95%E5%8F%82%E6%95%B0.png"></p><h3 id="ajax-发起-get-请求"><a href="#ajax-发起-get-请求" class="headerlink" title="$.ajax() 发起 get 请求"></a><code>$.ajax()</code> 发起 get 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>GET</code> 请求时，只需要将 <code>type</code> 属性 的值设置为 ‘<code>GET</code>’ 即可：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%8F%91%E8%B5%B7get%E8%AF%B7%E6%B1%82.png"></p><h3 id="ajax-发起-post-请求"><a href="#ajax-发起-post-请求" class="headerlink" title="$.ajax 发起 post 请求"></a><code>$.ajax</code> 发起 post 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>post</code>请求，只需要把 <code>type</code>属性的值 设置为 ‘<code>post</code>’ 即可</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%8F%91%E8%B5%B7post%E8%AF%B7%E6%B1%82.png"></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口的概念（⭐⭐⭐）"><a href="#接口的概念（⭐⭐⭐）" class="headerlink" title="接口的概念（⭐⭐⭐）"></a>接口的概念（⭐⭐⭐）</h2><p>使用 <code>Ajax</code> 请求数据时，被请求的 <code>URL</code> 地址，就叫做 数据接口（简称<strong>接口</strong>）。同时，每个接口必须有请求方式。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.liulongbin.top:<span class="number">3006</span><span class="regexp">/api/g</span>etbooks 获取图书列表的接口（get请求）</span><br><span class="line">http:<span class="regexp">//</span>www.liulongbin.top:<span class="number">3006</span><span class="regexp">/api/</span>addbook  添加图书的接口（post请求）</span><br></pre></td></tr></table></figure><h2 id="接口的请求过程"><a href="#接口的请求过程" class="headerlink" title="接口的请求过程"></a>接口的请求过程</h2><h3 id="GET方式请求接口的过程"><a href="#GET方式请求接口的过程" class="headerlink" title="GET方式请求接口的过程"></a>GET方式请求接口的过程</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E6%96%B9%E5%BC%8F%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%87%E7%A8%8B.png"></p><h3 id="POST方式请求接口的过程"><a href="#POST方式请求接口的过程" class="headerlink" title="POST方式请求接口的过程"></a>POST方式请求接口的过程</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/post%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%87%E7%A8%8B.png"></p><h2 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h2><h3 id="什么是接口测试工具"><a href="#什么是接口测试工具" class="headerlink" title="什么是接口测试工具"></a>什么是接口测试工具</h3><p>为了验证接口是否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测</p><p><strong>好处：</strong>接口测试工具能让我们在 <strong>不写任何代码</strong> 的情况下，对接口进行 <strong>调用</strong> 和 <strong>测试</strong></p><p>常用的就是：<a href="https://www.getpostman.com/downloads/">PostMan</a></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/postMan.png"></p><h3 id="了解-Postman-界面结构"><a href="#了解-Postman-界面结构" class="headerlink" title="了解 Postman 界面结构"></a>了解 Postman 界面结构</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/Postman%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D.png"></p><h3 id="使用PostMan测试GET接口"><a href="#使用PostMan测试GET接口" class="headerlink" title="使用PostMan测试GET接口"></a>使用<code>PostMan</code>测试GET接口</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/Postman%E6%B5%8B%E8%AF%95get%E8%AF%B7%E6%B1%82.png"></p><h3 id="使用PostMan测试POST接口"><a href="#使用PostMan测试POST接口" class="headerlink" title="使用PostMan测试POST接口"></a>使用<code>PostMan</code>测试POST接口</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/Postman%E6%B5%8B%E8%AF%95post%E8%AF%B7%E6%B1%82.png"></p><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><h3 id="什么是接口文档（⭐⭐⭐）"><a href="#什么是接口文档（⭐⭐⭐）" class="headerlink" title="什么是接口文档（⭐⭐⭐）"></a>什么是接口文档（⭐⭐⭐）</h3><p>接口文档，顾名思义就是 <strong>接口的说明文档</strong>，<strong>它是我们调用接口的依据</strong>。好的接口文档包含了对 <strong>接口URL</strong>，<strong>参数</strong> 以及 <strong>输出内容</strong> 的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用</p><h3 id="接口文档的组成部分"><a href="#接口文档的组成部分" class="headerlink" title="接口文档的组成部分"></a>接口文档的组成部分</h3><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><ul><li><strong>接口名称：</strong>用来标识各个接口的简单说明，如 <strong>登录接口</strong>，<strong>获取图书列表接口</strong>等</li><li><strong>接口URL：</strong>接口的调用地址</li><li><strong>调用方式：</strong>接口的调用方式，如 <strong>GET</strong> 或者 <strong>POST</strong></li><li><strong>参数格式：</strong>接口需要传递的参数，每个参数必须包含 <strong>参数名称</strong>、<strong>参数类型</strong>、<strong>是否必选</strong>、<strong>参数说明</strong> 这4项内容</li><li><strong>响应格式：</strong>接口的返回值的详细描述，一般包含<strong>数据名称</strong>、<strong>数据类型</strong>、<strong>说明</strong>3项内容</li><li><strong>返回示例（可选）：</strong>通过对象的形式，列举服务器返回数据的结构</li></ul><h3 id="接口文档示例"><a href="#接口文档示例" class="headerlink" title="接口文档示例"></a>接口文档示例</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%93%8D%E5%BA%94%E7%A4%BA%E4%BE%8B.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%BF%94%E5%9B%9E%E7%A4%BA%E4%BE%8B.png"></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="图书管理"><a href="#图书管理" class="headerlink" title="图书管理"></a>图书管理</h2><h3 id="项目效果"><a href="#项目效果" class="headerlink" title="项目效果"></a>项目效果</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E6%95%88%E6%9E%9C%E5%9B%BE.png"></p><h3 id="UI界面搭建"><a href="#UI界面搭建" class="headerlink" title="UI界面搭建"></a><code>UI</code>界面搭建</h3><p><strong>需要使用到的库和插件</strong></p><ul><li>用到的 <code>css</code> 库 <code>bootstrap.css</code></li><li>用到的 <code>javascript</code> 库 <code>jquery.js</code></li><li>用到 <code>vs code</code> 插件 <code>Bootstrap 3 Snippets</code></li></ul><p><strong>搭建步骤</strong></p><ul><li>Panel面板搭建<ul><li>创建panel板 （快捷键：<code>bs3-panel:primary</code>）</li><li>在 <code>panel-body</code> 里面，创建3个对应的输入框 （快捷键：<code>bs3-input:addon:text</code>），对应修改标题</li><li>在 <code>panel-body</code> 最后面，创建 <code>button</code>按钮 （快捷键：<code>bs3-button:primary</code>）,修改内容</li></ul></li><li>图书的表格<ul><li>创建 table（快捷键：<code>bs3-table:bordered</code>）</li><li>在里面创建对应5个<code>td</code>，填写里面内容</li></ul></li></ul><h3 id="获取图书列表数据"><a href="#获取图书列表数据" class="headerlink" title="获取图书列表数据"></a>获取图书列表数据</h3><p><strong>步骤：</strong></p><ul><li>查阅资料中的接口文档，找到获取图书列表的接口</li><li>定义 script 标签，创建入口函数</li><li>利用 $.get() 方法，传入相应的<code>url</code>，和成功之后的回调函数</li><li>在回调函数中获取到请求成功的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取图书列表数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBookList</span>(<span class="params"></span>) &#123;</span><br><span class="line">   $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染图书列表"><a href="#渲染图书列表" class="headerlink" title="渲染图书列表"></a>渲染图书列表</h3><p><strong>步骤：</strong></p><ul><li>根据返回状态码来判断是否成功请求到数据</li><li>创建数组，用来存放<strong>行</strong>数据（<code>rows</code>）</li><li>遍历服务器返回的数组，每遍历一次，利用数组（<code>rows</code>）去<code>push</code>  <code>&lt;tr&gt;&lt;/tr&gt;</code></li><li>每一行 <code>tr</code> 里面包含了5个<code>td</code></li><li>给每一个 <code>td</code> 设置对应内容即可</li><li>遍历循环完毕之后，找到内容容器，先清空当前内容（以免有重复数据），然后添加 <code>rows</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rows = []</span><br><span class="line">$.<span class="title function_">each</span>(res.<span class="property">data</span>, <span class="keyword">function</span>(<span class="params">i, item</span>) &#123;</span><br><span class="line">     rows.<span class="title function_">push</span>(<span class="string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">id</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">bookname</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">author</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">publisher</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;del&quot; data-id=&quot;&#x27;</span> + item.<span class="property">id</span> + <span class="string">&#x27;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;#tb&#x27;</span>).<span class="title function_">empty</span>().<span class="title function_">append</span>(rows.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="删除功能实现"><a href="#删除功能实现" class="headerlink" title="删除功能实现"></a>删除功能实现</h3><h4 id="删除链接绑定单击事件处理函数"><a href="#删除链接绑定单击事件处理函数" class="headerlink" title="删除链接绑定单击事件处理函数"></a>删除链接绑定单击事件处理函数</h4><ul><li>利用 <code>tbody</code> 容器，通过<strong>事件委派</strong>的方式，给动态创建的<code>a</code>标签绑定事件</li><li>删除图书需要通过<code>id</code>删除，所以我们需要得到对应的<code>id</code>，我们利用自定义属性的方式，传递过来相应的<code>id</code></li></ul><h4 id="删除功能实现-1"><a href="#删除功能实现-1" class="headerlink" title="删除功能实现"></a>删除功能实现</h4><ul><li>查阅<strong>删除</strong>的接口文档  （删除利用删除接口）</li><li>在a标签点击事件处理函数里面利用<code>$.get()</code>方法，请求服务器，传入要删除的对应<code>id</code></li><li>删除成功之后，调用 <code>getBookList()</code> 刷新页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.del&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> id = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-id&#x27;</span>)</span><br><span class="line">  $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/delbook&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: id</span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;删除图书失败！&#x27;</span>)</span><br><span class="line">    <span class="title function_">getBookList</span>()</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="添加功能实现"><a href="#添加功能实现" class="headerlink" title="添加功能实现"></a>添加功能实现</h3><h4 id="添加按钮绑定点击事件"><a href="#添加按钮绑定点击事件" class="headerlink" title="添加按钮绑定点击事件"></a>添加按钮绑定点击事件</h4><ul><li>获取三个输入框的内容</li><li>判断三个输入框是否输入了内容，如果没有进行提示</li></ul><h4 id="实现图书添加功能"><a href="#实现图书添加功能" class="headerlink" title="实现图书添加功能"></a>实现图书添加功能</h4><ul><li>查阅接口文档</li><li>注意接口文档需要提交的参数名，我们需要保持一致</li><li>调用<code>$.post()</code> 方法，传入请求路径，然后组拼需要提交的参数</li><li>在成功回调里面判断返回值是否是201，如果是201代表成功，反之没有成功，进行提示</li><li>请求成功之后，调用<code>gettBookList()</code> 方法刷新页面，同时把输入框里面值清空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnAdd&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> bookname = $(<span class="string">&#x27;#iptBookname&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="keyword">var</span> author = $(<span class="string">&#x27;#iptAuthor&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="keyword">var</span> publisher = $(<span class="string">&#x27;#iptPublisher&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="keyword">if</span> (bookname.<span class="property">length</span> &lt;= <span class="number">0</span> || author.<span class="property">length</span> &lt;= <span class="number">0</span> || publisher.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请填写完整的图书信息！&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123;</span><br><span class="line">         <span class="attr">bookname</span>: bookname,</span><br><span class="line">         <span class="attr">author</span>: author,</span><br><span class="line">         <span class="attr">publisher</span>: publisher</span><br><span class="line">     &#125;, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">201</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;添加图书失败！&#x27;</span>)</span><br><span class="line">         <span class="title function_">getBookList</span>()</span><br><span class="line">         $(<span class="string">&#x27;#iptBookname&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">         $(<span class="string">&#x27;#iptAuthor&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">         $(<span class="string">&#x27;#iptPublisher&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="聊天机器人"><a href="#聊天机器人" class="headerlink" title="聊天机器人"></a>聊天机器人</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%88%E4%BE%8B%E6%95%88%E6%9E%9C.png"></p><h3 id="实现功能点"><a href="#实现功能点" class="headerlink" title="实现功能点"></a>实现功能点</h3><ul><li>梳理案例代码结构</li><li>将用户输入的内容渲染到聊天窗口</li><li>发起请求获取聊天消息</li><li>将机器人的聊天内容转为语音</li><li>通过 <audio> 播放语音</audio></li><li>使用回车发送消息</li></ul><h3 id="梳理案例的代码结构"><a href="#梳理案例的代码结构" class="headerlink" title="梳理案例的代码结构"></a>梳理案例的代码结构</h3><ul><li><p><code>UI</code>结构梳理</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BAUI%E7%BB%93%E6%9E%84.png"></p></li><li><p>业务代码抽离</p></li><li><p><code>resetui()</code> 函数作用-让聊天框区域自动滚动到底部</p></li></ul><h3 id="将用户输入的内容渲染到聊天窗口"><a href="#将用户输入的内容渲染到聊天窗口" class="headerlink" title="将用户输入的内容渲染到聊天窗口"></a>将用户输入的内容渲染到聊天窗口</h3><ul><li>为发送按钮绑定点击事件</li><li>在点击事件函数里面判断一下用户输入内容是否为空，注意：如果为空，我们清除一下输入框内容</li><li>获取到对应的<code>ul</code>容器，调用 <code>append</code> 函数来追加 <code>li</code>，注意：追加<code>li</code>的类名叫做 <code>right_word</code></li><li>清除文本输入框的值</li><li>最后调用一下 <code>resetui()</code>，让聊天框区域自动滚动到底部</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为发送按钮绑定鼠标点击事件</span></span><br><span class="line">$(<span class="string">&#x27;#btnSend&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">    <span class="keyword">if</span> (text.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果用户输入了聊天内容，则将聊天内容追加到页面上显示</span></span><br><span class="line">    $(<span class="string">&#x27;#talk_list&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;li class=&quot;right_word&quot;&gt;&lt;img src=&quot;img/person02.png&quot; /&gt; &lt;span&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 重置滚动条的位置</span></span><br><span class="line">    <span class="title function_">resetui</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="发起请求获取聊天信息"><a href="#发起请求获取聊天信息" class="headerlink" title="发起请求获取聊天信息"></a>发起请求获取聊天信息</h3><ul><li>定义一个函数 <code>getMsg()</code> 接收一个参数，参数就是用户发送的信息</li><li>利用 <code>$.ajax()</code> 发送一个 GET 方式请求，传入请求地址 <code>http://ajax.frontend.itheima.net:3006/api/robot</code></li><li>定义请求数据 <code>spoken：value</code></li><li>定义<code>success</code>成功的回调，在回调函数里面判断返回数据的 <code>message</code> 是否等于 <code>success</code></li><li>给容器动态添加返回的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取聊天机器人发送回来的消息</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">getMsg</span>(<span class="params">text</span>) &#123;</span><br><span class="line">   $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/robot&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">spoken</span>: text</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">       <span class="comment">// console.log(res)</span></span><br><span class="line">       <span class="keyword">if</span> (res.<span class="property">message</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">         <span class="comment">// 接收聊天消息</span></span><br><span class="line">         <span class="keyword">var</span> msg = res.<span class="property">data</span>.<span class="property">info</span>.<span class="property">text</span></span><br><span class="line">         $(<span class="string">&#x27;#talk_list&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;li class=&quot;left_word&quot;&gt;&lt;img src=&quot;img/person01.png&quot; /&gt; &lt;span&gt;&#x27;</span> + msg + <span class="string">&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;</span>)</span><br><span class="line">         <span class="comment">// 重置滚动条的位置</span></span><br><span class="line">         <span class="title function_">resetui</span>()</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="将机器人聊天内容转成语音"><a href="#将机器人聊天内容转成语音" class="headerlink" title="将机器人聊天内容转成语音"></a>将机器人聊天内容转成语音</h3><ul><li>封装函数 <code>getVoice()</code> 接收一个参数，机器人的聊天信息</li><li>利用 <code>$.ajax()</code> 发送一个 GET 方式请求，传入请求地址 <code>http://ajax.frontend.itheima.net:3006/api/synthesize</code></li><li>定义请求数据 <code>text：value</code></li><li>定义<code>success</code>成功的回调，判断返回的状态码是否是200，如果是代表成功</li><li>在页面上定义 <code>audio</code> 标签，设置隐藏，等数据返回之后，利用这个 <code>audio</code> 来进行播放。设置 <code>autoplay</code> 属性来进行自动播放</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把文字转化为语音进行播放</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getVoice</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/synthesize&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: text</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(res)</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// 播放语音</span></span><br><span class="line">          $(<span class="string">&#x27;#voice&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, res.<span class="property">voiceUrl</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="通过回车键发送消息"><a href="#通过回车键发送消息" class="headerlink" title="通过回车键发送消息"></a>通过回车键发送消息</h3><ul><li>给文本输入框注册 <code>keyup</code> 事件，按键弹起的事件监听</li><li>在事件函数里面，通过<code>keycode</code> 来获取对应的按键的 机器码</li><li>判断 <code>keycode</code> 是否等于 13（不需要去记忆，开发时候打印调试一下就行了），如果是，代表是回车键</li><li>如果是回车键，模拟用户点击：  <code>$(&#39;#btnSend&#39;).click()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为文本框绑定 keyup 事件</span></span><br><span class="line"> $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="comment">// console.log(e.keyCode)</span></span><br><span class="line">   <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;</span><br><span class="line">     <span class="comment">// console.log(&#x27;用户弹起了回车键&#x27;)</span></span><br><span class="line">     $(<span class="string">&#x27;#btnSend&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;能够知道和服务器相关的基本概念&lt;/li&gt;
&lt;li&gt;能够知道客户端和服务器通信的过程&lt;/li&gt;
&lt;li&gt;能够知道数据也是一种资源&lt;/li&gt;
&lt;li&gt;能够说出什么是&lt;code&gt;Ajax&lt;/code&gt;以及应用场景&lt;/li&gt;
&lt;li&gt;能够使用&lt;code&gt;jQuery&lt;/code&gt;中的&lt;code&gt;Ajax&lt;/code&gt;函数请求数据&lt;/li&gt;
&lt;li&gt;能够知道接口和接口文档的概念&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Ajax基本概念-01" scheme="http://example.com/tags/Ajax%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-01/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝</title>
    <link href="http://example.com/2022/05/13/04-%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2022/05/13/04-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2022-05-13T08:45:31.666Z</published>
    <updated>2022-05-19T15:34:35.891Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">     <span class="attr">msg</span>: &#123;</span><br><span class="line">         <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> o = &#123;&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 深拷贝拷贝多层, 每一级别的数据都会拷贝.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newobj, oldobj</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> oldobj) &#123;</span><br><span class="line">                <span class="comment">// 判断我们的属性值属于那种数据类型</span></span><br><span class="line">                <span class="comment">// 1. 获取属性值  oldobj[k]</span></span><br><span class="line">                <span class="keyword">var</span> item = oldobj[k];</span><br><span class="line">                <span class="comment">// 2. 判断这个值是否是数组</span></span><br><span class="line">                <span class="comment">//如果是数组，则递归，再执行一次for循环遍历。</span></span><br><span class="line">                <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">                    newobj[k] = [];</span><br><span class="line">                    <span class="title function_">deepCopy</span>(newobj[k], item)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">                    <span class="comment">// 3. 判断这个值是否是对象</span></span><br><span class="line">                    newobj[k] = &#123;&#125;;</span><br><span class="line">                    <span class="title function_">deepCopy</span>(newobj[k], item)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 4. 属于简单数据类型</span></span><br><span class="line">                    newobj[k] = item;</span><br><span class="line">                &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">deepCopy</span>(o, obj);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(o);  <span class="comment">//object</span></span><br><span class="line">       <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">//true</span></span><br><span class="line">        o.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//object</span></span><br><span class="line">         </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;andy&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;attr&quot;&gt;msg&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;pink&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="深拷贝" scheme="http://example.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>let、const、var的区别</title>
    <link href="http://example.com/2022/05/11/07-let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/05/11/07-let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-05-11T10:56:28.875Z</published>
    <updated>2022-05-19T15:26:40.598Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、let、const、var的区别"><a href="#一、let、const、var的区别" class="headerlink" title="一、let、const、var的区别"></a>一、let、const、var的区别</h4><p>​    （1）块级： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级        用域解决了ES5中的两个问题：<br>​     内层变量可能覆盖外层变量<br>     用来计数的循环变量泄露为[全局变量]</p><span id="more"></span><p>​    （2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p><p>​    （3）给全局添加属性： 浏览器的全局对象是window，的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</p><p>​    （4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</p><p>​    （5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。</p><p>​    （6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</p><p>​    （7）指针指向： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</p><h4 id="二、const对象的属性可以修改吗"><a href="#二、const对象的属性可以修改吗" class="headerlink" title="二、const对象的属性可以修改吗"></a>二、const对象的属性可以修改吗</h4><p>​    const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。<br>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;一、let、const、var的区别&quot;&gt;&lt;a href=&quot;#一、let、const、var的区别&quot; class=&quot;headerlink&quot; title=&quot;一、let、const、var的区别&quot;&gt;&lt;/a&gt;一、let、const、var的区别&lt;/h4&gt;&lt;p&gt;​    （1）块级： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级        用域解决了ES5中的两个问题：&lt;br&gt;​     内层变量可能覆盖外层变量&lt;br&gt;     用来计数的循环变量泄露为[全局变量]&lt;/p&gt;</summary>
    
    
    
    
    <category term="let、const、var的区别" scheme="http://example.com/tags/let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>原型--必背</title>
    <link href="http://example.com/2022/05/09/02-%E5%8E%9F%E5%9E%8B%E5%BF%85%E8%83%8C/"/>
    <id>http://example.com/2022/05/09/02-%E5%8E%9F%E5%9E%8B%E5%BF%85%E8%83%8C/</id>
    <published>2022-05-09T09:38:51.387Z</published>
    <updated>2022-05-09T09:39:57.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-new-在执行时做的4件事"><a href="#一-new-在执行时做的4件事" class="headerlink" title="一. new 在执行时做的4件事"></a>一. new 在执行时做的4件事</h3><ol><li>在内存中创建一个新的空对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（构造函数里不需要return）<span id="more"></span></li></ol><h3 id="二-构造函数"><a href="#二-构造函数" class="headerlink" title="二. 构造函数"></a>二. 构造函数</h3><h4 id="2-1-静态方法-属性-实例方法-属性"><a href="#2-1-静态方法-属性-实例方法-属性" class="headerlink" title="2.1 静态方法/属性 - 实例方法/属性"></a>2.1 静态方法/属性 - 实例方法/属性</h4><p>实例成员只能通过实例化的对象来访问， 不可以通过构造函数来访问<br>静态成员只能通过构造函数来访问，不能通过对象来访问</p><h4 id="2-2-构造函数原型prototype"><a href="#2-2-构造函数原型prototype" class="headerlink" title="2.2 构造函数原型prototype"></a>2.2 构造函数原型prototype</h4><h5 id="2-2-1-prototype的作用"><a href="#2-2-1-prototype的作用" class="headerlink" title="2.2.1 prototype的作用"></a>2.2.1 prototype的作用</h5><p>共享方法</p><h5 id="2-2-2-prototype的概念"><a href="#2-2-2-prototype的概念" class="headerlink" title="2.2.2 prototype的概念"></a>2.2.2 prototype的概念</h5><p>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象。注意这个<br>prototype 就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。<br>补充： 将构造函数中恒定的方法放到它的 prototype 原型对象中， 减少每次实例化对象时的内存<br>消耗</p><h4 id="2-3-构造函数的写法"><a href="#2-3-构造函数的写法" class="headerlink" title="2.3 构造函数的写法"></a>2.3 构造函数的写法</h4><ol><li>将公共属性定义到构造函数中</li><li>将公共方法放到它的原型对象上</li></ol><h4 id="2-4-对象原型-proto"><a href="#2-4-对象原型-proto" class="headerlink" title="2.4 对象原型 proto"></a>2.4 对象原型 <strong>proto</strong></h4><p>实例对象都会有一个属性 <strong>proto</strong> 指向构造函数的 prototype 原型对象。之所以我们对象可以<br>使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。<br>function Person (name,sex) { // class Person<br>// var this = new Object()<br>this.name = name<br>this.sex = sex<br>// return this<br>} </p><p>var obj = new Person(‘lbw’, ‘男’)<br>查找规则：</p><ol><li><p>先看实例化对象（ldh）上是否有目标方法（sing），如果有，则执行该方法</p></li><li><p>如果实例化对象（ldh）上没有该方法，因为有 <strong>proto</strong> ，就可以去构造函数原型对象<br>prototype 上去查找</p></li></ol><h4 id="2-5-constructor-构造函数"><a href="#2-5-constructor-构造函数" class="headerlink" title="2.5 constructor 构造函数"></a>2.5 constructor 构造函数</h4><h4 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h4><p>构造函数原型对象（prototype）里面有一个 constructor 属性 ，constructor 我们称为构造函数，<br>因为它指回构造函数本身。主要用于记录该对象引用于哪个构造函数。</p><h4 id="2-6-构造函数、实例化对象，原型对象的关系-★★★★★-面"><a href="#2-6-构造函数、实例化对象，原型对象的关系-★★★★★-面" class="headerlink" title="2.6 构造函数、实例化对象，原型对象的关系(★★★★★ - 面"></a>2.6 构造函数、实例化对象，原型对象的关系(★★★★★ - 面</h4><p>试必背 500RMB)</p><ol><li>构造函数的 prototype 属性指向了构造函数原型对象 prototype</li><li>实例对象是由构造函数创建的,实例对象的 <strong>proto</strong> 属性指向了构造函数的原型对象</li><li>构造函数的原型对象的constructor属性指向了构造函数,实例对象的原型的constructor属性也指向<br>了构造函数</li></ol><h4 id="2-7-原型链"><a href="#2-7-原型链" class="headerlink" title="2.7 原型链"></a>2.7 原型链</h4><p>每一个实例对象都有一个 <strong>proto</strong> 属性，指向的构造函数的原型对象 prototype ，构造函数的原型<br>对象 prototype 也是一个对象，也有 <strong>proto</strong> 属性，这样一层一层往上找直到找到 Object 的<br>prototype ，他的 <strong>proto</strong> 值为 null ，这就是原型链。<br>2.7.1 原型链上的成员查找机制</p><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型（也就是 <strong>proto</strong> 指向的 prototype 原型对象）。</li><li>如果还没有就查找原型对象的原型（Object的原型对象prototype）。</li><li>依此类推一直找到 Object 的prototype 为止，它的 <strong>proto</strong> 为（null）。</li></ol><h4 id="2-8-原型对象的this指向"><a href="#2-8-原型对象的this指向" class="headerlink" title="2.8 原型对象的this指向"></a>2.8 原型对象的this指向</h4><p>构造函数中的this和原型对象的this，都指向我们new出来的实例对象  </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一-new-在执行时做的4件事&quot;&gt;&lt;a href=&quot;#一-new-在执行时做的4件事&quot; class=&quot;headerlink&quot; title=&quot;一. new 在执行时做的4件事&quot;&gt;&lt;/a&gt;一. new 在执行时做的4件事&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在内存中创建一个新的空对象&lt;/li&gt;
&lt;li&gt;让this指向这个新的对象&lt;/li&gt;
&lt;li&gt;执行构造函数里面的代码，给这个新对象添加属性和方法&lt;/li&gt;
&lt;li&gt;返回这个新对象（构造函数里不需要return）&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>手写一个new</title>
    <link href="http://example.com/2022/05/09/03-%E6%89%8B%E5%86%99new%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/05/09/03-%E6%89%8B%E5%86%99new%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-05-09T07:04:06.531Z</published>
    <updated>2022-05-19T15:23:08.685Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建一个空的简单JavaScript对象（即{}）；</li><li>为步骤1新创建的对象添加属性<code>__proto__</code>，将该属性链接至构造函数的原型对象 ；</li><li>将步骤1新创建的对象作为this的上下文 ；</li><li>如果该函数没有返回对象，则返回this。</li></ol><blockquote><p>new关键词执行后总会返回一个对象, 要么是实例对象, 要么是return语句指定的对象.</p></blockquote><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params">fn,...args</span>)&#123;</span><br><span class="line">    <span class="comment">// let obj = new Object()</span></span><br><span class="line">    <span class="comment">// obj.__proto__ = fn.prototype</span></span><br><span class="line">    <span class="comment">// 基于fn构造函数原型创建一个新对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="comment">// 执行构造函数，并获取fn执行的结果</span></span><br><span class="line">    <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(obj,...args) </span><br><span class="line">    <span class="comment">// 如果执行结果有返回值并且是一个对象，返回执行结果，否则，返回新创建的对象</span></span><br><span class="line">    <span class="keyword">let</span> isObject = <span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> &amp;&amp; res !== <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> isFunction = <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> isObject || isFunction  ? res : obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好理解</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(obj,...args)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (res &amp;&amp; (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span>)) retrun res</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span> (o) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个对象，以o为新创建对象的原型对象</span></span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><ul><li>Instanceof: 用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</li><li>通俗一点就是： 判断new出的实例对象是否是当前构造函数生成的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">my_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// getProtypeOf是Object对象自带的API</span></span><br><span class="line">  <span class="comment">// 返回指定对象的原型（内部[[Prototype]]属性的值）隐式原型</span></span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left);</span><br><span class="line">  <span class="keyword">let</span> prototype = right.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;                  <span class="comment">//循环往下寻找，直到找到相同的原型对象</span></span><br><span class="line">    <span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(proto === prototype) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//找到相同原型对象，返回true</span></span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好理解版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">my_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> proto = left.<span class="property">__proto__</span></span><br><span class="line">    <span class="keyword">let</span> prototype = right.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// 右边的原型</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        proto = proto.<span class="property">__proto__</span> <span class="comment">// 向上查找，直到proto为null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔥手写Promise-all"><a href="#🔥手写Promise-all" class="headerlink" title="🔥手写Promise.all"></a>🔥手写Promise.all</h2><ol><li>参数可迭代</li><li>返回值是promise</li><li>如果全部成功，状态变为resolve</li><li>但凡有一个失败，状态变为reject</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PromiseAll</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">`<span class="subst">$&#123;arr&#125;</span> is not iterable`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = []  <span class="comment">// 存放结果</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">// 进入fullfilled的promise个数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 这里默认把所有入参都包装成promise返回了</span></span><br><span class="line">            <span class="comment">// 因为如果是普通值,在Promise内部实现 2.3.4时, 有返回值的操作</span></span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(arr[i]).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// counter++;</span></span><br><span class="line">                result[i] = value;</span><br><span class="line">                <span class="keyword">if</span> ( ++count === arr.<span class="property">length</span>) <span class="title function_">resolve</span>(result) <span class="comment">//判断已经完成</span></span><br><span class="line">                <span class="comment">// 只要有一个被rejected时, 就reject</span></span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">reject</span>(e))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手写call-apply-bind"><a href="#手写call-apply-bind" class="headerlink" title="手写call, apply, bind"></a>手写call, apply, bind</h2><ul><li><a href="https://juejin.cn/post/6844904042452221960#heading-9">https://juejin.cn/post/6844904042452221960#heading-9</a> 可参考</li><li><a href="https://juejin.cn/post/6844903809206976520#heading-10">https://juejin.cn/post/6844903809206976520#heading-10</a> 可参考</li><li>共同点：都是改变this指向 </li><li>区别<ul><li>call 和 apply是立即执行的，而bind是返回一个新的函数，需要手动去调用</li><li>call可以传递多个参数，第一个参数和apply’一样，是用来替换的对象，后边是参数列表</li><li>apply最多智能有两个参数  （新this对象，数组argsArray）-&gt;  fun.apply(thisArg, [argsArray])</li></ul></li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><ul><li>改变this指向</li><li>函数立即执行，返回执行结果</li><li><a href="https://juejin.cn/post/6844903906279964686#heading-19">https://juejin.cn/post/6844903906279964686#heading-19</a> 可参考</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_call</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断上下文对象</span></span><br><span class="line">    context = context ？<span class="title class_">Object</span>(context) : <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">// 创造唯一key值，作为我们构造的context内部方法名</span></span><br><span class="line">    <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;thisFn&#x27;</span>) </span><br><span class="line">     <span class="comment">// 1. 将fn作为属性添加到context上</span></span><br><span class="line">    context[fn] = <span class="variable language_">this</span> <span class="comment">// 隐式绑定，改变构造函数的调用者间接改变 this 指向</span></span><br><span class="line">    <span class="comment">// 2. 将挂载以后的方法调用</span></span><br><span class="line">    <span class="keyword">let</span> res = context[fn](...args)  <span class="comment">// 这里..args将args数组，变为参数列表，数组的扩展运算符</span></span><br><span class="line">    <span class="comment">// 3. 删除新添加的对象属性</span></span><br><span class="line">    <span class="keyword">delete</span> context[fn]</span><br><span class="line">    <span class="comment">// 4. 返回调用结果</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func.apply(thisArg, [argsArray])</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;fn&#x27;</span>) <span class="comment">// 创建个独一无二的方法名</span></span><br><span class="line">    thisArg[fn] = <span class="variable language_">this</span> <span class="comment">// 方法变换执行对象</span></span><br><span class="line">    <span class="keyword">let</span> res = thisArg[fn](...args) </span><br><span class="line">    <span class="keyword">delete</span> thisArg[fn] <span class="comment">// 删除对象属性</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><ul><li>改变this指向</li><li>返回一个新函数</li><li>新函数可能被当做构造函数调用，函数可能有返回值</li><li>当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效</li><li>传递参数并柯里化</li><li><a href="https://www.jianshu.com/p/b540e1e17f54">https://www.jianshu.com/p/b540e1e17f54</a> 参考</li><li><a href="https://github.com/mqyqingfeng/Blog/issues/12">https://github.com/mqyqingfeng/Blog/issues/12</a>  冴羽</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // ES2015 arguments是一个对象，类数组；</span></span><br><span class="line"><span class="comment">// const args = Array.from(arguments);</span></span><br><span class="line"><span class="comment">// const args = [...arguments];</span></span><br><span class="line"><span class="comment">// let new_array = old_array.concat(value1,value2,...)</span></span><br><span class="line"><span class="comment">// concat后面参数可以是数组，也可以是参数本身</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;this is not a function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>) <span class="comment">// 第一个参数是this，截取掉</span></span><br><span class="line">    <span class="keyword">const</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> fBound =  <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 返回一个绑定了this指向的方法，闭包</span></span><br><span class="line">        <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="comment">// _self.call(context, ...args.concat(...arguments)) 参数为数组，用apply简单</span></span><br><span class="line">      <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> instance <span class="keyword">of</span> fNOP ? <span class="variable language_">this</span> : context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.方法1 原型式继承</span></span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>(); <span class="comment">//绑定原型 原型式继承</span></span><br><span class="line">    <span class="comment">// 2. 方法2: fBound.prototype = Object.create(this.prototype)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去注释 double</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind2</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 判断调用bind的是否是函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;this is not a function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 保存当前环境上下文，取截取this后的传入参数</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>  </span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="comment">// 1.当作为构造函数 new操作的时候，this指向实例，将绑定函数的this指向该实例，可以让实例获得来自绑定函数的值</span></span><br><span class="line">      <span class="comment">// 2.当作为普通函数时，将绑定函数的this指向context</span></span><br><span class="line">      <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="variable language_">this</span> : context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.原型式继承</span></span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>()</span><br><span class="line">  <span class="comment">// 复制原函数的prototype给fBound， 一些情况下函数没有prototype，如箭头函数</span></span><br><span class="line">  <span class="comment">// fBound.prototype.__proto__ = (fNOP.prototype=this.prototype)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   fBound.prototype = this.prototype;</span></span><br><span class="line"><span class="comment">// 直接修改 fBound.prototype 的时候，也会直接修改绑定函数的 prototype</span></span><br></pre></td></tr></table></figure><h4 id="bind2"><a href="#bind2" class="headerlink" title="bind2"></a>bind2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://jsgodroad.com/interview/js/#%E6%89%8B%E5%86%99%E9%A2%98</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_this</span>(...args, ...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _this.<span class="title function_">apply</span>(context, args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔥bind3-new-2021-12-13"><a href="#🔥bind3-new-2021-12-13" class="headerlink" title="🔥bind3 new 2021-12-13"></a>🔥bind3 new 2021-12-13</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">objThis, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;what is trying to be bound is not callable&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span> <span class="comment">// 保存源函数,以及参数</span></span><br><span class="line">    <span class="keyword">const</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fBound ? <span class="variable language_">this</span> : objThis, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修复函数没有prototype的情况 // 维护原型关系</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">        fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// https://juejin.cn/post/6844903906279964686#heading-14</span></span><br></pre></td></tr></table></figure><h4 id="bind-polyfill-core-js"><a href="#bind-polyfill-core-js" class="headerlink" title="bind-polyfill-core-js"></a>bind-polyfill-core-js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Yes, it does work with `new (funcA.bind(thisArg, args))`</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span>) (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">ArrayPrototypeSlice</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>;</span><br><span class="line">  <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span>(<span class="params">otherThis</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// closest thing possible to the ECMAScript 5</span></span><br><span class="line">      <span class="comment">// internal IsCallable function</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Function.prototype.bind - what is trying to be bound is not callable&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> baseArgs= <span class="title class_">ArrayPrototypeSlice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>),</span><br><span class="line">        baseArgsLength = baseArgs.<span class="property">length</span>,</span><br><span class="line">        fToBind = <span class="variable language_">this</span>,</span><br><span class="line">        fNOP    = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        fBound  = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          baseArgs.<span class="property">length</span> = baseArgsLength; <span class="comment">// reset to default base arguments</span></span><br><span class="line">          baseArgs.<span class="property">push</span>.<span class="title function_">apply</span>(baseArgs, <span class="variable language_">arguments</span>);</span><br><span class="line">          <span class="keyword">return</span> fToBind.<span class="title function_">apply</span>(</span><br><span class="line">            <span class="comment">// 是否被new操作符调用，是的话就用新创建的this替换bind的this</span></span><br><span class="line">                 fNOP.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(<span class="variable language_">this</span>) ? <span class="variable language_">this</span> : otherThis, baseArgs</span><br><span class="line">          );</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      <span class="comment">// Function.prototype doesn&#x27;t have a prototype property</span></span><br><span class="line">      fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防止new了函数后改变原型导致原函数的原型被修改</span></span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h4 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h4><ul><li>事件响应函数在一段时间后才执行,如果这段时间内再次调用,则重新计算。 在一定的时间间隔内,将多次触发变成一次触发</li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ol><li>限制鼠标连续点击（按钮提交等）</li><li>Scroll事件滚动防抖</li><li>搜索框输入查询</li><li>浏览器窗口缩放，resize事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.30secondsofcode.org/js/s/debounce 目前看见最简写法，best！</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, ms = <span class="number">0</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutId</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123; </span><br><span class="line">    <span class="comment">// function(...args) rest参数 ，将args转为数组</span></span><br><span class="line">    <span class="comment">// 对比数组的扩展运算法 fn.call(obj,...args) 含义不一样, 将args转为参数列表</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timerId) <span class="comment">// 每次点击的时候清除上一个定时器，重新计时</span></span><br><span class="line">    timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args), ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流  throttle"></a>节流  throttle</h4><ul><li>持续的触发事件,每隔一段时间, 只执行一次 ，减少一段时间的触发频率</li></ul><h5 id="时间戳版本"><a href="#时间戳版本" class="headerlink" title="时间戳版本"></a>时间戳版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, wait</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// Date.now || + new Date() || new Date().getTime() || new Date().valueOf()</span></span><br><span class="line">      <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      <span class="keyword">if</span> (now - pre &gt; = wait) &#123;</span><br><span class="line">        <span class="comment">// apply第二个参数可以是数组，也可以是类数组对象</span></span><br><span class="line">        <span class="comment">// 所以写arguments没有问题！</span></span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        pre = <span class="title class_">Date</span>.<span class="title function_">now</span>() <span class="comment">// 将当前时间记录， 作为下一个计时起点</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时器版本"><a href="#定时器版本" class="headerlink" title="定时器版本"></a>定时器版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, wait</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timerId </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timerId) &#123;</span><br><span class="line">      <span class="comment">// 这里箭头函数，this本身指向上层</span></span><br><span class="line">      timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        timerId = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冴羽 https://github.com/mqyqingfeng/Blog/issues/26</span></span><br></pre></td></tr></table></figure><h2 id="deepClone深拷贝"><a href="#deepClone深拷贝" class="headerlink" title="deepClone深拷贝 !!!"></a>deepClone深拷贝 !!!</h2><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ol><li>Object.assign()</li><li><code>...</code>扩展运算符 <strong><code>let cloneObj = &#123;...obj&#125;</code> <code>let newArr = [...arr]</code></strong></li><li>数组的Slice(), concat()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shallowClone</span> = obj =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="乞丐版"><a href="#乞丐版" class="headerlink" title="乞丐版"></a>乞丐版</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>( obj ) )</span><br></pre></td></tr></table></figure><ol><li>拷贝对象的值中如果有<code>函数</code>、<code>undefined</code>、<code>Symbol</code>，JSON.stringify序列化后的字符串中，这个键值对丢失</li><li>拷贝Date引用类型会变成字符串</li><li>拷贝RegExp会变成空对象 <code>&#123;&#125;</code></li><li>对象中含有 <code>NaN</code>、<code>Infinity</code> 会变成 <code>null</code></li><li>无法拷贝对象的原型链</li><li>无法拷贝不可枚举的属性 如Symbol</li><li>无法拷贝对象的循环引用 ， 即对象成环 <code>obj[key] = obj</code></li></ol><h5 id="🔥优化版"><a href="#🔥优化版" class="headerlink" title="🔥优化版"></a>🔥优化版</h5><ul><li><p>考虑 Date、RegExp类型， 直接生成一个新的实例返回</p></li><li><p>考虑数组  <code>let target = Array.isArray(obj)? [] : &#123;&#125;</code></p></li><li><p>考虑循环引用  利用WeakMap作为hash表， 检测到对象已存在于哈希表中，取出该值返回即可</p></li><li><p>针对不可枚举属性以及 Symbol 类型，使用 Reflect.ownKeys()</p></li><li><p>函数部分太复杂，函数的原型，多层柯里化等</p></li><li><p>针对Map, Set, Error等，Object.getOwnPropertyDescriptors(obj) 也不考虑</p></li><li><p>递归爆栈问题，改用循环解决，广度优先</p></li><li><p> <a href="https://segmentfault.com/a/1190000016672263">深拷贝的终极探索（99%的人都不知道）</a></p></li><li><p><a href="https://juejin.cn/post/6844903929705136141#heading-4">如何写出一个惊艳面试官的深拷贝?</a> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RangeError</span>: <span class="title class_">Maximum</span> call stack size exceeded</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测对象 </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>  <span class="comment">// !!obj</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deepClone</span> = (<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 值类型 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj)) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="comment">// Date, RegExp  constructor容易被修改丢失，被认为不安全，不推荐作为判断</span></span><br><span class="line">  <span class="comment">// instanceof好一些</span></span><br><span class="line"><span class="comment">//  if (obj.constructor === Date) return new Date(obj)</span></span><br><span class="line"><span class="comment">//  if (obj.constructor === RegExp) return new RegExp(obj)</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">  <span class="comment">// 解决循环引用，查哈希表</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj)</span><br><span class="line"><span class="comment">//     let allDesc = Object.getOwnPropertyDescriptors(obj)</span></span><br><span class="line"><span class="comment">//     let target = Object.create(Object.getPrototypeOf(obj),allDesc)</span></span><br><span class="line">  <span class="keyword">let</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125; <span class="comment">// 考虑数组</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, target)</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(obj[key])) &#123;</span><br><span class="line">      target[key] = <span class="title function_">deepClone</span>(obj[key], hash)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><a href="https://yanhaijing.com/javascript/2018/10/10/clone-deep/">深拷贝的终极探索</a> </li></ol><h2 id="实现-5-add-3-minus-2-功能"><a href="#实现-5-add-3-minus-2-功能" class="headerlink" title="实现 (5).add(3).minus(2) 功能"></a>实现 (5).add(3).minus(2) 功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> number !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入数字～&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">valueOf</span>() + n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">minus</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> number !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入数字～&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// return this - n </span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">valueOf</span>() - n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// (5).add(3).minus(2)</span></span><br></pre></td></tr></table></figure><h2 id="如何求数组最大值和最小值"><a href="#如何求数组最大值和最小值" class="headerlink" title="如何求数组最大值和最小值"></a>如何求数组最大值和最小值</h2><ol><li>循环后Math.max</li><li>reduce</li><li>sort排序后取最后</li><li>ES6 … + Math.max</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Math.max</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result =  <span class="title class_">Math</span>.<span class="title function_">max</span>(result, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 2. reduce</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params">prev, next</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(prev, next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(max));</span><br><span class="line"><span class="comment">// 3. sort</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a - b;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[arr.<span class="property">length</span> - <span class="number">1</span>])</span><br><span class="line"><span class="comment">// 4. ES6 ...</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr))</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul><li>双重for循环</li><li>new Set</li><li>indexOf</li><li>array.filter + indexOf</li><li>sort排序 + 相邻元素对比</li><li>Object 键值对 obj.hasOwnProperty</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 双重for循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Set集合，不能有重复值</span></span><br><span class="line"><span class="keyword">const</span> newArr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="keyword">const</span> newArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</span></span><br><span class="line"><span class="comment">// filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. array.filter + indexOf</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> res =  arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果第一次出现，相等</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. sort排序后相邻元素对比</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="comment">// i从1开始算 arr[i-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5.obj.hasOwnProperty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">resetArr</span>(arr)) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// https://github.com/mqyqingfeng/Blog/issues/27</span></span><br></pre></td></tr></table></figure><h2 id="数组扁平化-flatten"><a href="#数组扁平化-flatten" class="headerlink" title="数组扁平化 flatten"></a>数组扁平化 flatten</h2><p><a href="https://juejin.cn/post/6844904025993773063">面试官连环追问：数组拍平（扁平化） flat 方法实现</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(flatten(arr)) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="🔥循环递归"><a href="#🔥循环递归" class="headerlink" title="🔥循环递归"></a>🔥循环递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(arr[i]))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>如果数组元素都是Number, 可以使用；但不推荐这种 toString+split方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]].<span class="title function_">toString</span>() <span class="comment">// &quot;1,2,3,4&quot;</span></span><br><span class="line"><span class="comment">// 场景却非常有限，如果数组是 [1, &#x27;1&#x27;, 2, &#x27;2&#x27;] 此方法不适合</span></span><br><span class="line"><span class="comment">// 扁平化不改变原数据类型</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> +item <span class="comment">//转为Number</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h3 id="🔥用reduce实现flat"><a href="#🔥用reduce实现flat" class="headerlink" title="🔥用reduce实现flat"></a>🔥用reduce实现flat</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法3</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, next</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> prev.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(next) ? <span class="title function_">flatten</span>(next) : next)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">flatten</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">flatten</span>(cur) : cur)</span><br><span class="line">  &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 理解 </span></span><br><span class="line"><span class="comment">// var arr = [2, [3, 4]];</span></span><br><span class="line"><span class="comment">// pre  cur</span></span><br><span class="line"><span class="comment">// []   2       0    [2]</span></span><br><span class="line"><span class="comment">// [2]  [3,4]   1    [2] wait </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []   3       0    [3]</span></span><br><span class="line"><span class="comment">// [3]  4       1    [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [2]  [3,4]       [2,3,4]</span></span><br></pre></td></tr></table></figure><h3 id="ES6-…"><a href="#ES6-…" class="headerlink" title="ES6 …"></a>ES6 …</h3><p>==[].concat(…arr)==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="title function_">concat</span>(...arr)); <span class="comment">// [1, 2, [3, 4]]</span></span><br><span class="line"><span class="comment">// 这时，只可以扁平一层，顺着这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h2 id="🔥柯里化-curry"><a href="#🔥柯里化-curry" class="headerlink" title="🔥柯里化 curry"></a>🔥柯里化 curry</h2><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">fn, ...args</span>) =&gt;&#123;</span><br><span class="line">  <span class="comment">// 当参数与fn参数相同，则直接执行函数 fn.length 形参个数</span></span><br><span class="line"><span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) <span class="keyword">return</span> <span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="comment">// 否则返回函数，合并参数，并继续自动柯里化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ...args, ...args2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数组合-compose"><a href="#函数组合-compose" class="headerlink" title="函数组合 compose"></a>函数组合 compose</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// redux中的实现 不一定准确 ，待整理</span></span><br><span class="line"><span class="comment">// https://github.com/mqyqingfeng/Blog/issues/45</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p><a href="https://juejin.cn/post/7031322059414175774#heading-16">https://juejin.cn/post/7031322059414175774#heading-16</a></p><h2 id="千位分隔符"><a href="#千位分隔符" class="headerlink" title="千位分隔符"></a>千位分隔符</h2><p><a href="https://juejin.cn/post/6844903911686406158#heading-19">https://juejin.cn/post/6844903911686406158#heading-19</a></p><h2 id="异步控制并发数"><a href="#异步控制并发数" class="headerlink" title="异步控制并发数"></a>异步控制并发数</h2><h2 id="ES5继承（寄生组合继承）"><a href="#ES5继承（寄生组合继承）" class="headerlink" title="ES5继承（寄生组合继承）"></a>ES5继承（寄生组合继承）</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/mqyqingfeng/Blog">冴羽的博客</a></li><li><a href="https://juejin.cn/post/7000374304727089159">前端必刷手写题系列 [22]</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;创建一个空的简单JavaScript对象（即{}）；&lt;/li&gt;
&lt;li&gt;为步骤1新创建的对象添加属性&lt;code&gt;__proto__&lt;/code&gt;，将该属性链接至构造函数的原型对象 ；&lt;/li&gt;
&lt;li&gt;将步骤1新创建的对象作为this的上下文 ；&lt;/li&gt;
&lt;li&gt;如果该函数没有返回对象，则返回this。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;new关键词执行后总会返回一个对象, 要么是实例对象, 要么是return语句指定的对象.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="手写一个new" scheme="http://example.com/tags/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAnew/"/>
    
  </entry>
  
  <entry>
    <title>记忆碎片</title>
    <link href="http://example.com/2022/05/08/05-%E8%AE%B0%E5%BF%86%E7%A2%8E%E7%89%87/"/>
    <id>http://example.com/2022/05/08/05-%E8%AE%B0%E5%BF%86%E7%A2%8E%E7%89%87/</id>
    <published>2022-05-08T13:08:31.578Z</published>
    <updated>2022-05-19T15:25:33.425Z</updated>
    
    <content type="html"><![CDATA[<h5 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a>元素获取</h5><p>01.getElementById(“id”)获取的是元素对象本身 或 null，不是伪数组</p><p>返回：元素对象 或null ，//对象使用节点操作获取</p><p>02.document.getElementsByTagName（“标签名”）返回值是伪数组，</p><p>返回：元素对象的集合 以伪数组形式存储     通过遍历 获取</p><p>getElementById(“id”)和document.getElementsByTagName（“标签名”）搭配使用。</p><p>因为 element.getElementsByTagName()  可以得到这个元素里面的某些标签</p><span id="more"></span><p>H5新增：</p><p>03.document.getElementsByClassName返回值是伪数组，对象集合</p><p>04.document.querySelector返回值是dom元素，第一个元素</p><p>05.document.querySelectorAll() 得到的是匹配元素的伪数组，即使只能匹配一个，得到的也是伪数组，伪数的长度为1                               // 数组通过遍历 或者索引获取里面的元素。</p><p>06.doucument . body    //返回body元素对象</p><p><span style="color:red">07.doucument.documentElement    //返回html元素对象</span></p><h5 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h5><p>element.getAttribute(‘属性’)   获取属性值</p><p>element.setAttribute(‘属性’, ‘值’); 主要针对于自定义属性   </p><p>div.removeAttribute(‘index’);移出属性</p><p><span style="color:red">括弧里面加引号</span></p><h5 id="表单的属性操作"><a href="#表单的属性操作" class="headerlink" title="表单的属性操作"></a>表单的属性操作</h5><p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p><h5 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h5><p>元素节点    1</p><p>属性节点    2</p><p>文本节点    3</p><p>子节点 vs 子元素节点 ===&gt;子节点可能是 元素 属性 文本</p><p>元素是元素节点，是节点中的一种，但元素节点中可以包含很多的节点。</p><P style="color:red">子元素节点 是  ol  ul 里面的li ,li 里面的内容也会被返回<br>大多数情况下是使用子元素或者父元素节点</P><p>node.parentNode                   返回某一节点的最近的一个父节点，没有则返回null</p><h6 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h6><p>parentNode.childNodes       返回所有子节点</p><p>parentNode.firstChild       </p><p>parentNode.lastChild</p><h6 id="子元素节点"><a href="#子元素节点" class="headerlink" title="子元素节点"></a>子元素节点</h6><p>parentNode . children             返回所有的子元素节点，它只返回子元素节点（包括里面的内容），其余节点不返回 </p><p>parentNode.firstElmentChild     第一个字元素节点</p><p>parentNode.lastElementChild        最后一个子元素节点</p><p>parentNode.children[0]                    第一个子元素节点</p><p>parentNode.children[parentNode.children.length-1]     最后一个子元素节点</p><h6 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h6><p>nextSibling                             下一个兄弟节点 包含元素节点或者 文本节点等等</p><p>previousSibling                      上一个兄弟节点</p><p>nextElementSibling                 下一个兄弟元素节点</p><p>previousElementSibling           上一个兄弟元素节点</p><h5 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h5><p>标准盒模型content部分不包含其他部分</p><p>IE盒模型content部分包含了border和padding</p><h5 id="盒子居中的的方法："><a href="#盒子居中的的方法：" class="headerlink" title="盒子居中的的方法："></a>盒子居中的的方法：</h5><p><strong>1、绝对定位法（个人感觉最好用）</strong></p><p>2.<strong>负margin居中（传统方法）</strong></p><p><strong>4、flex居中</strong></p><p><strong>5、transform居中</strong></p><p><strong>6、table-cell居中（最不常用</strong></p><h5 id="flex弹性盒子："><a href="#flex弹性盒子：" class="headerlink" title="flex弹性盒子："></a>flex弹性盒子：</h5><h5 id="class-、className、-classList区别"><a href="#class-、className、-classList区别" class="headerlink" title="class 、className、  classList区别"></a>class 、className、  classList区别</h5><ol><li><p>所有浏览器都支持className属性</p></li><li><p>  className属性返回值是一个<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，内容就是HTML元素的class属性内容。classList属性返回一个包含指定元素所有样式类的<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>对象。</p></li><li><p>​     .className的返回值就是包含元素class属性值的字符串。可以用来做判断，也可以用来给某一元素重新赋值，不过会覆盖元素原先的类名，记得把之前的类加上</p></li></ol><p>​            .classList返回值是DOMTokenList类型集合，通过此集合可以非常便利的操作元素class属性。</p><p style="color:red">通过className操作class属性，本质是对字符串的操作，比如判断class是否具有样式类"b"。那么需要自己写代码，将返回的字符串分解为各个样式类，然后再进行判断，相对比较麻烦。如果利用classList属性，那么将是非常轻松愉快的事情，使用<span style="color:red">DOM</span>TokenList集合的contains方法即可实现。</p><p>利用classList返回的集合对象，只需要一个contains方法即可。<br>集合还具有其他方法，分别如下：<br>（1）classList.add()：添加样式类。<br>（2）.item()：返回指定索引的样式类。<br>（3）.remove()：删除指定样式类。<br>（4）.toggle()：切换样式类</p><p>   (5)  .contains( )   是否包含给定类</p><p>​    (6)   . replace(“ select” , “newselect”)     替换类</p><h5 id="setAttribute和add的区别"><a href="#setAttribute和add的区别" class="headerlink" title="setAttribute和add的区别"></a>setAttribute和add的区别</h5><ol><li><p>setAttribute用于创建或改变某个新属性。</p></li><li><p>如果指定属性已经存在,则只设置该值并且会替换原来的值。</p></li><li><p>add方法是添加某个类，不会替换属性中的值，并且需要跟classList使用，因为它是classList的方法。</p></li></ol><p>​             </p><p>eg:      e.target.className == ‘down’</p><h5 id="push-appendchild"><a href="#push-appendchild" class="headerlink" title="push()   appendchild()"></a>push()   appendchild()</h5><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><h5 id="change事件"><a href="#change事件" class="headerlink" title=" change事件:"></a><span style=" color:red"> change事件:</span></h5><div style="color:red">change具有改变的意思，change事件会在原数据发生变化的时候触发。<div>该事件仅适用于文本域（text field），以及 textarea 和 select 元素。<p>注释：当用于 select 元素时，change 事件会在选择某个选项时发生。当用于 text field 或 text area 时，该事件会在元素失去焦点时发生。</p><p> $(“.checkall”).change(function() {     //事件（）里面要加function来写</p><h5 id="jquery判断checked的三种方法"><a href="#jquery判断checked的三种方法" class="headerlink" title="jquery判断checked的三种方法:"></a>jquery判断checked的三种方法:</h5><p>.attr(‘checked’):  //看版本1.6+返回:”checked”或”undefined” ;1.5-返回:true或false<br>.prop(‘checked’): //16+:true/false<br>.is(‘:checked’):   //所有版本:true/false//别忘记冒号哦</p><h5 id="jQuery获取未选中的checkbox"><a href="#jQuery获取未选中的checkbox" class="headerlink" title="jQuery获取未选中的checkbox"></a>jQuery获取未选中的checkbox</h5><p> $(‘input[type=checkbox]’).not(“input:checked”);  </p><p>eg：console.log($(“.j-checkbox”).not(“.j-checkbox:checked”))</p><h5 id="jQuery获取选中的checkbox"><a href="#jQuery获取选中的checkbox" class="headerlink" title="jQuery获取选中的checkbox"></a>jQuery获取选中的checkbox</h5><p>$(‘input[type=checkbox]:checked’);</p><p>eg：  console.log($(“.j-checkbox:checked”))     // 返回被选中的元素   $返回一个伪数组</p><p> console.log($(“.j-checkbox:checked”).length)   //返回被选中的元素的个数  </p><h5 id="jQuery中获取索引"><a href="#jQuery中获取索引" class="headerlink" title="jQuery中获取索引"></a>jQuery中获取索引</h5><p> var index = $(this).index()            //  index()  方法可以直接获取指定元素的索引</p><p>DOM中用for循环  把每次的i 赋值给定义的index</p><p>.parents()        //parents() 方法返回被选元素的所有祖先元素。</p><p>.closest()          </p><ul><li>从当前元素开始</li><li>沿 DOM 树向上遍历，并返回匹配所传递的表达式的第一个祖先</li><li>返回包含零个或一个元素的 jQuery 对象</li></ul><p>.trim()</p><p>.toFixed()</p><pre><code>   1.`$(&quot;html&quot;)`选择`html`类型的所有元素。这就是HTML中的根元素。使用~~`$(document)`或                ~~`$(document.documentElement)`也可以做到这一点。</code></pre><ol start="2"><li><p>$(document)是一个选择器，选中的是整个html所有元素的集合。</p><p>$(document).scrollTop()</p></li><li><p> $(window).scroll()检查窗口是否正在滚动经过某个点</p></li></ol><h5 id="window和document的区别"><a href="#window和document的区别" class="headerlink" title="[window和document的区别]"></a>[window和document的区别]</h5><p>[window对象]</p><p>　　它是一个顶层对象,而不是另一个对象的属性，即浏览器的窗口。</p><pre><code>  document 当前显示的文档(该属性本身也是一个对象)</code></pre><h5 id="locaStorage"><a href="#locaStorage" class="headerlink" title="locaStorage"></a>locaStorage</h5><p>localStorage.setItem                    //存储数据  本地存储    . 设置项目</p><p>本地存储：先把数据转为字符串==》存储  ==&gt;转为对象格式==》使用</p><ol><li>本地存储里面只能存储字符串的数据格式 把我们的数组对象转换为字符串格式 JSON.stringify()</li></ol><p>localStorage.setItem(“todo”, JSON.stringify(todolist));</p><ol start="2"><li>获取本地存储的数据 我们需要把里面的字符串数据转换为 对象格式 JSON.parse()</li></ol><p>​    data = JSON.parse(data);  //parse  分析</p><p><u>append() 操作的是 DOM 节点，push() 操作的是数组。</u></p><h5 id="appendChild与append区别"><a href="#appendChild与append区别" class="headerlink" title="appendChild与append区别:"></a>appendChild与append区别:</h5><p>（1）ParentNode.append()允许追加 DOMString 对象，而 Node.appendChild() 只接受 Node 对象。</p><p>  (2）ParentNode.append() 没有返回值，而 Node.appendChild() 返回追加的 Node 对象。</p><p><font style="color:red">（3）ParentNode.append() 可以追加多个节点和字符串，而 Node.appendChild() 只能追加一个节点。</font></p><p> //splice(开始索引，删除的长度)  数组删除指定位置的元素 </p><p>jQuery可以绑定多个事件放入同一个对象中，并没有被覆盖</p><p>.attr() 方法设置或返回被选元素的属性值。</p><h5 id="checkbox属性checked-”checked”通过js已设置，但是不勾选？？？？"><a href="#checkbox属性checked-”checked”通过js已设置，但是不勾选？？？？" class="headerlink" title="checkbox属性checked=”checked”通过js已设置，但是不勾选？？？？"></a>checkbox属性checked=”checked”通过js已设置，但是不勾选？？？？</h5><p>给input加了checked就可以了</p><h5 id="媒体适配（范围大于用min-，范围小于用max）"><a href="#媒体适配（范围大于用min-，范围小于用max）" class="headerlink" title="媒体适配（范围大于用min ，范围小于用max）"></a>媒体适配（范围大于用min ，范围小于用max）</h5><p>大于900px的时候，匹配900px 到无限大</p><p>@media screen and (min-width:900px)</p><p>小于900px的时候，匹配0 到900px</p><p>@media screen and (max-width:900px)</p><h5 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h5><p>浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，</p><p>深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，</p><h5 id="EM"><a href="#EM" class="headerlink" title="EM"></a>EM</h5><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</p><ol><li><p>em的值并不是固定的；</p></li><li><p>em会继承父级元素的字体大小。</p></li></ol><h5 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h5><p>使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素</p><h5 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw   vh"></a>vw   vh</h5><p>vw\vh的介绍？<br>1.什么是vw(Viewport Width)和vh（Viewport Height）？<br>    1.1 vw和vh是前端开发中的一个动态单位，是一个相对于网页视口的单位。<br>    1.2 系统会将视口的宽度和高度分为100份，1vw占用视口宽度的百分之一，1vh占用视口高度的百分之一。<br>    1.3 vw、vh和百分比不同的是，百分比永远都是以父元素为参考，而vw、vh是以视口作为参考。</p><h5 id="立即执行函数之前需要加-分号"><a href="#立即执行函数之前需要加-分号" class="headerlink" title="立即执行函数之前需要加  ;  分号"></a>立即执行函数之前需要加  ;  分号</h5><h5 id="background-size：-contain-与cover的区别："><a href="#background-size：-contain-与cover的区别：" class="headerlink" title="background-size： contain 与cover的区别："></a>background-size： contain 与cover的区别：</h5><ol><li>在no-repeat情况下，如果容器宽高比与图片宽高比不同，</li></ol><p>　cover：图片宽高比不变、铺满整个容器的宽高，而图片多出的部分则会被截掉；</p><p>　contain:图片自身的宽高比不变，缩放至图片自身能完全显示出来，所以容器会有留白区域；</p><p>2.在repeat情况下：cover:与上述相同；contain:容器内至少有一张完整的图，容器留白区域则平铺背景图，铺不下的再裁掉。</p><p>resize 事件是在浏览器窗口大小发生变化时触发，利用该事件可以跟踪窗口大小的变化来动态调整页面的元素显示。</p><p>接下来利用 resize 事件实现一个小案例：<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>浏览器窗口变化，实时获取该窗口的宽度和高度</p><p>  console.log(this)  // 某一个元素</p><p>   console.log($(this))  //一个对象</p><p>   console.log(this.dataset.type)    //直接看 this . type     dataset是自定义属性的获取方法</p><h5 id="flex属性是由flex-grow-flex-shrink-flex-basis这三个属性的缩写"><a href="#flex属性是由flex-grow-flex-shrink-flex-basis这三个属性的缩写" class="headerlink" title="flex属性是由flex-grow, flex-shrink, flex-basis这三个属性的缩写"></a>flex属性是由flex-grow, flex-shrink, flex-basis这三个属性的缩写</h5><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex-basis`默认值是`auto`，</span><br><span class="line">`flex-grow`默认值是`0`，</span><br><span class="line">`flex-shrink`默认值是`1</span><br></pre></td></tr></table></figure><h5 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h5><p><span style="color:red"> console.log(Object.prototype.toString.call(a))</span></p><p>立即执行函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h5 id="new操作构造函数生成实例的过程"><a href="#new操作构造函数生成实例的过程" class="headerlink" title="new操作构造函数生成实例的过程"></a>new操作构造函数生成实例的过程</h5><ol><li><p>首先, 当我们使用new操作符时, js会先创建一个空的对象</p></li><li><p>然后, 构造函数中的this指向该空对象</p></li><li><p>其次, 在构造函数中通过操作this, 来给这个空对象赋予相应的属性</p></li><li><p>最后, 返回这个经过处理的”空对象”(此时, 对象已经不是空的了)</p><p>缺点：每创建一个实例都要开辟一个内存空间来存放同一个方法，浪费内存。</p></li></ol><p>原型对象 只开辟一次内存空间，存放多个公共方法，new出来的实例对象都可以直接通过原型链找到 并直接使用</p><p>构造函数 是每调用一次都会在内存中开辟一个新内存来存放同一个方法</p><h5 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h5><p>对象是类的具体表达，类是对象的抽象表达。</p><h5 id="禁用双击选中文字默认功能"><a href="#禁用双击选中文字默认功能" class="headerlink" title="// 禁用双击选中文字默认功能"></a>// 禁用双击选中文字默认功能</h5><p>​      window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</p><h5 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h5><p>01.构造函数通过原型分配的函数是所有对象所共享的。</p><p>原型的作用：就是共享方法。</p><p>02.将构造函数中恒定的方法放到它的<code>prototype</code>原型对象中， 减少每次实例化对象时的内存消耗</p><p>03.</p><ol><li>将公共属性定义到构造函数中</li><li>将公共方法放到它的原型对象上</li></ol><p>04.</p><p>函数里面是原型对象prototype</p><p>实例对象里面是 隐式原型  ——proto——</p><p>05.[[proto]]就是 –proto–的浏览器渲染效果</p><p>06.一般来说，公共属性定义在构造函数里面，公共方法定义在原型对象身上</p><p>07.<code>__proto__</code>  、<code>prototype</code>返回（指向）的都是对象{}</p><p>map不会改变原数组，但是如果里面是引用类型那么他的地址不会变，但属性和方法可能会发生变化</p><p>some必须加return</p><p>return用法：在return后面加返回值的条件</p><h5 id="数组也是对象的一种，-但对象不是数组"><a href="#数组也是对象的一种，-但对象不是数组" class="headerlink" title="数组也是对象的一种， 但对象不是数组"></a>数组也是对象的一种， 但对象不是数组</h5><p>添加条件时  for循环 外面的前面  里面  外面的后面</p><h5 id="function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4"><a href="#function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4" class="headerlink" title="function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4"></a>function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4</h5><h5 id="生成一个唯一的id"><a href="#生成一个唯一的id" class="headerlink" title="生成一个唯一的id"></a>生成一个唯一的id</h5><p>var random = Math.random().toString(36).slice(2)</p><p>​    console.log(random)</p><p>计算时间</p><p>var date1 = (+new Date()) / 1000       //写在函数外刚开始 </p><p>var date2 = (+new Date()) / 1000</p><p>​      console.log(date2 - date1);         //写在函数内 或者结束  </p><h5 id="return"><a href="#return" class="headerlink" title="return"></a>return</h5><p>if+return可以替换 if…else 进行程序流程的控制，</p><p>当条件不符合当前判断时，会自动退出当前判断；</p><p>Return False 就相当于终止符，Return True 就相当于执行符。</p></div></div>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;元素获取&quot;&gt;&lt;a href=&quot;#元素获取&quot; class=&quot;headerlink&quot; title=&quot;元素获取&quot;&gt;&lt;/a&gt;元素获取&lt;/h5&gt;&lt;p&gt;01.getElementById(“id”)获取的是元素对象本身 或 null，不是伪数组&lt;/p&gt;
&lt;p&gt;返回：元素对象 或null ，//对象使用节点操作获取&lt;/p&gt;
&lt;p&gt;02.document.getElementsByTagName（“标签名”）返回值是伪数组，&lt;/p&gt;
&lt;p&gt;返回：元素对象的集合 以伪数组形式存储     通过遍历 获取&lt;/p&gt;
&lt;p&gt;getElementById(“id”)和document.getElementsByTagName（“标签名”）搭配使用。&lt;/p&gt;
&lt;p&gt;因为 element.getElementsByTagName()  可以得到这个元素里面的某些标签&lt;/p&gt;</summary>
    
    
    
    
    <category term="记忆碎片" scheme="http://example.com/tags/%E8%AE%B0%E5%BF%86%E7%A2%8E%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</title>
    <link href="http://example.com/2022/05/07/01-%E8%B5%B5%E4%B8%BD%E9%A2%96%EF%BC%9A%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E9%85%8D%E4%B8%8D%E9%85%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E5%8F%91%E5%85%89%E4%BA%86%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%80%BC%E5%BE%97%E7%9A%84%EF%BC%81/"/>
    <id>http://example.com/2022/05/07/01-%E8%B5%B5%E4%B8%BD%E9%A2%96%EF%BC%9A%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E9%85%8D%E4%B8%8D%E9%85%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E5%8F%91%E5%85%89%E4%BA%86%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%80%BC%E5%BE%97%E7%9A%84%EF%BC%81/</id>
    <published>2022-05-07T14:18:01.659Z</published>
    <updated>2022-05-07T15:19:57.808Z</updated>
    
    <content type="html"><![CDATA[<p>网络上为赵丽颖晋身为Dior新代言人，为baby抱屈而打口水仗的人们依旧在评论区喋喋不休。</p><p>网友不是头一次抹黑赵丽颖，也不是第一次对她评头论足。</p><p>他们从来没忘记赵丽颖的中专文凭、农村出身、补刀神手的人设，以及她在时尚界那次长裙美背后却贴小花纸的“土美”事件。</p><p>他们从来没想到她以一张包子脸的长相也能进军时尚界甚至可以开疆辟土，能在颜控大长腿的天下里挤得一席之地。</p><span id="more"></span><p><img src="https://joeybling.github.io/images/2743275-53f4e13ae7bb957c.jpg" alt="img"><br>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>别说喷子们不服，就连那些以颜值、身材傲娇的模特们甚至也要掂量下要不要去拍部剧来充实一下自己的市场含金量。</p><p>也许，不过是因为赵丽颖改变了某些市场主导者的审美标准，也或者因为她让人们看到了属于某种叫做内在因素的美学吸引力。</p><p>在风云突变的娱乐圈子里，令人眼花缭乱的美的形式层出不穷，种种以花瓶自居的美少女美男子更是如过江之鲫。可以说美常有，花瓶亦常有，但是以内在实力让人发现美的内在的，却不常见。</p><p><img src="https://joeybling.github.io/images/2743275-8a989c5bb640f4bf.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>黄渤算是特例，他从来不以帅著称。</p><p>但是他有让人透过“看似抽象的外表”发现其演技魅力的能耐，继而在大大小小的场合，能让人心悦诚服地体会到他妙语连珠舌灿生花的高情商魅力。这大概就属于那种可以满足人们精神需要层次的美了。</p><p><img src="https://joeybling.github.io/images/2743275-4d63302781989ff0.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>周冬雨也算特例，而且特例得很成功。</p><p>作为18岁时就荣升为“谋女郎”的幸运儿，她的演技她的颜值，在进入电影学院以及刚毕业的阶段，都不算是人们口中的佼佼者。甚至在很长一段时间里，人们总能从她刻意扮老的衣着里发现“令人扼腕”的衣品。</p><p>她没有好身材，她也曾自嘲“自己二十四岁的年纪里，有的是十四岁的身材”；她没有欧式大眼睛，她笑起来眼睛眯成一条线的样子的确像自嘲的“小蝌蚪”“小黄鸭”。</p><p><img src="https://joeybling.github.io/images/2743275-d0b5d1c133826c9e.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>可是她知道衣品可以偷偷修炼，演技亦可以让那些吐槽她的人对她黑转粉。</p><p>现在的周冬雨，总能用梨花带雨的哭或明媚如初恋的笑牵引着观众去发现她的灵动、可爱、放肆、潇洒。她是安生、顾胜男、肖红，还是宇宙CP心中念念不忘的“小蝌蚪”。她用角色在无数人心中收获对她别样之美的肯定。</p><p>诚然，她瘦小单薄，不够丰盈饱满。但是她会努力想尽各种办法，去让自己中学时因练舞而壮硕的小腿变瘦再变瘦。于是与别人比，她会胜在肌肤胜雪、会胜在后天小白腿又瘦又直所营造出的纯真干净气质上。所以，懂得适合自己穿衣风格的姑娘，懂得扬长避短的她，终会在可以抱着奖杯时靠衣品靠气质在时尚界锦上添花。</p><p><img src="https://joeybling.github.io/images/2743275-cb84c86409b3303d.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>周冬雨也许可以成为赵丽颖在衣品上征服人心的榜样。她们虽然不够天资卓越，但胜在后天足够努力。尽管她们都曾被人很批过说话耿直情商感人，但是胜在她们都足够心大如海，能把注意力转移到自己钟爱的演技磨砺层面，继而以实力赢得业界尊重。</p><p>这时代，从耀眼高台跌倒下来的明星不胜枚举，在底层逆境中一点一点攀爬努力的演员亦多如星辰。但不管她们处在什么阶段，能够给予她们自信的，永远是自己对所爱事业的追梦执念，和一次次挫败后的执着坚持。</p><p>正所谓“闻道有先后，术业有专攻”。多少演员成为明星，立足的资本，成名的资本，踏入时尚圈的资本，永远是彰显实力的代表作。也就是说，唯有专注于自己的术业，才能脱胎换骨，再上台阶；才能有机会发光发亮，才够得住机会来时的橄榄枝！</p><p>出道十年，赵丽颖从选秀开始奋斗，跑过无数龙套，在扎扎实实的演技磨砺中成就了陆贞、杉杉、花千骨、楚乔等多个被人记到心里的角色，也算是用步步的成就证明了从平凡到华丽蜕变的自我价值。</p><p><img src="https://joeybling.github.io/images/2743275-b650a625da475f1b.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>就算曾经土气又如何，曾经籍籍无名又如何，谁的人生不是在不断修炼中成长?当你拥有一颗坚忍倔强的心，埋首修剪自我的不足时，就没空在乎别人说长道短了。</p><p>就像赵丽颖曾说的，人到一定程度，就不会再计较那么多了；以前会怕这个、怕那个，但是她觉得现在的自己心态很平和，状态也还挺好；对于这些东西就更不在意了。</p><p>正所谓，你若淡看风云，窗前自有云卷云舒的自在；你若似繁花锦绣，周围自有蝴蝶悄然翩跹。</p><p><img src="https://joeybling.github.io/images/2743275-a9e30f2c8ddd5f04.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>诚然，梦想不必过早就实现，也不必实现了就止步于当下。</p><p>我们总有困顿迷惑自我怀疑的时候，就像努力了很多年的前夫哥雷佳音，在出演鹿兆鹏几个月都快要抑郁的时候，等来了陈俊生、裴纶这样一个可以证明自己实力的角色。</p><p><img src="https://joeybling.github.io/images/2743275-8d20f5c9550d4809.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>就像被离婚大战拖累到几乎要完全没有出路的潘粤明，在跨界歌王中唱出了文艺小生的双面挣扎，也让自己有机会被制作方看中可塑性而出演了证明自己炸裂演技的角色“白夜兄弟”。</p><p><img src="https://joeybling.github.io/images/2743275-ecab8a59519a96cf.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>我们总有会爬上某个看似自我高峰的时刻，唯有清醒和自省能让自己行远路行得远。</p><p>就像周冬雨的小妞人设演多了，也需要调整战略在别的角色领域里证明自己的可塑性。就像赵丽颖的进阶更上层楼了，也需要在学识修养衣品方面内外兼修裨补缺漏。</p><p>有人说，任何人都不是超人，你的心思放在哪儿是可以看见的。</p><p>当你眼中只有名利时，纵然有一千万中想红想赚快钱的途径，但是如日中天如薛之谦又如何，火箭般翻红的速度，维持的时间却不过是两年。</p><p>当没有创新度的段子梗被他在上百个节目中玩到泛滥时，当没有专情如一的人品来维持深情人设而被昔日恋人李雨桐扒个底朝天的时候，名利来得快走得也快，还顺便把你打倒至众人踩众人唾弃的深渊。</p><p>傅雷说，我们的确是盲目着在世界上前进的。但是当你行走于世越深入，你才发现你的双眼你的灵魂会容易被浮华蔽眼而陷入盲目。</p><p>没有谁不渴望事业成功荣耀加身，但是能救赎我们灵魂的永远是自己可以拿得出手的自己钟爱的作品。</p><p>如好剧本之于演员，好书籍之于作家，好项目之于商人，好工作之于普通人。我们行走江湖的目的，就是用尽自己的全部能耐把本来就好的璞玉打造成臻于完美的玉石。</p><p>至于随之而来的物质累积、名誉傍身，都不过是立足于其上的附加之物。本立则荣加，本无则荣枯。明白这一点，世人眼中关于你的值不值得，都不足以撼动你对自己的肯定。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网络上为赵丽颖晋身为Dior新代言人，为baby抱屈而打口水仗的人们依旧在评论区喋喋不休。&lt;/p&gt;
&lt;p&gt;网友不是头一次抹黑赵丽颖，也不是第一次对她评头论足。&lt;/p&gt;
&lt;p&gt;他们从来没忘记赵丽颖的中专文凭、农村出身、补刀神手的人设，以及她在时尚界那次长裙美背后却贴小花纸的“土美”事件。&lt;/p&gt;
&lt;p&gt;他们从来没想到她以一张包子脸的长相也能进军时尚界甚至可以开疆辟土，能在颜控大长腿的天下里挤得一席之地。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://example.com/2022/04/15/06-hello-world/"/>
    <id>http://example.com/2022/04/15/06-hello-world/</id>
    <published>2022-04-15T03:41:12.897Z</published>
    <updated>2022-05-05T13:18:41.508Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
