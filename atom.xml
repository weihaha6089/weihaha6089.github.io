<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-05T13:26:49.943Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WEB API</title>
    <link href="http://example.com/2022/04/21/WEB-API-DAY4/"/>
    <id>http://example.com/2022/04/21/WEB-API-DAY4/</id>
    <published>2022-04-21T10:26:08.596Z</published>
    <updated>2022-05-05T13:26:49.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB-API"><a href="#WEB-API" class="headerlink" title="WEB API"></a>WEB API</h1><p>常用得到的键盘事件</p><h3 id="1-1-onkeyup-键盘抬起时触发"><a href="#1-1-onkeyup-键盘抬起时触发" class="headerlink" title="1.1 onkeyup 键盘抬起时触发"></a>1.1 onkeyup 键盘抬起时触发</h3><h3 id="1-2代码实现"><a href="#1-2代码实现" class="headerlink" title="1.2代码实现"></a>1.2代码实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&#x27;keyup&#x27;,function(e)&#123;</span><br><span class="line">            console.log(&#x27;键盘弹起&#x27;);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="2-1onkeydown-键盘按下触发"><a href="#2-1onkeydown-键盘按下触发" class="headerlink" title="2.1onkeydown 键盘按下触发"></a>2.1onkeydown 键盘按下触发</h3><p>那个值还没有输入，事件就被触发了</p><h3 id="2-2代码的实现"><a href="#2-2代码的实现" class="headerlink" title="2.2代码的实现"></a>2.2代码的实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&#x27;keydown&#x27;,function(e)&#123;</span><br><span class="line">            console.log(e);</span><br><span class="line">            console.log(&#x27;键盘按下&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1onkeypress-键盘按下触发"><a href="#3-1onkeypress-键盘按下触发" class="headerlink" title="3.1onkeypress 键盘按下触发"></a>3.1onkeypress 键盘按下触发</h3><p>keypress不能被功能键识别</p><h3 id="3-2代码实现"><a href="#3-2代码实现" class="headerlink" title="3.2代码实现"></a>3.2代码实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&#x27;keypress&#x27;,function(e)&#123;</span><br><span class="line">            console.log(&#x27;我被按下了press&#x27;);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="4-三个键盘事件的执行顺序"><a href="#4-三个键盘事件的执行顺序" class="headerlink" title="4.三个键盘事件的执行顺序"></a>4.三个键盘事件的执行顺序</h3><p>keydown –&gt; keypress  —-&gt; keyup</p><p>keydown ，keypress在我们输入键的时候就已经触发事件了</p><h2 id="键盘事件对象之keyCode属性"><a href="#键盘事件对象之keyCode属性" class="headerlink" title="键盘事件对象之keyCode属性"></a>键盘事件对象之keyCode属性</h2><p>键盘事件中对象的keyCode 属性可以得到相应键的ACSSII码值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&#x27;keyup&#x27;,function(e) &#123;</span><br><span class="line">            console.log(&#x27;up:&#x27; + e.keyCode);</span><br><span class="line">            if (e.keyCode === 65) &#123;</span><br><span class="line">                alert(&#x27;您按下a键&#x27;)</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                alert(&#x27;您没按下a键&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        document.addEventListener(&#x27;press&#x27;,function(e)&#123;</span><br><span class="line">            console.log(&#x27;press:&#x27; + e.keyCode);</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="模拟京东按键输入内容"><a href="#模拟京东按键输入内容" class="headerlink" title="模拟京东按键输入内容"></a>模拟京东按键输入内容</h2><p>核心 思路：检测用户是否按下了 s键 ，如果按下了s键就把光标定位到搜索框里面</p><p>代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var search = document.querySelector(&#x27;input&#x27;)</span><br><span class="line">       document.addEventListener(&#x27;keyup&#x27;,function()&#123;</span><br><span class="line">           //打印出s的ACSII码值 </span><br><span class="line">           console.log(e.keyCode);  //s= 83</span><br><span class="line">           if(e.keyCode == 83) &#123;</span><br><span class="line">               search.focus()</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>模拟京东快递单号查询 的案例</p><p>核心思路：</p><ol><li><p>快递单号输入内容时, 上面的大号字体盒子(con)显示(这里面的字号更大)</p></li><li><p>表单检测用户输入: 给表单添加键盘事件</p></li><li><p>同时把快递单号里面的值(value)获取过来赋值给 con盒子(innerText)做为内容</p></li><li><p>如果快递单号里面内容为空,则隐藏大号字体盒子(con)盒子</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//获取元素</span><br><span class="line">        var con = document.querySelector(&#x27;.con&#x27;)</span><br><span class="line">        var inputs = document.querySelector(&#x27;.jd&#x27;)</span><br><span class="line">        //当jd按下时绑定事件</span><br><span class="line">        inputs.addEventListener(&#x27;keyup&#x27;,function()&#123;</span><br><span class="line">            //当表单框里面没有内容的时候,con盒子也没有内容 当有内容的时候,</span><br><span class="line">            //内容也会给到con盒子</span><br><span class="line">            if(this.value == &#x27;&#x27;) &#123;</span><br><span class="line">                con.style.display = &#x27;&#x27;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                con.style.display = &#x27;block&#x27;</span><br><span class="line">                con.innerHTML = this.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        //jd获得焦点的时候con这个盒子显示</span><br><span class="line">        inputs.addEventListener(&#x27;focus&#x27;,function()&#123;</span><br><span class="line">            con.style.display = &#x27;block&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">        //jd失去焦点的时候con这个盒子隐藏</span><br><span class="line">        inputs.addEventListener(&#x27;blur&#x27;,function()&#123;</span><br><span class="line">            con.style.display = &#x27;&#x27;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="BOM顶级对象window"><a href="#BOM顶级对象window" class="headerlink" title="BOM顶级对象window"></a>BOM顶级对象window</h2><p>BOM浏览器对象模型  </p><p>  BOM提供了独立于内容 而与浏览器窗口进行交互的对象；</p><h2 id="window常见的事件"><a href="#window常见的事件" class="headerlink" title="window常见的事件"></a>window常见的事件</h2><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><h4 id="为什么有页面加载事件"><a href="#为什么有页面加载事件" class="headerlink" title="为什么有页面加载事件"></a>为什么有页面加载事件</h4><p>因为 JavaScript 中的函数方法需要在 HTML 文档渲染完成后才可以使用</p><p>如果没有渲染完成,此时的 DOM 树是不完整的,这样在调用一些 JavaScript 代码时就可能报出”undefined”错误</p><h3 id="页面加载事件的方式"><a href="#页面加载事件的方式" class="headerlink" title="页面加载事件的方式"></a>页面加载事件的方式</h3><p>传统的方式window.onload = function(){}</p><p>window.addEventListener (‘load’,function(){})</p><p>window.addEventListener(‘DOMContentLoaded’,function(){})</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function () &#123;</span><br><span class="line">               console.log(&#x27;1111&#x27;)</span><br><span class="line">           &#125;</span><br><span class="line">           //第2种 load 表示页面全部加载完毕包含图片,css</span><br><span class="line">           window.addEventListener(&#x27;load&#x27;,function() &#123;</span><br><span class="line">               console.log(&#x27;222&#x27;);</span><br><span class="line">           &#125;)</span><br><span class="line">           //第三种   DOMContentLoaded 文档加载完了,DOM树叶加载完了</span><br><span class="line">           //不包含css 图片</span><br><span class="line">           document.addEventListener(&#x27;DONContentLoaded&#x27;,function() &#123;</span><br><span class="line">               console.log(&#x27;3333&#x27;);</span><br><span class="line">           &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">window.addEventListener(&#x27;load&#x27;,function() &#123;</span><br><span class="line">           var div = document.querySelector(&#x27;div&#x27;)</span><br><span class="line">           window.addEventListener(&#x27;resize&#x27;,function() &#123;</span><br><span class="line">               console.log(&#x27;发生了变化&#x27;);</span><br><span class="line">               //window.innerWidth  获得当前浏览器宽度</span><br><span class="line">               if(window.innerWidth &lt;= 600) &#123;</span><br><span class="line">                   div.style.display = &#x27;none&#x27;</span><br><span class="line">               &#125;else &#123;</span><br><span class="line">                   div.style.display = &#x27;block&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>resize 事件是在浏<strong>览器窗口被重置时触发的，</strong>如当用户调整窗口大小，或者最大化、最小化、恢复窗口大小显示时触发 resize 事件</p><h2 id="定时器之setTimeout"><a href="#定时器之setTimeout" class="headerlink" title="定时器之setTimeout"></a>定时器之setTimeout</h2><p>1.setTimeout </p><p>​    语法规范:  window.setTimeout(调用函数, 延时时间);</p><ol><li><p>这个window在调用的时候可以省略</p></li><li><p>这个延时时间单位是毫秒 但是可以省略,如果省略默认的是0</p></li><li><p>这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 ‘函数名()’</p></li><li><p>页面中可能有很多的定时器,我们经常给定时器加标识符 (名字)</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//setTimeout(调用函数,延时时间)</span><br><span class="line">       //第一种写法</span><br><span class="line">       setTimeout(function() &#123;</span><br><span class="line">           console.log(&#x27;时间到给我爆&#x27;);</span><br><span class="line">       &#125;,2000)</span><br><span class="line">       //第二种写法</span><br><span class="line">       var fn = function () &#123;</span><br><span class="line">           console.log(&#x27;我是回调函数&#x27;);</span><br><span class="line">       &#125;</span><br><span class="line">       var cb = setTimeout(fn,5000)</span><br><span class="line">       //这个延时时间是毫秒数,但是可以省略,如果省略默认的是0 </span><br><span class="line">       //浏览器中最小延迟是4ms</span><br></pre></td></tr></table></figure><h2 id="清除-clearTimeout定时器"><a href="#清除-clearTimeout定时器" class="headerlink" title="清除 clearTimeout定时器"></a>清除 clearTimeout定时器</h2><p>clearTimeout(定时器名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.querySelector(&#x27;button&#x27;)</span><br><span class="line">      //开启定时器</span><br><span class="line">      var timer = setTimeout(function() &#123;</span><br><span class="line">          console.log(&#x27;时间到给我爆&#x27;);</span><br><span class="line">      &#125;,2000)</span><br><span class="line">      //点击的时候清除定时器,在这个延迟事件前我们清除他 他就不会回调了</span><br><span class="line">      btn.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">          clearTimeout(timer)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h2 id="定时器之setInterval"><a href="#定时器之setInterval" class="headerlink" title="定时器之setInterval"></a>定时器之setInterval</h2><p> 语法规范:  window.setInterval(调用函数, 延时时间);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//1.直接写在setInterval里面</span><br><span class="line">       setInterval(function() &#123;</span><br><span class="line">           console.log(&#x27;无敌是多么寂寞&#x27;);</span><br><span class="line">       &#125;,2000)</span><br><span class="line"></span><br><span class="line">       //2.声明或者表达式 先初始化回调函数 在传入</span><br><span class="line">       var fn = function() &#123;</span><br><span class="line">           console.log(&#x27;加油老铁&#x27;);</span><br><span class="line">       &#125;</span><br><span class="line">       setInterval(fn,1000)</span><br><span class="line">       //清除定时器</span><br><span class="line">       //clearInterval(IntervalID)</span><br></pre></td></tr></table></figure><h3 id="setTimout与setInterval的区别"><a href="#setTimout与setInterval的区别" class="headerlink" title="setTimout与setInterval的区别"></a>setTimout与setInterval的区别</h3><p>setTimeout 延时时间到了 就执行回调函数，只执行一次</p><p>setInterval 每隔这个延时时间就调用函数，重复执行</p><h2 id="清除setIterval-定时器"><a href="#清除setIterval-定时器" class="headerlink" title="清除setIterval 定时器"></a>清除setIterval 定时器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var begin = document.querySelector(&#x27;.begin&#x27;)</span><br><span class="line">var stop = document.querySelector(&#x27;.stop&#x27;)</span><br><span class="line">var timer = null</span><br><span class="line">//注册点击事件</span><br><span class="line">begin.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">     timer = setInterval(function()&#123;</span><br><span class="line">        console.log(&#x27;我来了&#x27;);</span><br><span class="line">    &#125;,2000)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stop.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">    clearInterval(timer)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="倒计时效果"><a href="#倒计时效果" class="headerlink" title="倒计时效果"></a>倒计时效果</h2><hr><h2 id="发送短信案例"><a href="#发送短信案例" class="headerlink" title="发送短信案例"></a>发送短信案例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.querySelector(&#x27;button&#x27;)</span><br><span class="line">      var time = 3 //定义剩下的秒数</span><br><span class="line">      btn.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">          //当按钮绑定点击事件后,开启定时器</span><br><span class="line">         timer = setInterval(function()&#123;</span><br><span class="line">             btn.disable = true</span><br><span class="line">              if(time == 0) &#123;</span><br><span class="line">                  //时间为0 的话恢复按钮,清除定时器</span><br><span class="line">                  clearInterval(timer)</span><br><span class="line">                  btn.disable = false</span><br><span class="line">                  btn.innerHTML = &#x27;发送&#x27;</span><br><span class="line">                  time = 3</span><br><span class="line">              &#125;else &#123;</span><br><span class="line">                  btn.innerHTML = &#x27;还剩下&#x27;+time+&#x27;秒&#x27;</span><br><span class="line">                  time--</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,1000)</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h2 id="this的指向问题（重点面试题）"><a href="#this的指向问题（重点面试题）" class="headerlink" title="this的指向问题（重点面试题）"></a><strong>this的指向问题</strong>（重点面试题）</h2><p>1.this在全局作用域和普通函数中的this指向是window（还有定时器中d的this）</p><p>2.方法中this，是调用就是谁</p><p>3.构造函数中this指向new的实例对象</p><p>//new构造寒素</p><p>1，在内存中创建一个空对象</p><p>2.让this指向这个空对象</p><p>3，执行构造函数里面的代码给这个空对象添加属性和方法</p><p>4，返回这个对象（构造函数里面 不需要写return）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">console.log(this);</span><br><span class="line"></span><br><span class="line">      function fn() &#123;</span><br><span class="line">          console.log(this);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      window.fn();</span><br><span class="line">      window.setTimeout(function() &#123;</span><br><span class="line">          console.log(this);</span><br><span class="line"></span><br><span class="line">      &#125;, 1000);</span><br><span class="line">      // 2. 方法调用中谁调用this指向谁</span><br><span class="line">      var o = &#123;</span><br><span class="line">          sayHi: function() &#123;</span><br><span class="line">              console.log(this); // this指向的是 o 这个对象</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      o.sayHi();</span><br><span class="line">      var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">      // btn.onclick = function() &#123;</span><br><span class="line">      //     console.log(this); // this指向的是btn这个按钮对象</span><br><span class="line"></span><br><span class="line">      // &#125;</span><br><span class="line">      btn.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line">              console.log(this); // this指向的是btn这个按钮对象</span><br><span class="line"></span><br><span class="line">          &#125;)</span><br><span class="line">          // 3. 构造函数中this指向构造函数的实例</span><br><span class="line">      function Fun() &#123;</span><br><span class="line">          console.log(this); // this 指向的是fun 实例对象</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      var fun = new Fun();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="执行队列"><a href="#执行队列" class="headerlink" title="执行队列"></a>执行队列</h2><h3 id="1-同步任务和异步任务"><a href="#1-同步任务和异步任务" class="headerlink" title="1. 同步任务和异步任务"></a>1. 同步任务和异步任务</h3><p>​    单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待！！</p><p>​    为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>​    前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>​    你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><h2 id="location常见的方法"><a href="#location常见的方法" class="headerlink" title="location常见的方法"></a>location常见的方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line"></span><br><span class="line">   btn.addEventListener(&#x27;click&#x27;, function() &#123;</span><br><span class="line"></span><br><span class="line">     // 记录浏览历史,所以可以实现后退功能</span><br><span class="line"></span><br><span class="line">     // location.assign(&#x27;http://www.itcast.cn&#x27;);</span><br><span class="line"></span><br><span class="line">     // 不记录浏览历史,所以不可以实现后退功能</span><br><span class="line"></span><br><span class="line">     // location.replace(&#x27;http://www.itcast.cn&#x27;);</span><br><span class="line"></span><br><span class="line">     location.reload(true);</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WEB-API&quot;&gt;&lt;a href=&quot;#WEB-API&quot; class=&quot;headerlink&quot; title=&quot;WEB API&quot;&gt;&lt;/a&gt;WEB API&lt;/h1&gt;&lt;p&gt;常用得到的键盘事件&lt;/p&gt;
&lt;h3 id=&quot;1-1-onkeyup-键盘抬起时触发&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://example.com/2022/04/15/hello-world/"/>
    <id>http://example.com/2022/04/15/hello-world/</id>
    <published>2022-04-15T03:41:12.897Z</published>
    <updated>2022-05-05T13:18:41.508Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
