<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>派大星</title>
  
  <subtitle>派大星</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-26T11:53:05.293Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>派大星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ajax-05</title>
    <link href="http://example.com/2022/05/26/16-ajax-05/"/>
    <id>http://example.com/2022/05/26/16-ajax-05/</id>
    <published>2022-05-26T11:41:50.344Z</published>
    <updated>2022-05-26T11:53:05.293Z</updated>
    
    <content type="html"><![CDATA[<ul><li>能够说出什么是<code>HTTP</code>协议</li><li>能够知道<code>HTTP</code>请求消息的组成部分</li><li>能够知道<code>HTTP</code>响应消息的组成部分</li><li>能够说出常见的请求方法</li><li>能够说出常见的响应状态码<span id="more"></span><h1 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h1></li></ul><h2 id="什么是通信"><a href="#什么是通信" class="headerlink" title="什么是通信"></a>什么是通信</h2><p>通信，就是<strong>信息的传递和交换</strong>。</p><p>通信三要素：</p><ul><li><p>通信的主体</p></li><li><p>通信的内容</p></li><li><p>通信的方式</p></li></ul><h3 id="现实生活中的通信"><a href="#现实生活中的通信" class="headerlink" title="现实生活中的通信"></a>现实生活中的通信</h3><p>案例：<strong>张三</strong>要把自己考上传智专修学院的好消息写信告诉自己的好朋友<strong>李四</strong></p><p><strong>其中：</strong></p><p>通信的<strong>主体</strong>是张三和李四；</p><p>通信的<strong>内容</strong>是考上传智专修学院；</p><p>通信的<strong>方式</strong>是写信；</p><h3 id="互联网中的通信"><a href="#互联网中的通信" class="headerlink" title="互联网中的通信"></a><strong>互联网中的通信</strong></h3><p><strong>案例：</strong>服务器把传智专修学院的简介通过响应的方式发送给客户端浏览器。</p><p>其中，</p><p>通信的<strong>主体</strong>是服务器和客户端浏览器；</p><p>通信的<strong>内容</strong>是传智专修学院的简介；</p><p>通信的<strong>方式</strong>是响应；</p><h2 id="什么是通信协议"><a href="#什么是通信协议" class="headerlink" title="什么是通信协议"></a>什么是通信协议</h2><p><strong>通信协议</strong>（<code>Communication Protocol</code>）是指通信的双方完成通信所<strong>必须遵守</strong>的<strong>规则和约定</strong>。</p><p><strong>通俗的理解：</strong>通信双方采用约定好的格式来发送和接收消息，这种<strong>事先约定好的通信格式，就叫做通信协议</strong>。</p><h3 id="现实生活中的通信协议"><a href="#现实生活中的通信协议" class="headerlink" title="现实生活中的通信协议"></a>现实生活中的通信协议</h3><p>张三与李四采用写信的方式进行通信，在填写信封时，写信的双方需要遵守固定的规则。<strong>信封的填写规则</strong>就是一种通信协议</p><p><img src="https://s2.loli.net/2022/05/26/gNDu6eXtKSxmRCA.png"></p><h3 id="互联网中的通信协议"><a href="#互联网中的通信协议" class="headerlink" title="互联网中的通信协议"></a>互联网中的通信协议</h3><p>客户端与服务器之间要实现网页内容的传输，则通信的双方必须遵守网页内容的传输协议。</p><p>网页内容又叫做<strong>超文本</strong>，因此网页内容的传输协议又叫做<strong>超文本传输协议</strong>（HyperText Transfer Protocol） ，</p><p>简称 <strong>HTTP 协议</strong>。</p><h2 id="HTTP-⭐⭐⭐"><a href="#HTTP-⭐⭐⭐" class="headerlink" title="HTTP(⭐⭐⭐)"></a>HTTP(⭐⭐⭐)</h2><h3 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h3><p><strong>HTTP 协议</strong>即超文本传送协议 (<code>HyperText Transfer Protocol</code>) ，它规定了客户端与服务器之间进行网页内容传输时，所必须遵守的传输格式。</p><p><strong>例如：</strong></p><ul><li><p>客户端要以HTTP协议要求的格式把数据提交到服务器</p></li><li><p>服务器要以HTTP协议要求的格式把内容响应给客户端</p></li></ul><h3 id="HTTP协议的交互模型"><a href="#HTTP协议的交互模型" class="headerlink" title="HTTP协议的交互模型"></a>HTTP协议的交互模型</h3><p>HTTP 协议采用了<font style="color:red"> <strong>请求/响应</strong></font> 的交互模型。</p><p><img src="https://s2.loli.net/2022/05/26/urb3ym5aMUeS7j9.png"></p><h1 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h1><h2 id="什么是HTTP请求消息"><a href="#什么是HTTP请求消息" class="headerlink" title="什么是HTTP请求消息"></a>什么是HTTP请求消息</h2><p>由于 <code>HTTP</code> 协议属于客户端浏览器和服务器之间的通信协议。因此，客户端发起的请求叫做 <strong>HTTP 请求</strong>，客户</p><p>端发送到服务器的消息，叫做 <strong>HTTP 请求消息</strong>。</p><p><strong>注意：</strong><code>HTTP</code> 请求消息又叫做 <code>HTTP</code> 请求报文</p><h2 id="HTTP请求消息的组成部分-⭐⭐⭐"><a href="#HTTP请求消息的组成部分-⭐⭐⭐" class="headerlink" title="HTTP请求消息的组成部分(⭐⭐⭐)"></a>HTTP请求消息的组成部分(⭐⭐⭐)</h2><p><code>HTTP</code> 请求消息由请求行（<code>request line</code>）、请求头部（ <code>header</code> ） 、空行 和 请求体 4 个部分组成。</p><p><img src="https://s2.loli.net/2022/05/26/5SrjiJ9HahXMwoA.png"></p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p><strong>请求行</strong>由<strong>请求方式</strong>、<strong>URL</strong> 和 <strong>HTTP 协议版本</strong> 3 个部分组成，他们之间使用空格隔开。</p><p><img src="https://s2.loli.net/2022/05/26/ym7VfzTKZeM4qta.png"></p><h4 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h4><p><strong>请求头部</strong>用来描述客户端的基本信息，从而把客户端相关的信息告知服务器。比如：User-Agent 用来说明当前是什么类型的浏览器；</p><p><code>Content-Type</code> 用来描述发送到服务器的数据格式；Accept 用来描述客户端能够接收什么类型的返回内容；<code>Accept-Language</code> 用来描述客户端期望接收哪种人类语言的文本内容。</p><p>请求头部由多行 <strong>键/值对</strong> 组成，每行的键和值之间用英文的冒号分隔</p><p><img src="https://s2.loli.net/2022/05/26/jUyMcCThOEPHKQk.png"></p><h4 id="请求头部-–-常见的请求头字段"><a href="#请求头部-–-常见的请求头字段" class="headerlink" title="请求头部 – 常见的请求头字段"></a>请求头部 – 常见的请求头字段</h4><p><img src="https://s2.loli.net/2022/05/26/j2ZiCPgUte5XuGI.png"></p><p><img src="https://s2.loli.net/2022/05/26/jsD9WMyxAVtc3Tp.png"></p><p>关于更多请求头字段的描述，可以查看 <code>MDN</code> 官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>最后一个请求头字段的后面是一个<strong>空行</strong>，通知服务器<strong>请求头部至此结束</strong>。</p><p>请求消息中的<strong>空行</strong>，用来<u>分隔请求头部与请求体</u></p><p><img src="https://s2.loli.net/2022/05/26/xhPZEv2wCNbFLjD.png"></p><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体中存放的，是要通过 <code>POST</code> 方式提交到服务器的数据。</p><p><img src="https://s2.loli.net/2022/05/26/gmKxL1H5sQcWMlT.png"></p><p><strong>注意</strong>：只有 <code>POST</code> 请求才<strong>有请求体</strong>，<code>GET</code> 请求<strong>没有请求体</strong>！</p><h1 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h1><h2 id="什么是HTTP响应消息"><a href="#什么是HTTP响应消息" class="headerlink" title="什么是HTTP响应消息"></a>什么是HTTP响应消息</h2><p><strong>响应消息</strong>就是服务器响应给客户端的消息内容，也叫作<strong>响应报文</strong>。</p><h2 id="HTTP响应消息的组成部分-⭐⭐⭐"><a href="#HTTP响应消息的组成部分-⭐⭐⭐" class="headerlink" title="HTTP响应消息的组成部分(⭐⭐⭐)"></a>HTTP响应消息的组成部分(⭐⭐⭐)</h2><p>HTTP响应消息由<strong>状态行</strong>、<strong>响应头部</strong>、<strong>空行</strong> 和 <strong>响应体</strong> 4 个部分组成，如下图所示：</p><p><img src="https://s2.loli.net/2022/05/26/lpXnYw7Kg3NA9QT.png"></p><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p><strong>状态行</strong>由 <strong>HTTP 协议版本</strong>、<strong>状态码</strong>和<strong>状态码的描述文本</strong> 3 个部分组成，他们之间使用空格隔开</p><p><img src="https://s2.loli.net/2022/05/26/cY8M3kaqPEHABXt.png"></p><h3 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h3><p><strong>响应头部</strong>用来描述<strong>服务器的基本信息</strong>。响应头部由多行 <strong>键/值对</strong> 组成，每行的键和值之间用英文的冒号分隔。</p><p><img src="https://s2.loli.net/2022/05/26/N5BUPA8paOnLxoG.png"></p><h3 id="响应头部-–-常见的响应头字段"><a href="#响应头部-–-常见的响应头字段" class="headerlink" title="响应头部 – 常见的响应头字段"></a>响应头部 – 常见的响应头字段</h3><p><img src="https://s2.loli.net/2022/05/26/IZkUEsb2KLR3O1w.png"></p><p>关于更多响应头字段的描述，可以查看 <code>MDN</code> 官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p><h3 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h3><p>在最后一个响应头部字段结束之后，会紧跟一个<strong>空行</strong>，用来通知客户端<strong>响应头部至此结束</strong>。</p><p>响应消息中的空行，用来分隔<strong>响应头部</strong>与<strong>响应体</strong>。</p><p><img src="https://s2.loli.net/2022/05/26/8QbZDlVLw4ycjNa.png"></p><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体中存放的，是服务器响应给客户端的资源内容。</p><p><img src="https://s2.loli.net/2022/05/26/3Picd6FZQuWL5Ee.png"></p><h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><h2 id="什么是HTTP请求方法"><a href="#什么是HTTP请求方法" class="headerlink" title="什么是HTTP请求方法"></a>什么是HTTP请求方法</h2><p>HTTP 请求方法，属于 HTTP 协议中的一部分，请求方法的作用是：用来表明<strong>要对服务器上的资源执行的操作</strong>。最常用的请求方法是 <code>GET</code> 和 <code>POST</code>。</p><h2 id="HTTP的请求方法-⭐⭐⭐"><a href="#HTTP的请求方法-⭐⭐⭐" class="headerlink" title="HTTP的请求方法(⭐⭐⭐)"></a>HTTP的请求方法(⭐⭐⭐)</h2><p><img src="https://s2.loli.net/2022/05/26/tjT8iDUdcECR5Fb.png"></p><h1 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h1><h2 id="什么是HTTP响应状态码"><a href="#什么是HTTP响应状态码" class="headerlink" title="什么是HTTP响应状态码"></a>什么是HTTP响应状态码</h2><p><strong>HTTP 响应状态码</strong>（<code>HTTP Status Code</code>），也属于 <code>HTTP</code> 协议的一部分，用来标识响应的状态。</p><p>响应状态码会随着响应消息一起被发送至客户端浏览器，浏览器根据服务器返回的响应状态码，就能知道这次</p><p><code>HTTP</code> 请求的结果是成功还是失败了。</p><p><img src="images/http%E7%9B%B8%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.png"></p><h2 id="HTTP响应状态码的组成及分类"><a href="#HTTP响应状态码的组成及分类" class="headerlink" title="HTTP响应状态码的组成及分类"></a>HTTP响应状态码的组成及分类</h2><p>HTTP 状态码由<strong>三个十进制数字组成</strong>，<strong>第一个十进制数字定义了状态码的类型</strong>，后两个数字<strong>用来对状态码进行细分</strong>。</p><p>HTTP 状态码共分为 5 种类型：</p><p><img src="https://s2.loli.net/2022/05/26/QejOAnq3wy7kPRp.png"></p><p>完整的 HTTP 响应状态码，可以参考 <code>MDN</code> 官方文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p><h2 id="常见的HTTP响应状态码-⭐⭐⭐"><a href="#常见的HTTP响应状态码-⭐⭐⭐" class="headerlink" title="常见的HTTP响应状态码(⭐⭐⭐)"></a>常见的HTTP响应状态码(⭐⭐⭐)</h2><h3 id="2-成功相关的响应状态码"><a href="#2-成功相关的响应状态码" class="headerlink" title="2** 成功相关的响应状态码"></a>2** 成功相关的响应状态码</h3><p>2** 范围的状态码，表示服务器已成功接收到请求并进行处理。常见的 2** 类型的状态码如下：</p><p><img src="https://s2.loli.net/2022/05/26/GRjfqbPmp682oOg.png"></p><h3 id="3-重定向相关的响应状态码"><a href="#3-重定向相关的响应状态码" class="headerlink" title="3** 重定向相关的响应状态码"></a>3** 重定向相关的响应状态码</h3><p>3** 范围的状态码，表示表示服务器要求客户端重定向，需要客户端进一步的操作以完成资源的请求。常见的 3** 类型的状态码如下：</p><p><img src="https://s2.loli.net/2022/05/26/3qx4658kLIgX1Jh.png"></p><h3 id="4-客户端错误相关的响应状态码"><a href="#4-客户端错误相关的响应状态码" class="headerlink" title="4** 客户端错误相关的响应状态码"></a>4** 客户端错误相关的响应状态码</h3><p>4** 范围的状态码，表示客户端的请求有非法内容，从而导致这次请求失败。常见的 4** 类型的状态码如下：</p><p><img src="https://s2.loli.net/2022/05/26/ne1LOswNrA3QH7M.png"></p><h3 id="5-服务端错误相关的响应状态码"><a href="#5-服务端错误相关的响应状态码" class="headerlink" title="5** 服务端错误相关的响应状态码"></a>5** 服务端错误相关的响应状态码</h3><p>5** 范围的状态码，表示服务器未能正常处理客户端的请求而出现意外错误。常见的 5** 类型的状态码如下</p><p><img src="https://s2.loli.net/2022/05/26/XxvZlu7NBnDU51S.png"></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;能够说出什么是&lt;code&gt;HTTP&lt;/code&gt;协议&lt;/li&gt;
&lt;li&gt;能够知道&lt;code&gt;HTTP&lt;/code&gt;请求消息的组成部分&lt;/li&gt;
&lt;li&gt;能够知道&lt;code&gt;HTTP&lt;/code&gt;响应消息的组成部分&lt;/li&gt;
&lt;li&gt;能够说出常见的请求方法&lt;/li&gt;
&lt;li&gt;能够说出常见的响应状态码&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="ajax-05" scheme="http://example.com/tags/ajax-05/"/>
    
  </entry>
  
  <entry>
    <title>ajax-04</title>
    <link href="http://example.com/2022/05/26/15-ajax-04/"/>
    <id>http://example.com/2022/05/26/15-ajax-04/</id>
    <published>2022-05-26T11:41:44.727Z</published>
    <updated>2022-05-26T11:53:01.027Z</updated>
    
    <content type="html"><![CDATA[<ul><li>能够知道什么是同源策略和跨域</li><li>能够知道什么是<code>JSONP</code></li><li>能够说出<code>JSONP</code>的实现原理</li><li>能够知道防抖和节流的概念<span id="more"></span><h1 id="同源策略-⭐⭐⭐"><a href="#同源策略-⭐⭐⭐" class="headerlink" title="同源策略(⭐⭐⭐)"></a>同源策略(⭐⭐⭐)</h1></li></ul><h2 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h2><p>如果两个页面的<strong>协议，域名和端口</strong>都相同，则两个页面具有<strong>相同的源</strong>。</p><p>例如，下表给出了相对于 <a href="http://www.test.com/index.html">http://www.test.com/index.html</a> 页面的同源检测：</p><p><img src="https://s2.loli.net/2022/05/26/Ui4hbVkf5XYGxL1.png"></p><h2 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h2><p><strong>同源策略</strong>（英文全称 Same origin policy）是<strong>浏览器</strong>提供的一个<strong>安全功能</strong></p><p><strong><code>MDN</code> 官方给定的概念</strong>：同源策略<u>限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互</u>。这</p><p>是一个用于隔离潜在恶意文件的重要安全机制</p><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><p>① 无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</p><p>② 无法接触非同源网页的 DOM</p><p>③ 无法向非同源地址发送 Ajax 请求</p><p>//获取 - 控制 - 允许  -  起源</p><p>Access-Control-Allow-Origin：*            //后端处理 允许所有域名的脚本访问本资源</p><p>Access-Control-Allow-Origin：网址      //允许特定的域名访问</p><h1 id="跨域-⭐⭐⭐"><a href="#跨域-⭐⭐⭐" class="headerlink" title="跨域(⭐⭐⭐)"></a>跨域(⭐⭐⭐)</h1><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p><strong>同源</strong>指的是两个 URL 的协议、域名、端口一致，反之，则是<strong>跨域</strong></p><p>出现跨域的根本原因：<strong>浏览器的同源策略</strong>不允许非同源的 URL 之间进行资源的交互</p><p>网页：<code>http://www.test.com/index.html</code></p><p>接口：<code>http://www.api.com/userlist</code></p><h2 id="浏览器对跨域请求的拦截"><a href="#浏览器对跨域请求的拦截" class="headerlink" title="浏览器对跨域请求的拦截"></a>浏览器对跨域请求的拦截</h2><p><img src="https://s2.loli.net/2022/05/26/nb6IHQ7CFuTWkcR.png"></p><p><strong>注意：</strong>浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p><h2 id="如何实现跨域数据请求"><a href="#如何实现跨域数据请求" class="headerlink" title="如何实现跨域数据请求"></a>如何实现跨域数据请求</h2><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 <code>JSONP</code> 和 <code>CORS</code>。</p><p><strong><code>JSONP</code>：</strong>出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。<strong>缺点是只支持 <code>GET</code> 请求，不支持 <code>POST</code> 请求。</strong></p><p><strong><code>CORS</code>：</strong>出现的较晚，它是 <code>W3C</code> 标准，属于跨域 <code>Ajax</code> 请求的根本解决方案。支持 <code>GET</code> 和 <code>POST</code> 请求。<strong>缺点</strong>是不兼容某些低版本的浏览器</p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a><code>JSONP</code></h1><h2 id="什么是JSONP-⭐⭐⭐"><a href="#什么是JSONP-⭐⭐⭐" class="headerlink" title="什么是JSONP(⭐⭐⭐)"></a>什么是<code>JSONP</code>(⭐⭐⭐)</h2><p><code>JSONP</code> (<code>JSON with Padding</code>) 是 <code>JSON</code> 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p><h2 id="JSONP的实现原理-⭐⭐⭐"><a href="#JSONP的实现原理-⭐⭐⭐" class="headerlink" title="JSONP的实现原理(⭐⭐⭐)"></a><code>JSONP</code>的实现原理(⭐⭐⭐)</h2><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 <code>&lt;script&gt;</code> 标签不受浏览器同</p><p>源策略的影响，可以通过 <code>src</code> 属性，请求非同源的 <code>js</code> 脚本。</p><p>因此，<code>JSONP</code> 的实现原理，<strong>就是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，请求跨域的数据接口，并通过函数调用的形式，接收跨域接口响应回来的数据</strong></p><h2 id="自己实现一个简单的JSONP"><a href="#自己实现一个简单的JSONP" class="headerlink" title="自己实现一个简单的JSONP"></a>自己实现一个简单的<code>JSONP</code></h2><p>定义一个<code>success</code>回调函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取到了data数据：&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>&lt;script&gt;</code> 标签，请求接口数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.frontend.itheima.net:3006/api/jsonp?callback=success&amp;name=zs&amp;a</span></span></span><br><span class="line"><span class="string"><span class="tag">ge=20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSONP的缺点"><a href="#JSONP的缺点" class="headerlink" title="JSONP的缺点"></a><code>JSONP</code>的缺点</h2><p>由于 <code>JSONP</code> 是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，来实现跨域数据获取的，所以，<code>JSONP</code> 只支持 <code>GET</code> 数据请求，不支持 POST 请求。</p><p><strong>注意：</strong> <strong><code>JSONP</code> 和 Ajax 之间没有任何关系</strong>，不能把 <code>JSONP</code> 请求数据的方式叫做 Ajax，因为 <code>JSONP</code> 没有用到</p><p><code>XMLHttpRequest</code> 这个对象</p><h2 id="jQuery中的JSONP"><a href="#jQuery中的JSONP" class="headerlink" title="jQuery中的JSONP"></a><code>jQuery</code>中的<code>JSONP</code></h2><p><code>jQuery</code> 提供的 <code>$.ajax()</code> 函数，除了可以发起真正的 <code>Ajax</code> 数据请求之外，还能够发起 <code>JSONP</code> 数据请求，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">     <span class="comment">// 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp</span></span><br><span class="line">     <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,       <span class="comment">//发起请求类型只能是get请求</span></span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>默认情况下，使用 <code>jQuery</code> 发起 <code>JSONP</code> 请求，会自动携带一个 c<code>allback=jQueryxxx</code> 的参数，<code>jQueryxxx</code> 是随机生成的一个回调函数名称</p><h3 id="自定义参数及回调函数名称"><a href="#自定义参数及回调函数名称" class="headerlink" title="自定义参数及回调函数名称"></a>自定义参数及回调函数名称</h3><p>在使用 <code>jQuery</code> 发起 <code>JSONP</code> 请求时，如果想要自定义 <code>JSONP</code> 的<strong>参数</strong>以及<strong>回调函数名称</strong>，可以通过如下两个参数来指定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">     <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">     <span class="comment">// 发送到服务端的参数名称，默认值为 callback</span></span><br><span class="line">     <span class="attr">jsonp</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">     <span class="comment">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span></span><br><span class="line">     <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery中JSONP的实现过程"><a href="#jQuery中JSONP的实现过程" class="headerlink" title="jQuery中JSONP的实现过程"></a><code>jQuery</code>中<code>JSONP</code>的实现过程</h3><p><code>jQuery</code> 中的 <code>JSONP</code>，也是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性实现跨域数据访问的，只不过，<code>jQuery</code> 采用的是<strong>动态创建和移除标签</strong>的方式，来发起 <code>JSONP</code> 数据请求。</p><ul><li><p>在发起 <code>JSONP</code> 请求的时候，动态向 <code>&lt;header&gt;</code> 中 append 一个 <code>&lt;script&gt;</code> 标签；</p></li><li><p>在 <code>JSONP</code> 请求成功以后，动态从 <code>&lt;header&gt;</code> 中移除刚才 <code>append</code> 进去的 <code>&lt;script&gt;</code> 标签；</p></li></ul><h1 id="案例-–-淘宝搜索"><a href="#案例-–-淘宝搜索" class="headerlink" title="案例 – 淘宝搜索"></a><strong>案例</strong> <strong>–</strong> 淘宝搜索</h1><h2 id="要实现的UI效果"><a href="#要实现的UI效果" class="headerlink" title="要实现的UI效果"></a>要实现的<code>UI</code>效果</h2><p><img src="https://s2.loli.net/2022/05/26/kEFcVOHlWnqJYDb.png"></p><h2 id="获取用户输入的搜索关键词"><a href="#获取用户输入的搜索关键词" class="headerlink" title="获取用户输入的搜索关键词"></a>获取用户输入的搜索关键词</h2><p>为了获取到用户每次按下键盘输入的内容，需要监听输入框的 <code>keyup</code> 事件，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文本框的 keyup 事件</span></span><br><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 获取用户输入的内容</span></span><br><span class="line">     <span class="keyword">var</span> keywords = $(<span class="variable language_">this</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="comment">// 判断用户输入的内容是否为空</span></span><br><span class="line">     <span class="keyword">if</span> (keywords.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// TODO：获取搜索建议列表</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="封装getSuggestList函数"><a href="#封装getSuggestList函数" class="headerlink" title="封装getSuggestList函数"></a>封装<code>getSuggestList</code>函数</h2><p>将获取搜索建议列表的代码，封装到 <code>getSuggestList</code> 函数中，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSuggestList</span>(<span class="params">kw</span>) &#123;</span><br><span class="line">     $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="comment">// 指定请求的 URL 地址，其中，q 是用户输入的关键字</span></span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;https://suggest.taobao.com/sug?q=&#x27;</span> + kw,</span><br><span class="line">     <span class="comment">// 指定要发起的是 JSONP 请求</span></span><br><span class="line">     <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">     <span class="comment">// 成功的回调函数</span></span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(res) &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="渲染建议列表的UI结构"><a href="#渲染建议列表的UI结构" class="headerlink" title="渲染建议列表的UI结构"></a>渲染建议列表的<code>UI</code>结构</h2><h3 id="定义搜索建议列表"><a href="#定义搜索建议列表" class="headerlink" title="定义搜索建议列表"></a>定义搜索建议列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tab 栏区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索建议列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;suggest-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义模板结构"><a href="#定义模板结构" class="headerlink" title="定义模板结构"></a>定义模板结构</h3><ul><li>创建<code>script</code>标签</li><li>设置<code>type</code>属性为 <code>text/html</code> 设置模板<code>id</code></li><li>利用 <code>each</code> 遍历结构</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl-suggestList&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     </span><span class="template-variable">&#123;&#123;<span class="name"><span class="built_in">each</span></span> result&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;suggest-item&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value</span>[0]&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">each</span></span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义渲染模板结构的函数"><a href="#定义渲染模板结构的函数" class="headerlink" title="定义渲染模板结构的函数"></a>定义渲染模板结构的函数</h3><ul><li>定义函数，接收一个参数，就是服务器返回的数据</li><li>判断返回的数据长度是否大于0</li><li>如果没有，将页面的列表清空，并且进行隐藏</li><li>如果有数据，调用模板的 <code>template</code> 函数，传入<code>id</code>和数据</li><li>返回渲染好的<code>html</code>字符串，然后放入容器中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 渲染建议列表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderSuggestList</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// 如果没有需要渲染的数据，则直接 return</span></span><br><span class="line">     <span class="keyword">if</span> (res.<span class="property">result</span>.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> $(<span class="string">&#x27;#suggest-list&#x27;</span>).<span class="title function_">empty</span>().<span class="title function_">hide</span>()</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 渲染模板结构</span></span><br><span class="line">     <span class="keyword">var</span> htmlStr = <span class="title function_">template</span>(<span class="string">&#x27;tpl-suggestList&#x27;</span>, res)</span><br><span class="line">     $(<span class="string">&#x27;#suggest-list&#x27;</span>).<span class="title function_">html</span>(htmlStr).<span class="title function_">show</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索关键词为空时隐藏搜索建议列表"><a href="#搜索关键词为空时隐藏搜索建议列表" class="headerlink" title="搜索关键词为空时隐藏搜索建议列表"></a>搜索关键词为空时隐藏搜索建议列表</h2><ul><li>注册<code>keyup</code>事件</li><li>判断输入框的内容是否为空</li><li>如果为空隐藏列表</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 获取用户输入的内容</span></span><br><span class="line">     <span class="keyword">var</span> keywords = $(<span class="variable language_">this</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="comment">// 判断用户输入的内容是否为空</span></span><br><span class="line">     <span class="keyword">if</span> (keywords.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="comment">// 如果关键词为空，则清空后隐藏搜索建议列表</span></span><br><span class="line">     <span class="keyword">return</span> $(<span class="string">&#x27;#suggest-list&#x27;</span>).<span class="title function_">empty</span>().<span class="title function_">hide</span>()</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">getSuggestList</span>(keywords)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="防抖-amp-节流"><a href="#防抖-amp-节流" class="headerlink" title="防抖&amp;节流"></a>防抖&amp;节流</h1><ul><li>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</li><li>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</li></ul><h2 id="输入框防抖"><a href="#输入框防抖" class="headerlink" title="输入框防抖"></a>输入框防抖</h2><h3 id="什么是防抖-⭐⭐⭐"><a href="#什么是防抖-⭐⭐⭐" class="headerlink" title="什么是防抖(⭐⭐⭐)"></a>什么是防抖(⭐⭐⭐)</h3><p><strong>防抖策略</strong>（<code>debounce</code>）是<u>当事件被触发后，延迟 <code>n</code> 秒后再执行回调，如果在这 <code>n</code> 秒内事件又被触发，则重新计时。</u></p><p><img src="https://s2.loli.net/2022/05/26/EVGaOcHu98ixPdF.png"></p><p><strong>好处：</strong>能够保证用户在频繁触发某些事件的时候，不会频繁的执行回调，只会被执行一次</p><h3 id="防抖的应用场景"><a href="#防抖的应用场景" class="headerlink" title="防抖的应用场景"></a>防抖的应用场景</h3><p>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减</p><p>少请求次数，节约请求资源；</p><h3 id="实现输入框的防抖"><a href="#实现输入框的防抖" class="headerlink" title="实现输入框的防抖"></a>实现输入框的防抖</h3><ul><li>防抖动的 timer</li><li>定义防抖的函数，函数里面定义一个延时器，在演示器里面调用发起<code>JSONP</code>的请求</li><li>在触发 <code>keyup</code> 事件时，立即清空 <code>timer</code>，然后调用防抖的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span> <span class="comment">// 1. 防抖动的 timer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounceSearch</span>(<span class="params">keywords</span>) &#123; <span class="comment">// 2. 定义防抖的函数</span></span><br><span class="line">     timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 发起 JSONP 请求</span></span><br><span class="line">     <span class="title function_">getSuggestList</span>(keywords)</span><br><span class="line">     &#125;, <span class="number">500</span>)</span><br><span class="line"> &#125;</span><br><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 3. 在触发 keyup 事件时，立即清空 timer</span></span><br><span class="line"> <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line"> <span class="comment">// ...省略其他代码</span></span><br><span class="line"> <span class="title function_">debounceSearch</span>(keywords)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="缓存搜索的建议列表"><a href="#缓存搜索的建议列表" class="headerlink" title="缓存搜索的建议列表"></a>缓存搜索的建议列表</h3><h4 id="定义全局缓存对象"><a href="#定义全局缓存对象" class="headerlink" title="定义全局缓存对象"></a>定义全局缓存对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存对象</span></span><br><span class="line"><span class="keyword">var</span> cacheObj = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="将搜索结果保存到缓存对象中"><a href="#将搜索结果保存到缓存对象中" class="headerlink" title="将搜索结果保存到缓存对象中"></a>将搜索结果保存到缓存对象中</h4><ul><li>键就是用户输入的关键字，值就是服务器返回的value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染建议列表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderSuggestList</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// ...省略其他代码</span></span><br><span class="line">     <span class="comment">// 将搜索的结果，添加到缓存对象中</span></span><br><span class="line">     <span class="keyword">var</span> k = $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     cacheObj[k] = res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先从缓存中获取搜索建议"><a href="#优先从缓存中获取搜索建议" class="headerlink" title="优先从缓存中获取搜索建议"></a>优先从缓存中获取搜索建议</h4><ul><li>在发起请求之前，先判断缓存中是否有数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文本框的 keyup 事件</span></span><br><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// ...省略其他代码</span></span><br><span class="line">     <span class="comment">// 优先从缓存中获取搜索建议</span></span><br><span class="line">     <span class="keyword">if</span> (cacheObj[keywords]) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title function_">renderSuggestList</span>(cacheObj[keywords])</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 获取搜索建议列表</span></span><br><span class="line">     <span class="title function_">debounceSearch</span>(keywords)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="节流⭐⭐⭐"><a href="#节流⭐⭐⭐" class="headerlink" title="节流⭐⭐⭐"></a>节流⭐⭐⭐</h2><h3 id="什么是节流-⭐⭐⭐"><a href="#什么是节流-⭐⭐⭐" class="headerlink" title="什么是节流(⭐⭐⭐)"></a>什么是节流(⭐⭐⭐)</h3><p><strong>节流策略</strong>（<code>throttle</code>），顾名思义，可以减少一段时间内事件的触发频率。</p><p><img src="https://s2.loli.net/2022/05/26/1q9MkmNPKHrS4Du.png"></p><h3 id="节流的应用场景"><a href="#节流的应用场景" class="headerlink" title="节流的应用场景"></a>节流的应用场景</h3><p>① 鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p><p>② 懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</p><h3 id="节流案例-–-鼠标跟随效果"><a href="#节流案例-–-鼠标跟随效果" class="headerlink" title="节流案例 – 鼠标跟随效果"></a><strong>节流案例</strong> <strong>–</strong> 鼠标跟随效果</h3><h4 id="UI效果"><a href="#UI效果" class="headerlink" title="UI效果"></a><code>UI</code>效果</h4><p><img src="https://s2.loli.net/2022/05/26/NL1StwYzvW2VIKs.png"></p><h4 id="渲染UI结构并美化样式"><a href="#渲染UI结构并美化样式" class="headerlink" title="渲染UI结构并美化样式"></a>渲染<code>UI</code>结构并美化样式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UI 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/angel.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;angel&quot;</span> /&gt;</span></span><br><span class="line">/* CSS 样式 */</span><br><span class="line">html, body &#123;</span><br><span class="line"> margin: 0;</span><br><span class="line"> padding: 0;</span><br><span class="line"> overflow: hidden; &#125;</span><br><span class="line">#angel &#123;</span><br><span class="line"> position: absolute; &#125;</span><br></pre></td></tr></table></figure><h4 id="不使用节流时实现鼠标跟随效果"><a href="#不使用节流时实现鼠标跟随效果" class="headerlink" title="不使用节流时实现鼠标跟随效果"></a>不使用节流时实现鼠标跟随效果</h4><ul><li>获取图片元素</li><li>注册 <code>mousemove</code>事件</li><li>设置图片的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 获取图片元素</span></span><br><span class="line">     <span class="keyword">var</span> angel = $(<span class="string">&#x27;#angel&#x27;</span>)</span><br><span class="line">     <span class="comment">// 监听文档的 mousemove 事件</span></span><br><span class="line">     $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="comment">// 设置图片的位置</span></span><br><span class="line">     $(angel).<span class="title function_">css</span>(<span class="string">&#x27;left&#x27;</span>, e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>, e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="节流阀的概念"><a href="#节流阀的概念" class="headerlink" title="节流阀的概念"></a>节流阀的概念</h4><p>高铁卫生间是否被占用，由红绿灯控制，红灯表示被占用，绿灯表示可使用。</p><p>假设每个人上卫生间都需要花费5分钟，则五分钟之内，被占用的卫生间无法被其他人使用。</p><p>上一个人使用完毕后，需要将红灯<strong>重置</strong>为绿灯，表示下一个人可以使用卫生间。</p><p>下一个人在上卫生间之前，需要<strong>先判断控制灯</strong>是否为绿色，来知晓能否上卫生间。</p><p>节流阀为空，表示可以执行下次操作；不为空，表示不能执行下次操作。</p><p>当前操作执行完，必须将节流阀<strong>重置</strong>为空，表示可以执行下次操作了。</p><p>每次执行操作前，必须<strong>先判断节流阀是否为空</strong>。</p><h4 id="使用节流优化鼠标跟随效果"><a href="#使用节流优化鼠标跟随效果" class="headerlink" title="使用节流优化鼠标跟随效果"></a>使用节流优化鼠标跟随效果</h4><ul><li>预定义一个 timer <strong>节流阀</strong></li><li>当设置了鼠标跟随效果后，<strong>清空</strong> <strong>timer</strong> <strong>节流阀</strong>，方便下次开启延时器</li><li>执行事件的时候判断<strong>节流阀</strong>是否为空，如果不为空，则证明距离上次执行间隔不足16毫秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> angel = $(<span class="string">&#x27;#angel&#x27;</span>)</span><br><span class="line">     <span class="keyword">var</span> timer = <span class="literal">null</span> <span class="comment">// 1.预定义一个 timer 节流阀</span></span><br><span class="line">     $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (timer) &#123; <span class="keyword">return</span> &#125; <span class="comment">// 3.判断节流阀是否为空，如果不为空，则证明距离上次执行间隔不足16毫秒</span></span><br><span class="line">     timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     $(angel).<span class="title function_">css</span>(<span class="string">&#x27;left&#x27;</span>, e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>, e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line">     timer = <span class="literal">null</span> <span class="comment">// 2.当设置了鼠标跟随效果后，清空 timer 节流阀，方便下次开启延时器</span></span><br><span class="line">     &#125;, <span class="number">16</span>)</span><br><span class="line">     &#125;)        <span class="comment">//1.事件外 定义一个 flag =null  2.在事件里判断为空就执行 不为空(事件还没有执行完) 就返回 </span></span><br><span class="line">&#125;)             <span class="comment">// 3.事件执行完改为flag=null,事件没有执行完flag一直不为空</span></span><br></pre></td></tr></table></figure><h2 id="总结防抖和节流的区别"><a href="#总结防抖和节流的区别" class="headerlink" title="总结防抖和节流的区别"></a>总结防抖和节流的区别</h2><ul><li><p><strong>防抖</strong>：如果事件被频繁触发，防抖能保证只有最后一次触发生效！前面 N 多次的触发都会被忽略！</p></li><li><p><strong>节流</strong>：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;能够知道什么是同源策略和跨域&lt;/li&gt;
&lt;li&gt;能够知道什么是&lt;code&gt;JSONP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;能够说出&lt;code&gt;JSONP&lt;/code&gt;的实现原理&lt;/li&gt;
&lt;li&gt;能够知道防抖和节流的概念&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="ajax-04" scheme="http://example.com/tags/ajax-04/"/>
    
  </entry>
  
  <entry>
    <title>ajax03</title>
    <link href="http://example.com/2022/05/26/14-ajax-03/"/>
    <id>http://example.com/2022/05/26/14-ajax-03/</id>
    <published>2022-05-26T11:41:39.353Z</published>
    <updated>2022-05-26T11:52:54.634Z</updated>
    
    <content type="html"><![CDATA[<ul><li>能够知道如何使用<code>XMLHttpRequest</code>发起<code>Ajax</code>请求</li><li>能够知道如何封装自己的Ajax函数</li><li>能够使用<code>XMLHttpRequest</code> <code>Level2</code>中提供的新特性</li><li>能够知道<code>jQuery</code>中如何实现文件上传与loading效果</li><li>能够知道如何使用<code>axios</code>发起Ajax请求<span id="more"></span><h1 id="XMLHttpRequest的基本使用"><a href="#XMLHttpRequest的基本使用" class="headerlink" title="XMLHttpRequest的基本使用"></a><code>XMLHttpRequest</code>的基本使用</h1></li></ul><h2 id="什么XMLHttpRequest"><a href="#什么XMLHttpRequest" class="headerlink" title="什么XMLHttpRequest"></a>什么<code>XMLHttpRequest</code></h2><p><code>XMLHttpRequest</code>（简称 <code>xhr</code>）是浏览器提供的 <code>Javascript</code> 对象，通过它，可以<strong>请求服务器上的数据资源</strong>。之</p><p>前所学的 <code>jQuery</code> 中的 Ajax 函数，就是基于 <code>xhr</code> 对象封装出来的</p><p><img src="https://s2.loli.net/2022/05/26/Kgmt9uYqrBJRn1s.png"></p><h2 id="使用xhr发起GET请求（⭐⭐⭐）"><a href="#使用xhr发起GET请求（⭐⭐⭐）" class="headerlink" title="使用xhr发起GET请求（⭐⭐⭐）"></a>使用<code>xhr</code>发起GET请求（⭐⭐⭐）</h2><p><strong>步骤</strong></p><ul><li>创建 <code>xhr</code> 对象</li><li>调用 <code>xhr.open()</code> 函数</li><li>调用 <code>xhr.send()</code> 函数</li><li>监听 <code>xhr.onreadystatechange</code> 事件</li><li>调用执行send()函数 才会发起请求</li><li>:beetle:  创建=&gt;调用=&gt;监听</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 XHR 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2. 调用 open 函数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 调用 send 函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">// 4. 监听 onreadystatechange 事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">     <span class="comment">// 获取服务器响应的数据</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="了解xhr对象的readyState属性"><a href="#了解xhr对象的readyState属性" class="headerlink" title="了解xhr对象的readyState属性"></a>了解<code>xhr</code>对象的<code>readyState</code>属性</h3><p><code>XMLHttpRequest</code> 对象的 <code>readyState</code> 属性，用来表示<strong>当前 <code>Ajax</code> 请求所处的状态</strong>。每个 <code>Ajax</code> 请求必然处于以</p><p>下状态中的一个：</p><p><img src="https://s2.loli.net/2022/05/26/eItd5ZPwHmhWLyn.png"></p><h3 id="使用xhr发起带参数的GET请求"><a href="#使用xhr发起带参数的GET请求" class="headerlink" title="使用xhr发起带参数的GET请求"></a>使用<code>xhr</code>发起带参数的GET请求</h3><p>使用 <code>xhr</code> 对象发起带参数的 <code>GET</code> 请求时，只需在调用 <code>xhr.open</code> 期间，为 <code>URL</code> 地址指定参数即可：</p><p><img src="https://s2.loli.net/2022/05/26/gvDK9XHMrY8RJwA.png"></p><p>这种在 URL 地址后面拼接的参数，叫做<strong>查询字符串</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks?id=1&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><h4 id="什么是查询字符串"><a href="#什么是查询字符串" class="headerlink" title="什么是查询字符串"></a>什么是查询字符串</h4><p><strong>定义：</strong>查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）。</p><p><strong>格式：</strong>将英文的 <strong>?</strong> 放在<code>URL</code> 的末尾，然后再加上 <strong>参数＝值</strong> ，想加上多个参数的话，使用 <strong>&amp;</strong> 符号进行分隔。以</p><p>这个形式，可以将想要发送给服务器的数据添加到 <code>URL</code> 中。</p><p><img src="https://s2.loli.net/2022/05/26/no9EKiOMgaGzuFA.png"></p><h4 id="GET请求携带参数的本质"><a href="#GET请求携带参数的本质" class="headerlink" title="GET请求携带参数的本质"></a>GET请求携带参数的本质</h4><p>无论使用 <code>$.ajax()</code>，还是使用 <code>$.get()</code>，又或者直接使用 <code>xhr</code> 对象发起 <code>GET</code> 请求，当需要携带参数的时候，本质上，都是直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的。</p><p><img src="https://s2.loli.net/2022/05/26/FOgTQPcnpU3HosK.png"></p><h2 id="URL编码与解码"><a href="#URL编码与解码" class="headerlink" title="URL编码与解码"></a>URL编码与解码</h2><h3 id="什么是URL编码"><a href="#什么是URL编码" class="headerlink" title="什么是URL编码"></a>什么是URL编码</h3><p><code>URL</code> 地址中，只允许出现英文相关的字母、标点符号、数字，因此，在 <code>URL</code> 地址中不允许出现中文字符。</p><p>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行<strong>编码</strong>（转义）。</p><p><strong>URL编码的原则</strong>：使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p><p>URL编码原则的通俗理解：使用英文字符去表示非英文字符</p><p><img src="https://s2.loli.net/2022/05/26/7PZ1mYLA2QNbwIX.png"></p><h3 id="如何对URL进行编码与解码"><a href="#如何对URL进行编码与解码" class="headerlink" title="如何对URL进行编码与解码"></a>如何对URL进行编码与解码</h3><p>浏览器提供了 <code>URL</code> 编码与解码的 <code>API</code>，分别是：</p><ul><li><p> <code>encodeURI()</code> 编码的函数</p></li><li><p> <code>decodeURI()</code> 解码的函数</p></li></ul><p><img src="https://s2.loli.net/2022/05/26/daAhcJGLwkSyxT5.png"></p><p><strong>由于浏览器会自动对 URL 地址进行编码操作，因此，大多数情况下，程序员不需要关心 URL 地址的编码</strong></p><p><strong>与解码操作</strong></p><p>更多关于 URL 编码的知识，请参考如下博客：</p><p><a href="https://blog.csdn.net/Lxd_0111/article/details/78028889">https://blog.csdn.net/Lxd_0111/article/details/78028889</a></p><h2 id="使用xhr发起POST请求（⭐⭐⭐）"><a href="#使用xhr发起POST请求（⭐⭐⭐）" class="headerlink" title="使用xhr发起POST请求（⭐⭐⭐）"></a>使用<code>xhr</code>发起<code>POST</code>请求（⭐⭐⭐）</h2><p><strong>步骤</strong></p><ul><li><p>创建 <code>xhr</code> 对象</p></li><li><p>调用 <code>xhr.open()</code> 函数</p></li><li><p><strong>设置 Content-Type 属性</strong>（固定写法）</p></li><li><p>调用 <code>xhr.send()</code> 函数，<strong>同时指定要发送的数据</strong></p></li><li><p>监听 <code>xhr.onreadystatechange</code> 事件</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 xhr 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2. 调用 open 函数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 设置 Content-Type 属性（固定写法）</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"><span class="comment">// 4. 调用 send 函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=水浒传&amp;author=施耐庵&amp;publisher=上海图书出版社&#x27;</span>)</span><br><span class="line"><span class="comment">// 5. 监听事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h1><h2 id="什么是数据交换格式"><a href="#什么是数据交换格式" class="headerlink" title="什么是数据交换格式"></a>什么是数据交换格式</h2><p>数据交换格式，就是<strong>服务器端</strong>与<strong>客户端</strong>之间进行<strong>数据传输与交换的格式</strong></p><p>前端领域，经常提及的两种数据交换格式分别是 <code>XML</code> 和 <code>JSON</code>。其中 <code>XML</code> 用的非常少，所以，我们重点要学</p><p>习的数据交换格式就是 <code>JSON</code></p><p><img src="https://s2.loli.net/2022/05/26/51vMNPxOtmzS2G7.png"></p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h3><p><code>XML</code> 的英文全称是 <code>EXtensible Markup Language</code>，即<strong>可扩展标记语言</strong>。因此，<code>XML</code> 和 <code>HTML</code> 类似，</p><p>也是一种标记语言。</p><p><img src="https://s2.loli.net/2022/05/26/uTikFdKw1rflp8j.png"></p><h3 id="XML和HTML的区别"><a href="#XML和HTML的区别" class="headerlink" title="XML和HTML的区别"></a>XML和HTML的区别</h3><p><code>XML</code> 和 <code>HTML</code> 虽然都是标记语言，但是，它们两者之间没有任何的关系。</p><ul><li><p><code>HTML</code> 被设计用来描述网页上的<strong>内容</strong>，是网页内容的载体</p></li><li><p><code>XML</code> 被设计用来<strong>传输和存储数据</strong>，是数据的载体</p></li></ul><p><img src="https://s2.loli.net/2022/05/26/JbgCOAjZBRSdYzu.png"></p><h3 id="XML的缺点"><a href="#XML的缺点" class="headerlink" title="XML的缺点"></a>XML的缺点</h3><p><img src="https://s2.loli.net/2022/05/26/XQISpmFuAYw8Gbn.png"></p><ul><li><p> <code>XML</code> 格式臃肿，和数据无关的代码多，体积大，传输效率低</p></li><li><p> 在 <code>Javascript</code> 中解析 <code>XML</code> 比较麻烦</p></li></ul><h2 id="JSON（⭐⭐⭐）"><a href="#JSON（⭐⭐⭐）" class="headerlink" title="JSON（⭐⭐⭐）"></a><code>JSON（⭐⭐⭐）</code></h2><h3 id="什么是JSON"><a href="#什么是JSON" class="headerlink" title="什么是JSON"></a>什么是<code>JSON</code></h3><p><strong>概念：</strong><code>JSON</code> 的英文全称是 <code>JavaScript Object Notation</code>，即“<strong>JavaScript 对象表示法</strong>”。简单来讲，</p><p><code>JSON</code> 就是 <code>Javascript</code> 对象和数组的字符串表示法，它使用文本表示一个 <code>JS</code> 对象或数组的信息，因此，</p><p><strong><code>JSON</code> 的本质是字符串</strong>。</p><p><strong>作用：</strong><code>JSON</code> 是一种轻量级的文本数据交换格式，在作用上类似于 <code>XML</code>，专门用于存储和传输数据，但</p><p>是 <code>JSON</code> 比 <code>XML</code> 更小、更快、更易解析。</p><p><strong>现状：</strong><code>JSON</code> 是在 2001 年开始被推广和使用的数据格式，到现今为止，<code>JSON</code> 已经成为了主流的数据交</p><p>换格式</p><h3 id="JSON的两种结构"><a href="#JSON的两种结构" class="headerlink" title="JSON的两种结构"></a><code>JSON</code>的两种结构</h3><p><code>JSON</code> 就是用字符串来表示 <code>Javascript</code> 的对象和数组。所以，<code>JSON</code> 中包含<strong>对象</strong>和<strong>数组</strong>两种结构，通过这</p><p>两种结构的相互嵌套，可以表示各种复杂的数据结构。</p><h4 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a><strong>对象结构</strong></h4><p>对象结构在 <code>JSON</code> 中表示为 <code>&#123; &#125;</code> 括起来的内容。数据结构为 <code>&#123; key: value, key: value, … &#125;</code> 的键</p><p>值对结构。其中，<code>key</code> 必须是使用英文的双引号包裹的字符串，<code>value</code> 的数据类型可以是<strong>数字、字符串、</strong></p><p><strong>布尔值、null、数组、对象</strong>6种类型。</p><p><img src="https://s2.loli.net/2022/05/26/PtJgqmon8SQ5dBY.png"></p><h4 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a><strong>数组结构</strong></h4><p>数组结构在 <code>JSON</code> 中表示为 <code>[ ]</code> 括起来的内容。数据结构为 <code>[ &quot;java&quot;, &quot;javascript&quot;, 30, true … ]</code> 。</p><p>数组中数据的类型可以是<strong>数字、字符串、布尔值、null、数组、对象</strong>6种类型。</p><p><img src="https://s2.loli.net/2022/05/26/FVQbzBdiXISEmoH.png"></p><h3 id="JSON语法注意事项"><a href="#JSON语法注意事项" class="headerlink" title="JSON语法注意事项"></a><code>JSON</code>语法注意事项</h3><p>① 属性名必须使用双引号包裹</p><p>② 字符串类型的值必须使用双引号包裹</p><p>③ <code>JSON</code> 中不允许使用单引号表示字符串</p><p>④ <code>JSON</code> 中不能写注释</p><p>⑤ <code>JSON</code> 的最外层必须是对象或数组格式</p><p>⑥ 不能使用 <code>undefined</code> 或函数作为 <code>JSON</code> 的值</p><p><strong><code>JSON</code> 的作用：</strong>在计算机与网络之间存储和传输数据。</p><p><strong><code>JSON</code> 的本质：</strong>用字符串来表示 <code>Javascript</code> 对象数据或数组数据</p><h3 id="JSON和JS对象的关系"><a href="#JSON和JS对象的关系" class="headerlink" title="JSON和JS对象的关系"></a><code>JSON</code>和<code>JS</code>对象的关系</h3><p><code>JSON</code> 是 <code>JS</code> 对象的字符串表示法，它使用文本表示一个 <code>JS</code> 对象的信息，本质是一个字符串。例如：</p><p><img src="https://s2.loli.net/2022/05/26/FwRoO8mLlPHekBj.png"></p><h3 id="JSON和JS对象的互转"><a href="#JSON和JS对象的互转" class="headerlink" title="JSON和JS对象的互转"></a><code>JSON</code>和<code>JS</code>对象的互转</h3><p>要实现从 <code>JSON</code> 字符串转换为 <code>JS</code> 对象，使用 <code>JSON.parse()</code> 方法：  parse =&gt; 解析<img src="https://s2.loli.net/2022/05/26/WuhcViNDmv1FyqM.png"></p><p>要实现从 <code>JS</code> 对象转换为 <code>JSON</code> 字符串，使用 <code>JSON.stringify()</code> 方法：    stringify=&gt;  字符串化</p><p><img src="https://s2.loli.net/2022/05/26/ZbnBSVRJvdqiwzX.png"></p><p><strong>应用场景</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> xhr.<span class="property">responseText</span>)</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>把<strong>数据对象</strong> <strong>转换为</strong> <strong>字符串</strong>的过程，叫做<strong>序列化</strong>，例如：调用 <code>JSON.stringify()</code> 函数的操作，叫做 <code>JSON</code> 序列化。</p><p>把<strong>字符串</strong> <strong>转换为</strong> <strong>数据对象</strong>的过程，叫做<strong>反序列化</strong>，例如：调用 <code>JSON.parse()</code> 函数的操作，叫做 <code>JSON</code> 反序列化。</p><h1 id="封装自己的Ajax函数（⭐⭐⭐）"><a href="#封装自己的Ajax函数（⭐⭐⭐）" class="headerlink" title="封装自己的Ajax函数（⭐⭐⭐）"></a>封装自己的Ajax函数（⭐⭐⭐）</h1><h2 id="要实现的效果"><a href="#要实现的效果" class="headerlink" title="要实现的效果"></a>要实现的效果</h2><p><img src="https://s2.loli.net/2022/05/26/9evAhSNm2taHpri.png"></p><h2 id="定义options参数选项"><a href="#定义options参数选项" class="headerlink" title="定义options参数选项"></a>定义options参数选项</h2><p><code>itheima()</code> 函数是我们自定义的 <code>Ajax</code> 函数，它接收一个配置对象作为参数，配置对象中可以配置如下属性：</p><ul><li><p><code>method</code> 请求的类型</p></li><li><p><code>url</code> 请求的 <code>URL</code> 地址</p></li><li><p><code>data</code> 请求携带的数据</p></li><li><p><code>success</code> 请求成功之后的回调函数</p></li></ul><h2 id="处理data参数"><a href="#处理data参数" class="headerlink" title="处理data参数"></a>处理data参数</h2><p>需要把 <code>data</code> 对象，转化成查询字符串的格式，从而提交给服务器，因此提前定义 <code>resolveData</code> 函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 处理 data 参数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">data</span>&#125; 需要发送到服务器的数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125; 返回拼接好的查询字符串 name=zs&amp;age=10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = k + <span class="string">&#x27;=&#x27;</span> + data[k]</span><br><span class="line">    arr.<span class="title function_">push</span>(str)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)  <span class="comment">//  将数组元素转换为字符串：</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义itheima函数"><a href="#定义itheima函数" class="headerlink" title="定义itheima函数"></a>定义<code>itheima</code>函数</h2><p>在 <code>itheima()</code> 函数中，需要创建 <code>xhr</code> 对象，并监听 <code>onreadystatechange</code> 事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">itheima</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把外界传递过来的参数对象，转换为 查询字符串</span></span><br><span class="line">  <span class="keyword">var</span> qs = <span class="title function_">resolveData</span>(options.<span class="property">data</span>)</span><br><span class="line">  <span class="comment">// 注册监听</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 注册监听</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 把服务器的json字符串转成js对象</span></span><br><span class="line">      <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">      options.<span class="title function_">success</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断请求的类型"><a href="#判断请求的类型" class="headerlink" title="判断请求的类型"></a>判断请求的类型</h2><p>不同的请求类型，对应 <code>xhr</code> 对象的不同操作，因此需要对请求类型进行 <code>if … else …</code> 的判断：</p><p>get 传参数是通过在url后面加查询字符串.</p><p>post  传参是将参数放在 send()  函数里面.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 发起GET请求</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(options.<span class="property">method</span>, options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + qs)</span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">method</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 发起POST请求</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(options.<span class="property">method</span>, options.<span class="property">url</span>)</span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">  xhr.<span class="title function_">send</span>(qs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a><code>XMLHttpRequest Level2</code>的新特性</h1><h2 id="旧版XMLHttpRequest的缺点"><a href="#旧版XMLHttpRequest的缺点" class="headerlink" title="旧版XMLHttpRequest的缺点"></a>旧版<code>XMLHttpRequest</code>的缺点</h2><ul><li><p>只支持文本数据的传输，无法用来读取和上传文件</p></li><li><p>传送和接收数据时，没有进度信息，只能提示有没有完成</p></li></ul><h2 id="XMLHttpRequest-Level2的新功能"><a href="#XMLHttpRequest-Level2的新功能" class="headerlink" title="XMLHttpRequest Level2的新功能"></a><code>XMLHttpRequest Level2</code>的新功能</h2><ul><li><p>可以设置 HTTP 请求的时限</p></li><li><p>可以使用 <code>FormData</code> 对象管理表单数据</p></li><li><p>可以上传文件</p></li><li><p>可以获得数据传输的进度信息</p></li></ul><h2 id="设置HTTP请求时限"><a href="#设置HTTP请求时限" class="headerlink" title="设置HTTP请求时限"></a>设置<code>HTTP</code>请求时限</h2><p>有时，<code>Ajax</code> 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 <code>XMLHttpRequest</code> 对象，增加了 <code>timeout</code> 属性，可以设置 <code>HTTP</code> 请求的时限：</p><p>:wave: xhr.timeout  、 xhr.ontimeout 放在xhr.send()之前</p><p><img src="https://s2.loli.net/2022/05/26/o7B6QlPHgteM2dk.png"></p><p>上面的语句，将最长等待时间设为 3000 毫秒。过了这个时限，就自动停止HTTP请求。与之配套的还有一个</p><p><code>timeout</code> 事件，用来指定回调函数：</p><p><img src="https://s2.loli.net/2022/05/26/yjhSmzMEJHZ7wWf.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  <span class="comment">// 设置 超时时间</span></span><br><span class="line">  xhr.<span class="property">timeout</span> = <span class="number">30</span></span><br><span class="line">  <span class="comment">// 设置超时以后的处理函数</span></span><br><span class="line">  xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时了！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="FormData对象-管理表单数据"><a href="#FormData对象-管理表单数据" class="headerlink" title="FormData对象   管理表单数据"></a><code>FormData</code>对象   管理表单数据</h2><p>Ajax 操作往往用来提交表单数据。为了方便表单处理，<code>HTML5</code> 新增了一个 <code>FormData</code> 对象，<font style="color:red">可以模拟表单操作：</font></p><p>理解：1. new 一个FormData() 实例 </p><p>​            2 .向实例里面添加数据</p><p>​            3 . 把这个实例对象放到xhr.send()里面提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 新建 FormData 对象</span></span><br><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 2. 为 FormData 添加表单项</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zs&#x27;</span>)   <span class="comment">// .append()给对象里面添加属性</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;upwd&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 创建 XHR 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 4. 指定请求类型与URL地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)</span><br><span class="line"><span class="comment">// 5. 直接提交 FormData 对象，这与提交网页表单的效果，完全一样</span></span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br></pre></td></tr></table></figure><h2 id="FormData对象-管理表单数据-1"><a href="#FormData对象-管理表单数据-1" class="headerlink" title="FormData对象    管理表单数据"></a><code>FormData</code>对象    管理表单数据</h2><p><code>FormData</code>对象也可以用来获取网页表单的值，示例代码如下：</p><p>理解：1：直接通过id获取整个form表单元素</p><p>​            2：用 form 表单  new一个 FormData 对象，会自动将表单数据填充到 FormData 对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取表单元素</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#form1&#x27;</span>)</span><br><span class="line"><span class="comment">// 监听表单元素的 submit 事件</span></span><br><span class="line">form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"> e.<span class="title function_">preventDefault</span>()</span><br><span class="line"> <span class="comment">// 根据 form 表单创建 FormData 对象，会自动将表单数据填充到 FormData 对象中</span></span><br><span class="line"> <span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"> xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>)</span><br><span class="line"> xhr.<span class="title function_">send</span>(fd)</span><br><span class="line"> xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>新版 <code>XMLHttpRequest</code> 对象，不仅可以发送文本信息，还可以上传文件。</p><p><strong>实现步骤：</strong></p><p>① 定义 <code>UI</code> 结构</p><p>② 验证是否选择了文件</p><p>③ 向 <code>FormData</code> 中追加文件</p><p>④ 使用 <code>xhr</code> 发起上传文件的请求</p><p>⑤ 监听 <code>onreadystatechange</code> 事件</p><h3 id="定义UI结构"><a href="#定义UI结构" class="headerlink" title="定义UI结构"></a>定义<code>UI</code>结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 上传按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3. 显示上传到服务器上的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="验证是否选择了文件"><a href="#验证是否选择了文件" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取上传文件的按钮</span></span><br><span class="line"><span class="keyword">var</span> btnUpload = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnUpload&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 为按钮添加 click 事件监听</span></span><br><span class="line">btnUpload.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 3. 获取到选择的文件列表</span></span><br><span class="line"> <span class="keyword">var</span> files = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#file1&#x27;</span>).<span class="property">files</span></span><br><span class="line"> <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择要上传的文件！&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// ...后续业务逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="向FormData中追加文件"><a href="#向FormData中追加文件" class="headerlink" title="向FormData中追加文件"></a>向<code>FormData</code>中追加文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 FormData 对象</span></span><br><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"><span class="comment">// 2. 向 FormData 中追加文件</span></span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="使用-xhr-发起上传文件的请求"><a href="#使用-xhr-发起上传文件的请求" class="headerlink" title="使用 xhr 发起上传文件的请求"></a>使用 <code>xhr</code> 发起上传文件的请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 xhr 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2. 调用 open 函数，指定请求类型与URL地址。其中，请求类型必须为 POST</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 发起请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(fd)</span><br></pre></td></tr></table></figure><h3 id="监听onreadystatechange事件"><a href="#监听onreadystatechange事件" class="headerlink" title="监听onreadystatechange事件"></a>监听<code>onreadystatechange</code>事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">     <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="number">200</span>) &#123; <span class="comment">// 上传文件成功</span></span><br><span class="line">     <span class="comment">// 将服务器返回的图片地址，设置为 &lt;img&gt; 标签的 src 属性</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#img&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + data.<span class="property">url</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123; <span class="comment">// 上传文件失败</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">message</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示文件上传进度"><a href="#显示文件上传进度" class="headerlink" title="显示文件上传进度"></a>显示文件上传进度</h3><h4 id="计算文件上传进度"><a href="#计算文件上传进度" class="headerlink" title="计算文件上传进度"></a>计算文件上传进度</h4><p>::smile:进度条代码放在 函数调用xhr.post  xhr.send()之前</p><p>新版本的 <code>XMLHttpRequest</code> 对象中，可以通过监听 <code>xhr.upload.onprogress</code> 事件，来获取到文件的上传进度。语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 XHR 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 监听 xhr.upload 的 onprogress 事件</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="comment">// e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度</span></span><br><span class="line">     <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">         <span class="comment">// e.loaded 已传输的字节</span></span><br><span class="line">         <span class="comment">// e.total 需传输的总字节</span></span><br><span class="line">         <span class="keyword">var</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="导入需要的库"><a href="#导入需要的库" class="headerlink" title="导入需要的库"></a>导入需要的库</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于Bootstrap渲染进度条"><a href="#基于Bootstrap渲染进度条" class="headerlink" title="基于Bootstrap渲染进度条"></a>基于<code>Bootstrap</code>渲染进度条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 进度条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; margin: 10px 0;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-info progress-barstriped active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%&quot;</span>&gt;</span></span><br><span class="line">    0%</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态设置到进度条上"><a href="#动态设置到进度条上" class="headerlink" title="动态设置到进度条上"></a>动态设置到进度条上</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">         <span class="comment">// 1. 计算出当前上传进度的百分比</span></span><br><span class="line">         <span class="keyword">var</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">         $(<span class="string">&#x27;#percent&#x27;</span>)</span><br><span class="line">         <span class="comment">// 2. 设置进度条的宽度</span></span><br><span class="line">         .<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;width:&#x27;</span> + percentComplete + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">         <span class="comment">// 3. 显示当前的上传进度百分比</span></span><br><span class="line">         .<span class="title function_">html</span>(percentComplete + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听上传完成的事件"><a href="#监听上传完成的事件" class="headerlink" title="监听上传完成的事件"></a>监听上传完成的事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     $(<span class="string">&#x27;#percent&#x27;</span>)</span><br><span class="line">     <span class="comment">// 移除上传中的类样式</span></span><br><span class="line">     .<span class="title function_">removeClass</span>()</span><br><span class="line">     <span class="comment">// 添加上传完成的类样式</span></span><br><span class="line">     .<span class="title function_">addClass</span>(<span class="string">&#x27;progress-bar progress-bar-success&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jQuery高级用法-jQuery实现文件上传（⭐⭐⭐）"><a href="#jQuery高级用法-jQuery实现文件上传（⭐⭐⭐）" class="headerlink" title="jQuery高级用法- jQuery实现文件上传（⭐⭐⭐）"></a><code>jQuery</code>高级用法- <code>jQuery</code>实现文件上传（⭐⭐⭐）</h1><h2 id="定义UI结构-1"><a href="#定义UI结构-1" class="headerlink" title="定义UI结构"></a>定义<code>UI</code>结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnUpload&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="验证是否选择了文件-1"><a href="#验证是否选择了文件-1" class="headerlink" title="验证是否选择了文件"></a>验证是否选择了文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnUpload&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 1. 将 jQuery 对象转化为 DOM 对象，并获取选中的文件列表</span></span><br><span class="line">     <span class="keyword">var</span> files = $(<span class="string">&#x27;#file1&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span></span><br><span class="line">     <span class="comment">// 2. 判断是否选择了文件</span></span><br><span class="line">     <span class="keyword">if</span> (files.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请选择图片后再上传！‘)</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="向FormData中追加文件-1"><a href="#向FormData中追加文件-1" class="headerlink" title="向FormData中追加文件"></a>向<code>FormData</code>中追加文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 FormData 中追加文件</span></span><br><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">fd.<span class="title function_">append</span>(<span class="string">&#x27;avatar&#x27;</span>, files[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="使用jQuery发起上传文件的请求"><a href="#使用jQuery发起上传文件的请求" class="headerlink" title="使用jQuery发起上传文件的请求"></a>使用<code>jQuery</code>发起上传文件的请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: fd,</span><br><span class="line">     <span class="comment">// 不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值</span></span><br><span class="line">     <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">     <span class="comment">// 不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器</span></span><br><span class="line">     <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="jQuery实现loading效果"><a href="#jQuery实现loading效果" class="headerlink" title="jQuery实现loading效果"></a><code>jQuery</code>实现<code>loading</code>效果</h2><h3 id="ajaxStart-callback"><a href="#ajaxStart-callback" class="headerlink" title="ajaxStart(callback)"></a><code>ajaxStart(callback)</code></h3><p><code>Ajax</code> 请求<strong>开始</strong>时，执行 <code>ajaxStart</code> 函数。可以在 <code>ajaxStart</code> 的 <code>callback</code> 中显示 <code>loading</code> 效果，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStart</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">show</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <code>$(document).ajaxStart()</code> 函数<strong>会监听当前文档内所有的 Ajax 请求</strong>。</p><h3 id="ajaxStop-callback"><a href="#ajaxStop-callback" class="headerlink" title="ajaxStop(callback)"></a><code>ajaxStop(callback)</code></h3><p><code>Ajax</code> 请求<strong>结束</strong>时，执行 <code>ajaxStop</code> 函数。可以在 <code>ajaxStop</code> 的 <code>callback</code> 中隐藏 <code>loading</code> 效果，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自 jQuery 版本 1.8 起，该方法只能被附加到文档</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ajaxStop</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#loading&#x27;</span>).<span class="title function_">hide</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="axios（⭐⭐⭐）"><a href="#axios（⭐⭐⭐）" class="headerlink" title="axios（⭐⭐⭐）"></a><code>axios（⭐⭐⭐）</code></h1><h2 id="什么是axios"><a href="#什么是axios" class="headerlink" title="什么是axios"></a>什么是<code>axios</code></h2><p><code>Axios</code> 是专注于    **网络数据请求 **   的库。</p><p>相比于原生的 <code>XMLHttpRequest</code> 对象，<code>axios</code> <strong>简单易用</strong>。</p><p>相比于 <code>jQuery</code>，<code>axios</code> 更加<strong>轻量化</strong>，只专注于网络数据请求。</p><h2 id="axios发起GET请求"><a href="#axios发起GET请求" class="headerlink" title="axios发起GET请求"></a><code>axios</code>发起GET请求</h2><p><code>axios</code> 发起 <code>get</code> 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="comment">/*参数*/</span> &#125; &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p><strong>具体的请求示例如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的 URL 地址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line"><span class="comment">// 请求的参数对象</span></span><br><span class="line"><span class="keyword">var</span> paramsObj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="comment">// 调用 axios.get() 发起 GET 请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(url, &#123; <span class="attr">params</span>: paramsObj &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// res.data 是服务器返回的数据</span></span><br><span class="line">     <span class="keyword">var</span> result = res.<span class="property">data</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios发起POST请求"><a href="#axios发起POST请求" class="headerlink" title="axios发起POST请求"></a><code>axios</code>发起<code>POST</code>请求</h2><p><code>axios</code> 发起 <code>post</code> 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="comment">/*参数*/</span> &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p><strong>具体的请求示例如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的 URL 地址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span></span><br><span class="line"><span class="comment">// 要提交到服务器的数据</span></span><br><span class="line"><span class="keyword">var</span> dataObj = &#123; <span class="attr">location</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;顺义&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 调用 axios.post() 发起 POST 请求</span></span><br><span class="line">axios.<span class="title function_">post</span>(url, dataObj).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// res.data 是服务器返回的数据</span></span><br><span class="line">     <span class="keyword">var</span> result = res.<span class="property">data</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="直接使用axios发起请求"><a href="#直接使用axios发起请求" class="headerlink" title="直接使用axios发起请求"></a>直接使用<code>axios</code>发起请求</h2><p><code>axios</code> 也提供了类似于 <code>jQuery</code> 中 <code>$.ajax()</code> 的函数，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"> <span class="attr">method</span>: <span class="string">&#x27;请求类型&#x27;</span>,</span><br><span class="line"> <span class="attr">url</span>: <span class="string">&#x27;请求的URL地址&#x27;</span>,</span><br><span class="line"> <span class="attr">data</span>: &#123; <span class="comment">/* POST数据 */</span> &#125;,</span><br><span class="line"> <span class="attr">params</span>: &#123; <span class="comment">/* GET参数 */</span> &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p><strong>发起get请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn3&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line">      <span class="keyword">var</span> paramsData = &#123; <span class="attr">name</span>: <span class="string">&#x27;钢铁侠&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">      <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">params</span>: paramsData</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>发起post请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn4&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;娃哈哈&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;能够知道如何使用&lt;code&gt;XMLHttpRequest&lt;/code&gt;发起&lt;code&gt;Ajax&lt;/code&gt;请求&lt;/li&gt;
&lt;li&gt;能够知道如何封装自己的Ajax函数&lt;/li&gt;
&lt;li&gt;能够使用&lt;code&gt;XMLHttpRequest&lt;/code&gt; &lt;code&gt;Level2&lt;/code&gt;中提供的新特性&lt;/li&gt;
&lt;li&gt;能够知道&lt;code&gt;jQuery&lt;/code&gt;中如何实现文件上传与loading效果&lt;/li&gt;
&lt;li&gt;能够知道如何使用&lt;code&gt;axios&lt;/code&gt;发起Ajax请求&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="ajax03" scheme="http://example.com/tags/ajax03/"/>
    
  </entry>
  
  <entry>
    <title>js基础6</title>
    <link href="http://example.com/2022/05/25/13-%E5%9F%BA%E7%A1%806/"/>
    <id>http://example.com/2022/05/25/13-%E5%9F%BA%E7%A1%806/</id>
    <published>2022-05-25T01:43:09.538Z</published>
    <updated>2022-05-25T01:48:03.809Z</updated>
    
    <content type="html"><![CDATA[<h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><blockquote><p>能够说出什么是内置对象</p><p>能够根据文档查询指定API的使用方法</p><p>能够使用 Math 对象的常用方法</p></blockquote><span id="more"></span><blockquote><p>能够使用 Date 对象的常用方法</p><p>能够使用 Array 对象的常用方法</p><p>能够使用 String 对象的常用方法</p></blockquote><h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1 - 内置对象"></a>1 - 内置对象</h2><h3 id="1-1-内置对象"><a href="#1-1-内置对象" class="headerlink" title="1.1 内置对象"></a>1.1 内置对象</h3><p>JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong></p><blockquote><p>前面两种对象是JS 基础 内容，属于 ECMAScript； 第三个浏览器对象属于我们JS 独有的， 我们JS API 讲解;</p><p><span style="color:red;"><strong>内置对象</strong></span>就是指 <span style="color:red;"><strong>JS 语言自带的一些对象</strong></span>，这些对象供开<span style="color:red;"><strong>发者使</strong></span>用，并提供了<span style="color:red;"><strong>一些常用</strong></span>的或是<span style="color:red;"><strong>最基本而必要</strong></span>的功能（属性和方法）;</p><p>内置对象最大的优点就是<span style="color:red;"><strong>帮助我们快速开发</strong></span></p><p>JavaScript 提供了多个内置对象：Math、 Date 、Array、String等</p></blockquote><p>通俗理解： 内置对象 就是 js 提前给 我们准备好 工具类</p><h3 id="1-2-查文档"><a href="#1-2-查文档" class="headerlink" title="1.2 查文档"></a>1.2 查文档</h3><p><strong>查找文档</strong>：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过<span style="color:red"><strong>MDN/W3C</strong></span>来查询。</p><p>Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>MDN:   <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p><strong>如何学习对象中的方法</strong></p><blockquote><p>查阅该方法的功能</p><p>查看里面参数的意义和类型</p><p>查看返回值的意义和类型</p><p>通过 demo 进行测试</p></blockquote><h3 id="1-3-Math对象"><a href="#1-3-Math对象" class="headerlink" title="1.3 Math对象"></a>1.3 Math对象</h3><p>Math 对象不是构造函数，<span style="color:red;"><strong>它具有数学常数和函数的属性和方法</strong></span>。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><blockquote><p>注意：上面的方法使用时必须带括号</p></blockquote><p><strong>获取指定范围内的随机整数</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取随机数的方法： Math.random()</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 随机点名  </span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;张三疯子&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;李思思&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="title function_">getRandom</span>(<span class="number">0</span>,arr.<span class="property">length</span> - <span class="number">1</span>)]);</span><br><span class="line"><span class="comment">// 注意数组长度和索引号的区别</span></span><br></pre></td></tr></table></figure><p><strong>案例：猜数字游戏</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 猜数字游戏</span></span><br><span class="line">  <span class="comment">// 1.随机生成一个1~10 的整数  我们需要用到 Math.random() 方法。</span></span><br><span class="line">  <span class="comment">// 2.需要一直猜到正确为止，所以需要一直循环。</span></span><br><span class="line">  <span class="comment">// 3.while 循环更简单</span></span><br><span class="line">  <span class="comment">// 4.核心算法：使用 if  else if 多分支语句来判断大于、小于、等于。</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> random = <span class="title function_">getRandom</span>(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// 死循环</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;你来猜？ 输入1~10之间的一个数字&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (num &gt; random) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你猜大了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; random) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你猜小了&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你好帅哦，猜对了&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">// 退出整个循环结束程序</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要求用户猜 1~50之间的一个数字 但是只有 10次猜的机会</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-日期对象"><a href="#1-4-日期对象" class="headerlink" title="1.4 日期对象"></a>1.4 日期对象</h3><h4 id="1-4-1-Date-对象概述"><a href="#1-4-1-Date-对象概述" class="headerlink" title="1.4.1 Date 对象概述"></a>1.4.1 Date 对象概述</h4><p>Date 对象和 Math 对象不一样，<span style="color:red;"><strong>Date是一个构造函数</strong></span>，所以使用时<span style="color:red">需要new实例化后</span>才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><h4 id="1-4-2-Date实例化日期对象"><a href="#1-4-2-Date实例化日期对象" class="headerlink" title="1.4.2 Date实例化日期对象"></a>1.4.2 Date实例化日期对象</h4><ul><li>获取当前时间必须实例化：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>获取指定时间的日期对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1); <span class="comment">// 返回的是 11月 不是 10月 </span></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-1-1 8:8:8&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date2);</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果创建实例时并未传入参数，则得到的日期对象是<span style="color:red;"><strong>当前时间对应的日期对象</strong></span></p></blockquote><h4 id="1-4-3-使用Date实例的方法和属性"><a href="#1-4-3-使用Date实例的方法和属性" class="headerlink" title="1.4.3 使用Date实例的方法和属性"></a>1.4.3 使用Date实例的方法和属性</h4><p><img src="https://s2.loli.net/2022/05/25/e4lr1IZzYm8VgW5.png" alt="image-20220318165758737"></p><p><strong>实例方法练习</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 获取当前电脑本机的时间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 返回当前日期的年  2022</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">// 月份 返回的月份小1个月   记得月份+1 呦</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 返回的是 几号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>()); <span class="comment">// 3  周一返回的是 1 周六返回的是 6 但是 周日返回的是 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们写一个 2019年 5月 1日 星期三</span></span><br><span class="line"><span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> day = date.<span class="title function_">getDay</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化日期 时分秒</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 时</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 分</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求封装一个函数返回当前的时分秒 格式 08:08:08</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> h = time.<span class="title function_">getHours</span>();</span><br><span class="line">  h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">  <span class="keyword">var</span> m = time.<span class="title function_">getMinutes</span>();</span><br><span class="line">  m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">  <span class="keyword">var</span> s = time.<span class="title function_">getSeconds</span>();</span><br><span class="line">  s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">  <span class="keyword">return</span> h + <span class="string">&#x27;:&#x27;</span> + m + <span class="string">&#x27;:&#x27;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getTimer</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-4-4-通过Date实例获取总毫米数"><a href="#1-4-4-通过Date实例获取总毫米数" class="headerlink" title="1.4.4 通过Date实例获取总毫米数"></a>1.4.4 通过Date实例获取总毫米数</h4><ul><li><p>总毫秒数的含义</p><p>​    基于1970年1月1日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得Date总的毫秒数(时间戳)  不是当前时间的毫秒数 而是距离1970年1月1号过了多少毫秒数</span></span><br><span class="line"><span class="comment">// 1. 通过 valueOf()  getTime()</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>()); <span class="comment">// 就是 我们现在时间 距离1970.1.1 总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="comment">// 2. 简单的写法 (最常用的写法)</span></span><br><span class="line"><span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// +new Date()  返回的就是总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1);</span><br><span class="line"><span class="comment">// 3. H5 新增的 获得总的毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-5-案列-倒计时"><a href="#1-4-5-案列-倒计时" class="headerlink" title="1.4.5 案列 倒计时"></a>1.4.5 案列 倒计时</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 倒计时效果</span></span><br><span class="line"><span class="comment">// 1.核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时 ，但是不能拿着时分秒相减，比如 05 分减去25分，结果会是负数的。</span></span><br><span class="line"><span class="comment">// 2.用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。</span></span><br><span class="line"><span class="comment">// 3.把剩余时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）</span></span><br><span class="line"><span class="comment">// 转换公式如下： </span></span><br><span class="line"><span class="comment">//  d = parseInt(总秒数/ 60/60 /24);    //  计算天数</span></span><br><span class="line"><span class="comment">//  h = parseInt(总秒数/ 60/60 %24)   //   计算小时</span></span><br><span class="line"><span class="comment">//  m = parseInt(总秒数 /60 %60 );     //   计算分数</span></span><br><span class="line"><span class="comment">//  s = parseInt(总秒数%60);            //   计算当前秒数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(time); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span><br><span class="line">  <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 天</span></span><br><span class="line">  d = d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">  <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span><br><span class="line">  h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span><br><span class="line">  m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span><br><span class="line">  s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line">  <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countDown</span>(<span class="string">&#x27;2019-5-1 18:00:00&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="1-5-数组对象"><a href="#1-5-数组对象" class="headerlink" title="1.5 数组对象"></a>1.5 数组对象</h3><h4 id="1-51-创建数组的两种方式"><a href="#1-51-创建数组的两种方式" class="headerlink" title="1.51.创建数组的两种方式"></a>1.51.创建数组的两种方式</h4><ul><li><p>字面量方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="string">&quot;test&quot;</span>,<span class="literal">true</span>];</span><br></pre></td></tr></table></figure></li><li><p>new Array()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var arr1 = new Array();  // 创建了一个空的数组</span></span><br><span class="line"><span class="comment">// var arr1 = new Array(2);  // 这个2 表示 数组的长度为 2  里面有2个空的数组元素 </span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>); <span class="comment">// 等价于 [2,3]  这样写表示 里面有2个数组元素 是 2和3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure><blockquote><p>注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p></blockquote><p>​    参数传递规则如下：</p><ul><li><p>如果只传入<span style="color:red"><strong>一个参数</strong></span>，则参数规定了<strong>数组的长度</strong></p></li><li><p>如果传入了<span style="color:red;"><strong>多个参数</strong></span>，则参数称为<strong>数组的元素</strong></p></li></ul></li></ul><h4 id="1-5-2-检测是否为数组"><a href="#1-5-2-检测是否为数组" class="headerlink" title="1.5.2 检测是否为数组"></a>1.5.2 检测是否为数组</h4><ul><li><p>instanceof 运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// instanceof 可以判断一个对象是否是某个构造函数的实例</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>Array.isArray()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-5-3-添加删除数组元素的方法"><a href="#1-5-3-添加删除数组元素的方法" class="headerlink" title="1.5.3 添加删除数组元素的方法"></a>1.5.3 添加删除数组元素的方法</h4><p>数组中有进行增加、删除元素的方法，部分方法如下表</p><p><img src="https://s2.loli.net/2022/05/25/DxgnGwrYHizkbLc.png"></p><blockquote><p>注意：<span style="color:red;"><strong>push、unshift</strong></span>为增加元素方法；<span style="color:red;"><strong>pop、shift</strong></span>为删除元素的方法</p><p>上述4个方法 都修改了 原数组</p></blockquote><p><strong>筛选数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有一个包含工资的数组[1500, 1200, 2000, 2100, 1800]，要求把数组中工资超过2000的删除，剩余的放到新数组里面</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    <span class="comment">// newArr[newArr.length] = arr[i];</span></span><br><span class="line">    newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h4 id="1-5-4-数组排序"><a href="#1-5-4-数组排序" class="headerlink" title="1.5.4 数组排序"></a>1.5.4 数组排序</h4><p>数组中有对数组本身排序的方法，部分方法如下表</p><p><img src="https://s2.loli.net/2022/05/25/FO1spWPSyl4iuCK.png"></p><p>注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul><blockquote><p>会改变原来的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line"><span class="comment">// 1. 翻转数组 reverse</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数组排序（冒泡排序）</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">13</span>, <span class="number">4</span>, <span class="number">77</span>, <span class="number">1</span>, <span class="number">7</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="comment">//  return a - b; 升序的顺序排列</span></span><br><span class="line">  <span class="keyword">return</span> b - a; <span class="comment">// 降序的顺序排列</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure><h4 id="1-5-5-数组索引方法"><a href="#1-5-5-数组索引方法" class="headerlink" title="1.5.5 数组索引方法"></a>1.5.5 数组索引方法</h4><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="https://s2.loli.net/2022/05/25/dkFRSiABWDLbZKx.png" alt="image-20220320171322129"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回数组元素索引号方法  indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找</span></span><br><span class="line"><span class="comment">// 它只返回第一个满足条件的索引号 </span></span><br><span class="line"><span class="comment">// 它如果在该数组里面找不到元素，则返回的是 -1  </span></span><br><span class="line"><span class="comment">// var arr = [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;];</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;blue&#x27;</span>));</span><br><span class="line"><span class="comment">// 返回数组元素索引号方法  lastIndexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="1-5-6-数组转换为字符串"><a href="#1-5-6-数组转换为字符串" class="headerlink" title="1.5.6 数组转换为字符串"></a>1.5.6 数组转换为字符串</h4><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="https://s2.loli.net/2022/05/25/mqae63YLwGDgMTd.png"></p><p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回数组元素索引号方法  indexOf(数组元素)  作用就是返回该数组元素的索引号 从前面开始查找</span></span><br><span class="line"><span class="comment">// 它只返回第一个满足条件的索引号 </span></span><br><span class="line"><span class="comment">// 它如果在该数组里面找不到元素，则返回的是 -1  </span></span><br><span class="line"><span class="comment">// var arr = [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;];</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;blue&#x27;</span>));</span><br><span class="line"><span class="comment">// 返回数组元素索引号方法  lastIndexOf(数组元素)  作用就是返回该数组元素的索引号 从后面开始查找</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;blue&#x27;</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="1-5-7-数组去重"><a href="#1-5-7-数组去重" class="headerlink" title="1.5.7 数组去重"></a>1.5.7 数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重 [&#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;b&#x27;] 要求去除数组中重复的元素。</span></span><br><span class="line"><span class="comment">// 1.目标： 把旧数组里面不重复的元素选取出来放到新数组中， 重复的元素只保留一个， 放到新数组中去重。</span></span><br><span class="line"><span class="comment">// 2.核心算法： 我们遍历旧数组， 然后拿着旧数组元素去查询新数组， 如果该元素在新数组里面没有出现过， 我们就添加， 否则不添加。</span></span><br><span class="line"><span class="comment">// 3.我们怎么知道该元素没有存在？ 利用 新数组.indexOf(数组元素) 如果返回时 - 1 就说明 新数组里面没有改元素</span></span><br><span class="line"><span class="comment">// 封装一个 去重的函数 unique 独一无二的 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var demo = unique([&#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;b&#x27;])</span></span><br><span class="line"><span class="keyword">var</span> demo = <span class="title function_">unique</span>([<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo);</span><br></pre></td></tr></table></figure><h4 id="1-5-8-数组转换成字符串"><a href="#1-5-8-数组转换成字符串" class="headerlink" title="1.5.8 数组转换成字符串"></a>1.5.8 数组转换成字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 数组转换为字符串 </span></span><br><span class="line">  <span class="comment">// 1. toString() 将我们的数组转换为字符串</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br><span class="line">  <span class="comment">// 2. join(分隔符) </span></span><br><span class="line">  <span class="keyword">var</span> arr1 = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>()); <span class="comment">// green,blue,pink</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// green-blue-pink</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)); <span class="comment">// green&amp;blue&amp;pink</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="1-5-9-其他方法"><a href="#1-5-9-其他方法" class="headerlink" title="1.5.9 其他方法"></a>1.5.9 其他方法</h4><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p><p><img src="https://s2.loli.net/2022/05/25/VXSQzZHTo6aWYG5.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他方法</span></span><br><span class="line"><span class="comment">// 数组连接:concat() 连接多个数组，返回一个新数组</span></span><br><span class="line"><span class="comment">// var arr2 = [&#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;];</span></span><br><span class="line"><span class="comment">// var arr3 = [&#x27;pink1&#x27;]</span></span><br><span class="line"><span class="comment">// var arr4 = arr2.concat(arr3)</span></span><br><span class="line"><span class="comment">// console.log(arr4);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组截取:slice(begin, end) [begin, end) // 返回一个新数组</span></span><br><span class="line"><span class="comment">// var arr5 = arr4.slice(0,2)</span></span><br><span class="line"><span class="comment">// console.log(arr5);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// splice(从第几个开始， 删除几个元素) </span></span><br><span class="line"><span class="comment">// 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>, <span class="string">&#x27;pink11&#x27;</span>, <span class="string">&#x27;pink12&#x27;</span>, [<span class="number">1</span>,<span class="number">2</span>]), <span class="string">&#x27;==&#x27;</span>, arr);</span><br></pre></td></tr></table></figure><h3 id="1-6-字符串对象"><a href="#1-6-字符串对象" class="headerlink" title="1.6 字符串对象"></a>1.6 字符串对象</h3><h4 id="1-6-1-基本包装类型"><a href="#1-6-1-基本包装类型" class="headerlink" title="1.6.1 基本包装类型"></a>1.6.1 基本包装类型</h4><p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p>基本包装类型就是<span style="color:red;"><strong>把简单数据类型包装成为复杂数据类型</strong></span>，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码有什么问题？</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure><p>按道理<span style="color:red;"><strong>基本数据类型是没有属性和方法的</strong></span>，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="1-6-2-字符串的不可变"><a href="#1-6-2-字符串的不可变" class="headerlink" title="1.6.2 字符串的不可变"></a>1.6.2 字符串的不可变</h4><p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。</p><p>由于字符串的不可变，在<span style="color:red"><strong>大量拼接字符串</strong></span>的时候会有效率问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="comment">// 字符串的不可变性</span></span><br><span class="line">     <span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">     str = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">     <span class="comment">// 因为我们字符串的不可变所以不要大量的拼接字符串</span></span><br><span class="line">     <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">         str += i;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="1-6-3-根据字符返回位置"><a href="#1-6-3-根据字符返回位置" class="headerlink" title="1.6.3 根据字符返回位置"></a>1.6.3 根据字符返回位置</h4><p>字符串所有的方法，<span style="color:red;"><strong>都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</strong></span>。</p><p><img src="https://s2.loli.net/2022/05/25/Q7aInCRkl2KmtzN.png" alt="image-20220320184904381"></p><h4 id="1-6-4-案例-练习"><a href="#1-6-4-案例-练习" class="headerlink" title="1.6.4 案例 练习"></a>1.6.4 案例 练习</h4><blockquote><p>案例： 查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><p>思路</p><p>先查找第一个o出现的位置</p><p>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</p><p>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找     </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 查找字符串&quot;abcoefoxyozzopp&quot;中所有o出现的位置以及次数</span></span><br><span class="line">  <span class="comment">// 核心算法：先查找第一个o出现的位置</span></span><br><span class="line">  <span class="comment">// 然后 只要indexOf 返回的结果不是 -1 就继续往后查找</span></span><br><span class="line">  <span class="comment">// 因为indexOf 只能查找到第一个，所以后面的查找，一定是当前索引加1，从而继续查找</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">&quot;oabcoefoxyozzopp&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// console.log(index);</span></span><br><span class="line">  <span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    num++;</span><br><span class="line">    index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>, index + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o出现的次数是: &#x27;</span> + num);</span><br><span class="line">  <span class="comment">// 课后作业 [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;, &#x27;green&#x27;, &#x27;pink&#x27;,&#x27;red&#x27;], 求 red 出现的位置和次数</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="1-6-5-根据位置返回字符"><a href="#1-6-5-根据位置返回字符" class="headerlink" title="1.6.5 根据位置返回字符"></a>1.6.5 根据位置返回字符</h4><p><img src="https://s2.loli.net/2022/05/25/Smh13pNMfvYXunj.png" alt="image-20220320185254873"></p><p>在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p><p><img src="https://s2.loli.net/2022/05/25/uRjYOBlCWc1FdeL.png"></p><h4 id="1-6-6-案例练习"><a href="#1-6-6-案例练习" class="headerlink" title="1.6.6 案例练习"></a>1.6.6 案例练习</h4><p>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><ol><li>核心算法：利用 charAt(） 遍历这个字符串</li><li>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</li><li>遍历对象，得到最大值和该字符 </li></ol><p>  ​注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  判断一个字符串 &#x27;abcoefoxyozzopp&#x27; 中出现次数最多的字符，并统计其次数。</span></span><br><span class="line"><span class="comment">// o.a = 1</span></span><br><span class="line"><span class="comment">// o.b = 1</span></span><br><span class="line"><span class="comment">// o.c = 1</span></span><br><span class="line"><span class="comment">// o.o = 4</span></span><br><span class="line"><span class="comment">// 核心算法：利用 charAt(） 遍历这个字符串</span></span><br><span class="line"><span class="comment">// 把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</span></span><br><span class="line"><span class="comment">// 遍历对象，得到最大值和该字符</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> chars = str.<span class="title function_">charAt</span>(i); <span class="comment">// chars 是 字符串的每一个字符</span></span><br><span class="line">  <span class="keyword">if</span> (o[chars]) &#123; <span class="comment">// o[chars] 得到的是属性值</span></span><br><span class="line">    o[chars]++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    o[chars] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line"><span class="comment">// 2. 遍历对象</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ch = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="comment">// k 得到是 属性名</span></span><br><span class="line">  <span class="comment">// o[k] 得到的是属性值</span></span><br><span class="line">  <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">    max = o[k];</span><br><span class="line">    ch = k;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最多的字符是&#x27;</span> + ch);</span><br></pre></td></tr></table></figure><h4 id="1-6-7-字符串操作方法"><a href="#1-6-7-字符串操作方法" class="headerlink" title="1.6.7 字符串操作方法"></a>1.6.7 字符串操作方法</h4><p>​    字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="https://s2.loli.net/2022/05/25/b5fvlGoirmOSkFR.png"></p><h4 id="1-6-8-replace-方法"><a href="#1-6-8-replace-方法" class="headerlink" title="1.6.8 replace()方法"></a>1.6.8 replace()方法</h4><p>replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：  </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="built_in">replace</span>(被替换的字符串， 要替换为的字符串)；</span><br></pre></td></tr></table></figure><h4 id="1-6-9-split-方法"><a href="#1-6-9-split-方法" class="headerlink" title="1.6.9 split()方法"></a>1.6.9 split()方法</h4><p>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>其使用格式如下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="built_in">split</span>(<span class="string">&quot;分割字符&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="2-简单数据类型和复杂数据类型"><a href="#2-简单数据类型和复杂数据类型" class="headerlink" title="2 - 简单数据类型和复杂数据类型"></a>2 - 简单数据类型和复杂数据类型</h2><h3 id="2-0-目标"><a href="#2-0-目标" class="headerlink" title="2.0 目标"></a>2.0 目标</h3><blockquote><p>能够说出简单数据类型的内存分配</p><p>能够说出复杂数据类型的内存分配</p><p>能够说出简单类型如何传参</p><p>能够说出复杂类型如何传参</p></blockquote><h3 id="2-1-简单数据类型"><a href="#2-1-简单数据类型" class="headerlink" title="2.1 简单数据类型"></a>2.1 简单数据类型</h3><p>​    <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><h3 id="2-2-复杂数据类型"><a href="#2-2-复杂数据类型" class="headerlink" title="2.2 复杂数据类型"></a>2.2 复杂数据类型</h3><p>​    复杂数据类型（引用类型）：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h3 id="2-3-堆栈"><a href="#2-3-堆栈" class="headerlink" title="2.3 堆栈"></a>2.3 堆栈</h3><ul><li>堆栈空间分配区别：</li></ul><p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><pre><code>![](images\图片11.png)</code></pre><ul><li><p>简单数据类型的存储方式</p><p>值类型变量的数据直接存放在变量（栈空间）中</p></li></ul><p><img src="https://s2.loli.net/2022/05/25/tsQrCwDNWAdOga1.png"></p><ul><li><p>复杂数据类型的存储方式</p><p>引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="https://s2.loli.net/2022/05/25/NuCJIRYG3LzP76F.png"></p></li></ul><h3 id="2-4-简单类型传参"><a href="#2-4-简单类型传参" class="headerlink" title="2.4 简单类型传参"></a>2.4 简单类型传参</h3><p>​    函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">fn</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x)；</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://s2.loli.net/2022/05/25/6X3kWz29yTeKpoa.png"></p><h3 id="2-5-复杂数据类型传参"><a href="#2-5-复杂数据类型传参" class="headerlink" title="2.5 复杂数据类型传参"></a>2.5 复杂数据类型传参</h3><p>​    函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x</span>) &#123; <span class="comment">// x = p</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 2. 这个输出什么 ?    </span></span><br><span class="line">    x.<span class="property">name</span> = <span class="string">&quot;张学友&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>); <span class="comment">// 3. 这个输出什么 ?    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 1. 这个输出什么 ?   </span></span><br><span class="line"><span class="title function_">f1</span>(p);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>);    <span class="comment">// 4. 这个输出什么 ?  </span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://s2.loli.net/2022/05/25/T9XMVSveA1cDJd7.png"></p>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;能够说出什么是内置对象&lt;/p&gt;
&lt;p&gt;能够根据文档查询指定API的使用方法&lt;/p&gt;
&lt;p&gt;能够使用 Math 对象的常用方法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="js基础6" scheme="http://example.com/tags/js%E5%9F%BA%E7%A1%806/"/>
    
  </entry>
  
  <entry>
    <title>git01</title>
    <link href="http://example.com/2022/05/24/11-git01/"/>
    <id>http://example.com/2022/05/24/11-git01/</id>
    <published>2022-05-24T12:51:22.342Z</published>
    <updated>2022-05-24T12:50:30.030Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2-3-Git-中的三个区域"><a href="#2-3-Git-中的三个区域" class="headerlink" title="2.3  Git 中的三个区域"></a>2.3  Git 中的三个区域</h5><p>使用 Git 管理的项目，拥有三个区域，分别是工作区、暂存区、Git 仓库。</p><h5 id="2-4-Git-中的三种状态"><a href="#2-4-Git-中的三种状态" class="headerlink" title="2.4 Git 中的三种状态"></a>2.4 Git 中的三种状态</h5><ol><li><p>已修改 modified</p><p>表示修改了文件，但还没将修改的结果放到暂存区</p><span id="more"></span></li><li><p>已暂存 staged</p><p>表示对已修改文件的当前版本做了标记，使之包含在下次提交的列表中</p></li><li><p>已提交 committed</p><p>表示文件已经安全地保存在本地的 Git 仓库中</p></li></ol><p><strong>注意：</strong></p><ol><li>工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。</li><li>如果文件已修改并放入暂存区，就属于已暂存状态。</li><li>如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。</li></ol><h5 id="2-5-GIT基本工作流程"><a href="#2-5-GIT基本工作流程" class="headerlink" title="2.5 GIT基本工作流程"></a>2.5 GIT基本工作流程</h5><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件</li><li>将你想要下次提交的更改进行暂存</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</li></ol><h4 id="四-GIT基本操作"><a href="#四-GIT基本操作" class="headerlink" title="四. GIT基本操作"></a>四. GIT基本操作</h4><h5 id="4-1获取-Git-仓库的两种方式"><a href="#4-1获取-Git-仓库的两种方式" class="headerlink" title="4.1获取 Git 仓库的两种方式"></a>4.1获取 Git 仓库的两种方式</h5><ol><li>将尚未进行版本控制的本地目录<strong>转换</strong>为 Git 仓库</li><li>从其它服务器<strong>克隆</strong>一个已存在的 Git 仓库</li></ol><p>以上两种方式都能够在自己的电脑上得到一个可用的 Git 仓库</p><h5 id="4-2-在现有目录中初始化仓库"><a href="#4-2-在现有目录中初始化仓库" class="headerlink" title="4.2 在现有目录中初始化仓库"></a>4.2 在现有目录中初始化仓库</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 初始化仓库</span><br><span class="line">$git init</span><br></pre></td></tr></table></figure><p><code>git init</code> 命令会创建一个名为 .git 的隐藏目录，<strong>这个 .git 目录就是当前项目的 Git 仓库</strong>，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。</p><h5 id="4-3-工作区中文件的4种状态"><a href="#4-3-工作区中文件的4种状态" class="headerlink" title="4.3 工作区中文件的4种状态"></a>4.3 工作区中文件的4种状态</h5><p>未被git管理 =&gt; 未跟踪 ：01：不被git所管理的文件 </p><p>已被git管理  =&gt;  未修改 ：02：工作区中文件的内容和git仓库中的内容保持一致</p><p>03：已修改： 工作区中文件的内容和git仓库文件的内容不一致</p><p>04：已暂存 ：工作区中被修改的文件已被放到暂存区，准备将修改后的文件保存到给git中</p><h5 id="4-4-检查文件的状态"><a href="#4-4-检查文件的状态" class="headerlink" title="4.4 检查文件的状态"></a>4.4 检查文件的状态</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git status</span><br></pre></td></tr></table></figure><h5 id="4-6-将文件添加到暂存区-git-add-（跟踪新文件）"><a href="#4-6-将文件添加到暂存区-git-add-（跟踪新文件）" class="headerlink" title="4.6 将文件添加到暂存区 - git add （跟踪新文件）"></a>4.6 将文件添加到暂存区 - git add （跟踪新文件）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git add index.html</span><br></pre></td></tr></table></figure><h5 id="4-7-提交更新（commit-提交）"><a href="#4-7-提交更新（commit-提交）" class="headerlink" title="4.7 提交更新（commit - 提交）"></a>4.7 提交更新（commit - 提交）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git commit -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure><h5 id="4-8-对已提交的文件进行修改"><a href="#4-8-对已提交的文件进行修改" class="headerlink" title="4.8 对已提交的文件进行修改"></a>4.8 对已提交的文件进行修改</h5><p>对已提交的文件进行修改后，运行 <strong>git status 和 git status -s</strong> </p><p><em>注意：修改过的、没有放入暂存区的文件前面有红色的 M 标记。</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$git add index.html // 把已修改的文件放暂存区</span><br><span class="line">$git status // 查看详细文件的文件状态报告</span><br><span class="line">$git status -s // 查看精简报告</span><br></pre></td></tr></table></figure><h5 id="4-10-提交已暂存的文件"><a href="#4-10-提交已暂存的文件" class="headerlink" title="4.10 提交已暂存的文件"></a>4.10 提交已暂存的文件</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git commit -m &#x27;修改了index.html中的内容&#x27;</span><br></pre></td></tr></table></figure><h5 id="4-11-代码回滚-撤销对文件的修改"><a href="#4-11-代码回滚-撤销对文件的修改" class="headerlink" title="4.11 代码回滚(撤销对文件的修改)"></a>4.11 代码回滚(撤销对文件的修改)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git checkout -- 要回滚的文件名 （注意空格！！！！）</span><br><span class="line">$git checkout -- index.html</span><br></pre></td></tr></table></figure><h5 id="4-12-向暂存区中一次性添加多个文件"><a href="#4-12-向暂存区中一次性添加多个文件" class="headerlink" title="4.12 向暂存区中一次性添加多个文件"></a>4.12 向暂存区中一次性添加多个文件</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git add .    </span><br></pre></td></tr></table></figure><h5 id="4-13-取消暂存的文件"><a href="#4-13-取消暂存的文件" class="headerlink" title="4.13 取消暂存的文件"></a>4.13 取消暂存的文件</h5><p>如果需要从暂存区中移除对应的文件，可以使用如下的命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git reset HEAD 需要移除的文件名</span><br></pre></td></tr></table></figure><h5 id="4-14-跳过使用暂存区域"><a href="#4-14-跳过使用暂存区域" class="headerlink" title="4.14 跳过使用暂存区域"></a>4.14 跳过使用暂存区域</h5><p>Git 标准的工作流程是<strong>工作区 → 暂存区 → Git 仓库</strong>，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将工作区中的修改提交到 Git 仓库，这时候 Git 工作的流程简化为了工作区 → Git 仓库。</p><p>​        Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <strong>git commit 加上 -a 选项</strong>，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而<strong>跳过 git add</strong> 步骤：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure><h5 id="4-15-移除文件"><a href="#4-15-移除文件" class="headerlink" title="4.15 移除文件"></a>4.15 移除文件</h5><p>从 Git 仓库中移除文件的方式有两种：</p><ol><li>从 Git 仓库和工作区中同时移除对应的文件</li><li>只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 从git仓库和工作区中同时移除index.js文件</span><br><span class="line">$git rm -f index.js</span><br></pre></td></tr></table></figure><h5 id="4-16-忽略文件（★★★-会认就可以-基本上一个项目只会配置非常少的忽略设置）"><a href="#4-16-忽略文件（★★★-会认就可以-基本上一个项目只会配置非常少的忽略设置）" class="headerlink" title="4.16 忽略文件（★★★ - 会认就可以 - 基本上一个项目只会配置非常少的忽略设置）"></a>4.16 忽略文件（★★★ - 会认就可以 - 基本上一个项目只会配置非常少的忽略设置）</h5><p>​        一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可以创建一个名为 .gitignore 的配置文件，列出要忽略的文件的匹配模式</p><p>文件 .gitignore 的格式规范如下：</p><ol><li>以 # 开头的是注释</li><li>以 / 结尾的是目录 （★★★）</li><li>以 / 开头防止递归</li><li>以 ! 开头表示取反</li><li>可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）</li></ol><p>所谓的 glob 模式是指简化了的正则表达式：</p><ol><li><strong>星号 *</strong> 匹配零个或多个任意字符</li><li><strong>[abc]</strong> 匹配任何一个列在方括号中的字符 （此案例匹配一个 a 或匹配一个 b 或匹配一个 c） </li><li><strong>问号 ?</strong> 只匹配一个任意字符</li><li>在方括号中使用<strong>短划线</strong>分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配</li><li>所有 0 到 9 的数字）</li><li><strong>两个星号 *</strong>* 表示匹配任意中间目录（比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 忽略 index.css 这个文件</span><br><span class="line">index.css</span><br><span class="line"></span><br><span class="line">#忽略所有 .html 文件</span><br><span class="line">*.html</span><br><span class="line"></span><br><span class="line"># 但排除所有的lib.html, 及时在前面忽略过.html文件</span><br><span class="line">!lib.html</span><br><span class="line"></span><br><span class="line"># 只忽略当前目录下的 TODO 文件，而不会了subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"># 忽略任何目录下名为build的文件夹</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"># 忽略 doc/notes.txt, 但不忽略 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"># 忽略doc/ 目录以及其所有子目录下的.pdf文件</span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h5 id="4-18-查看提交历史"><a href="#4-18-查看提交历史" class="headerlink" title="4.18 查看提交历史"></a>4.18 查看提交历史</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 按时间先后顺序列出所有提交历史，最近的提交放在最上面</span><br><span class="line">$git log</span><br><span class="line"></span><br><span class="line"># 只会展示最新的两条提交历史， 数组可以按需进行修改</span><br><span class="line">$git log -2</span><br><span class="line"></span><br><span class="line"># 在一行上展示最近的两条提交历史信息</span><br><span class="line">$ git log -2 --pretty=oneline</span><br><span class="line"></span><br><span class="line">#在一行上展示最近两条提交历史的信息，并定义输出的格式</span><br><span class="line"># %h 提交的简写哈希值 %an作者名字 %ar作者修订的时间 %s提交说明</span><br><span class="line">$git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;</span><br></pre></td></tr></table></figure><h5 id="4-19-回退到指定的版本"><a href="#4-19-回退到指定的版本" class="headerlink" title="4.19 回退到指定的版本"></a>4.19 回退到指定的版本</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 在一行上展示所有的提交历史</span><br><span class="line">$git log --pretty=oneline</span><br><span class="line"></span><br><span class="line"># 使用 git reset --hard 命令更具指定提交 ID 回退到指定版本</span><br><span class="line">$git reset --hard <span class="tag">&lt;<span class="name">CommitID</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 在旧版本中使用git reflog --pretty=oneline 命令，查看命令操作历史</span><br><span class="line">$git reflog --pretty=online</span><br><span class="line"></span><br><span class="line"># 再次根据最新的提交ID,跳转到最新的版本</span><br><span class="line">$git reset --hard <span class="tag">&lt;<span class="name">CommitID</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="五-小结"><a href="#五-小结" class="headerlink" title="五. 小结"></a>五. 小结</h4><ol><li><p>初始化GIT仓库命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>查看文件状态命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure></li><li><p>一次性将文件加入暂存区的命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>将暂存区文件提交到GIT仓库的命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交消息&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;2-3-Git-中的三个区域&quot;&gt;&lt;a href=&quot;#2-3-Git-中的三个区域&quot; class=&quot;headerlink&quot; title=&quot;2.3  Git 中的三个区域&quot;&gt;&lt;/a&gt;2.3  Git 中的三个区域&lt;/h5&gt;&lt;p&gt;使用 Git 管理的项目，拥有三个区域，分别是工作区、暂存区、Git 仓库。&lt;/p&gt;
&lt;h5 id=&quot;2-4-Git-中的三种状态&quot;&gt;&lt;a href=&quot;#2-4-Git-中的三种状态&quot; class=&quot;headerlink&quot; title=&quot;2.4 Git 中的三种状态&quot;&gt;&lt;/a&gt;2.4 Git 中的三种状态&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;已修改 modified&lt;/p&gt;
&lt;p&gt;表示修改了文件，但还没将修改的结果放到暂存区&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
    <category term="git01" scheme="http://example.com/tags/git01/"/>
    
  </entry>
  
  <entry>
    <title>git02</title>
    <link href="http://example.com/2022/05/24/12-git02/"/>
    <id>http://example.com/2022/05/24/12-git02/</id>
    <published>2022-05-24T12:51:22.339Z</published>
    <updated>2022-05-24T12:26:01.764Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2-3-远程仓库的两种访问方式"><a href="#2-3-远程仓库的两种访问方式" class="headerlink" title="2.3 远程仓库的两种访问方式"></a>2.3 远程仓库的两种访问方式</h5><p>Github 上的远程仓库，有两种访问方式，分别是 HTTPS 和 SSH。它们的区别是：</p><ol><li>HTTPS：<strong>零配置</strong>；但是每次访问仓库时，需要重复输入 Github 的账号和密码才能访问成功</li><li>SSH：<strong>需要进行额外的配置</strong>；但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码</li></ol><h5 id="2-5-GIT的push操作-（推送-也就是更新仓库★★★）"><a href="#2-5-GIT的push操作-（推送-也就是更新仓库★★★）" class="headerlink" title="2.5 GIT的push操作 （推送 - 也就是更新仓库★★★）"></a>2.5 GIT的push操作 （推送 - 也就是更新仓库★★★）</h5><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1. 添加暂存区</span><br><span class="line">$git add .</span><br><span class="line"></span><br><span class="line"># 2. 提交更新</span><br><span class="line">$git commit -m &quot;2 commit&quot;</span><br><span class="line"></span><br><span class="line"># 3. 推送到云端</span><br><span class="line">$git push</span><br></pre></td></tr></table></figure><h5 id="2-6-SSH-key"><a href="#2-6-SSH-key" class="headerlink" title="2.6  SSH key"></a>2.6  SSH key</h5><ol><li>SSH key 的<strong>作用</strong>：实现本地仓库和 Github 之间免登录的加密数据传输。</li><li>SSH key 的<strong>好处</strong>：免登录身份认证、数据加密传输。</li><li>SSH key 由<strong>两部分组成</strong>，分别是：<ol><li><code>id_rsa</code>（私钥文件，存放于客户端的电脑中即可）</li><li><code>id_rsa.pub</code>（公钥文件，需要配置到 Github 中）</li></ol></li></ol><h5 id="2-6-3-检测-Github-的-SSH-key-是否配置成功"><a href="#2-6-3-检测-Github-的-SSH-key-是否配置成功" class="headerlink" title="2.6.3 检测 Github 的 SSH key 是否配置成功"></a>2.6.3 检测 Github 的 SSH key 是否配置成功</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><h5 id="2-6-5-将远程仓库克隆到本地"><a href="#2-6-5-将远程仓库克隆到本地" class="headerlink" title="2.6.5 将远程仓库克隆到本地"></a>2.6.5 将远程仓库克隆到本地</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git clone 远程代码地址</span><br></pre></td></tr></table></figure><h4 id="三-分支"><a href="#三-分支" class="headerlink" title="三. 分支"></a>三. 分支</h4><h5 id="3-1-分支的概念"><a href="#3-1-分支的概念" class="headerlink" title="3.1 分支的概念"></a>3.1 分支的概念</h5><p>可以认为分支就是当前工作目录中代码的一份<strong>副本</strong>。使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p><p>在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目功能的开发</p><h5 id="3-3-master（main）-主分支"><a href="#3-3-master（main）-主分支" class="headerlink" title="3.3 master（main） 主分支"></a>3.3 master（main） 主分支</h5><p>在实际工作中，master 主分支的作用是：<strong>用来保存和记录整个项目已完成的功能代码</strong>。</p><h5 id="3-5-查看分支列表"><a href="#3-5-查看分支列表" class="headerlink" title="3.5 查看分支列表"></a>3.5 查看分支列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git branch    //*注意：分支名字前面的 ***** 号表示当前所处的分支。*</span><br></pre></td></tr></table></figure><h5 id="3-6-创建新分支"><a href="#3-6-创建新分支" class="headerlink" title="3.6 创建新分支"></a>3.6 创建新分支</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git branch 分支名称</span><br></pre></td></tr></table></figure><h5 id="3-7-切换分支"><a href="#3-7-切换分支" class="headerlink" title="3.7  切换分支"></a>3.7  切换分支</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git checkout login</span><br></pre></td></tr></table></figure><h5 id="3-8-分支的快速创建和切换"><a href="#3-8-分支的快速创建和切换" class="headerlink" title="3.8 分支的快速创建和切换"></a>3.8 分支的快速创建和切换</h5><p>使用如下的命令，可以创建指定名称的新分支，并立即切换到新分支上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -b 表示创建一个新分支</span><br><span class="line"># checkout 表示切换到创建的分支上</span><br><span class="line">$git checkout -b 新建分支名称</span><br></pre></td></tr></table></figure><h5 id="3-9-合并分支"><a href="#3-9-合并分支" class="headerlink" title="3.9 合并分支"></a>3.9 合并分支</h5><p>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 master 主分支上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 切换到 master 分支</span><br><span class="line">$git checkout master</span><br><span class="line"></span><br><span class="line"># 在 master 分支上运行 git merge 命令，将 demo 分支的代码合并到 master 分支</span><br><span class="line">$git merge demo</span><br></pre></td></tr></table></figure><p><strong>合并分支时的注意点：</strong>假设要把 C 分支的代码合并到 A 分支，则必须<strong>先切换到 A 分支</strong>上，<strong>再运行 git</strong> <strong>merge 命令</strong>，来合并 C 分支</p><h5 id="3-10-删除分支"><a href="#3-10-删除分支" class="headerlink" title="3.10 删除分支"></a>3.10 删除分支</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git branch -d 分支名称</span><br></pre></td></tr></table></figure><h5 id="3-11-遇到冲突时的分支合并"><a href="#3-11-遇到冲突时的分支合并" class="headerlink" title="3.11 遇到冲突时的分支合并"></a>3.11 遇到冲突时的分支合并</h5><p>​    如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开这些包含冲突的文件然后<strong>手动解决冲突</strong>。</p><h5 id="3-12-将本地分支推送到远程仓库"><a href="#3-12-将本地分支推送到远程仓库" class="headerlink" title="3.12 将本地分支推送到远程仓库"></a>3.12 将本地分支推送到远程仓库</h5><h5 id="如果是第一次将本地分支推送到远程仓库，需要运行如下的命令："><a href="#如果是第一次将本地分支推送到远程仓库，需要运行如下的命令：" class="headerlink" title="如果是第一次将本地分支推送到远程仓库，需要运行如下的命令："></a>如果是<strong>第一次</strong>将本地分支推送到远程仓库，需要运行如下的命令：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -u 表示第一次吧本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数</span><br><span class="line">$git push -u 远程仓库的别名 本地分支名称:远程分支名称</span><br><span class="line"></span><br><span class="line"># 实际案例</span><br><span class="line">$git push -u origin demo:pay</span><br><span class="line"></span><br><span class="line">#如果希望远程分支的名称和蹦迪分支名称保持一致，可以对命令进行简化</span><br><span class="line">$git push -u origin demo</span><br></pre></td></tr></table></figure><h5 id="3-13-查看远程仓库中所有的分支列表"><a href="#3-13-查看远程仓库中所有的分支列表" class="headerlink" title="3.13 查看远程仓库中所有的分支列表"></a>3.13 查看远程仓库中所有的分支列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show 远程仓库名称</span><br></pre></td></tr></table></figure><h5 id="3-14-跟踪分支"><a href="#3-14-跟踪分支" class="headerlink" title="3.14 跟踪分支"></a>3.14 跟踪分支</h5><p>跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git pull   //先把代码拉下来</span><br><span class="line"></span><br><span class="line"># 从远程仓库，把对应的远程分支下载到本地仓库，保持本地分支和远程分支名称相同</span><br><span class="line">$git checkout 远程仓库的别名/远程分支的名称</span><br><span class="line">$git checkout payment</span><br><span class="line"></span><br><span class="line"># 从远程仓库，把对应的远程分支下载到本地仓库，并吧下载的本地分支重新命名</span><br><span class="line">$git checkout -b 本地分支名称 远程仓库名称/远程分支名称</span><br><span class="line">$git checkout -b payment origin/pay</span><br></pre></td></tr></table></figure><h5 id="3-15-拉取-pull-远程分支的最新的代码-★★★"><a href="#3-15-拉取-pull-远程分支的最新的代码-★★★" class="headerlink" title="3.15 拉取(pull)远程分支的最新的代码(★★★)"></a>3.15 拉取(pull)远程分支的最新的代码(★★★)</h5><h5 id="可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中："><a href="#可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：" class="headerlink" title="可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中："></a>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git pull</span><br></pre></td></tr></table></figure><h5 id="3-16-删除远程分支"><a href="#3-16-删除远程分支" class="headerlink" title="3.16 删除远程分支"></a>3.16 删除远程分支</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除远程仓库中，指定名称的远程分支</span><br><span class="line">$git push 远程仓库名称 --delete 远程分支名称</span><br><span class="line">$git push origin --delete pay</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;2-3-远程仓库的两种访问方式&quot;&gt;&lt;a href=&quot;#2-3-远程仓库的两种访问方式&quot; class=&quot;headerlink&quot; title=&quot;2.3 远程仓库的两种访问方式&quot;&gt;&lt;/a&gt;2.3 远程仓库的两种访问方式&lt;/h5&gt;&lt;p&gt;Github 上的远程仓库，有两种访问方式，分别是 HTTPS 和 SSH。它们的区别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTPS：&lt;strong&gt;零配置&lt;/strong&gt;；但是每次访问仓库时，需要重复输入 Github 的账号和密码才能访问成功&lt;/li&gt;
&lt;li&gt;SSH：&lt;strong&gt;需要进行额外的配置&lt;/strong&gt;；但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;2-5-GIT的push操作-（推送-也就是更新仓库★★★）&quot;&gt;&lt;a href=&quot;#2-5-GIT的push操作-（推送-也就是更新仓库★★★）&quot; class=&quot;headerlink&quot; title=&quot;2.5 GIT的push操作 （推送 - 也就是更新仓库★★★）&quot;&gt;&lt;/a&gt;2.5 GIT的push操作 （推送 - 也就是更新仓库★★★）&lt;/h5&gt;</summary>
    
    
    
    
    <category term="git02" scheme="http://example.com/tags/git02/"/>
    
  </entry>
  
  <entry>
    <title>js基础4</title>
    <link href="http://example.com/2022/05/23/10-js%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/05/23/10-js%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-23T12:44:07.025Z</published>
    <updated>2022-05-23T12:55:24.293Z</updated>
    
    <content type="html"><![CDATA[<p><strong>01.JS 中创建数组有两种方式：</strong></p><p> 01.利用  new 创建数组<br>​    var arr = new Array();     // 创建一个新的空数组</p><p>​ 02.利用数组字面量创建数组<br>​        var  数组名 = []；</p><span id="more"></span><h5 id="02-函数："><a href="#02-函数：" class="headerlink" title="02.函数："></a>02.函数：</h5><ul><li><p>就是<span style="color:red;"><strong>封装了一段可被重复调用执行的代码块</strong></span>。通过<span style="color:red;"><strong>函数</strong></span>可以<span style="color:red;"><strong>实现大量代码的重复使用</strong></span>，提高代码利用    率。  </p></li><li><p>封装是什么意思？就是把一个或者多个功能组合在一个函数里</p></li></ul><h5 id="03-return-语句"><a href="#03-return-语句" class="headerlink" title="03.return 语句"></a>03.return 语句</h5><ul><li> 在使用 return 语句时，函数会停止执行，并返回指定的值</li><li> 如果函数没有 return ，返回的值是 undefined</li></ul><h5 id="04-break-continue-return-的区别"><a href="#04-break-continue-return-的区别" class="headerlink" title="04.break ,continue ,return 的区别"></a>04.break ,continue ,return 的区别</h5><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h5 id="05-arguments的使用"><a href="#05-arguments的使用" class="headerlink" title="05.arguments的使用"></a>05.arguments的使用</h5><p>当不确定有多少个参数传递的时候，可以用 <span style="color:red;">arguments </span>来获取。在 JavaScript 中，arguments实际上它是当前函数的一个<span style="color:red;">内置对象</span>。所有函数都内置了一个 arguments 对象，arguments 对象中存储了<span style="color:red;">传递的所有实参</span>。</p><p><span style="color:red;"><strong>arguments展示形式是一个伪数组</strong></span>，因此可以进行遍历。</p><p><strong>伪数组</strong>具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：<span style="color:red;"><strong>在函数内部使用该对象</strong></span>，用此对象获取函数调用时传的实参。</p></li></ul><h5 id="06-函数的两种声明方式"><a href="#06-函数的两种声明方式" class="headerlink" title="06.函数的两种声明方式"></a>06.函数的两种声明方式</h5><p>自定义函数方式(命名函数)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 声明定义方式</span><br><span class="line">function fn() &#123;...&#125;</span><br><span class="line">// 调用  </span><br><span class="line">fn();  </span><br></pre></td></tr></table></figure><p>函数表达式方式(匿名函数）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 这是函数表达式写法，匿名函数后面跟分号结束</span><br><span class="line">var fn = function()&#123;...&#125;；</span><br><span class="line">// 调用的方式，函数调用必须写到函数体下面</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;01.JS 中创建数组有两种方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 01.利用  new 创建数组&lt;br&gt;​    var arr = new Array();     // 创建一个新的空数组&lt;/p&gt;
&lt;p&gt;​ 02.利用数组字面量创建数组&lt;br&gt;​        var  数组名 = []；&lt;/p&gt;</summary>
    
    
    
    
    <category term="js基础4" scheme="http://example.com/tags/js%E5%9F%BA%E7%A1%804/"/>
    
  </entry>
  
  <entry>
    <title>ajax-01</title>
    <link href="http://example.com/2022/05/20/09-ajax-02/"/>
    <id>http://example.com/2022/05/20/09-ajax-02/</id>
    <published>2022-05-20T04:31:12.355Z</published>
    <updated>2022-05-26T11:53:14.542Z</updated>
    
    <content type="html"><![CDATA[<ul><li>能够说出form表单的常用属性</li><li>能够知道如何阻止表单的默认提交行为</li><li>能够知道如何使用<code>jQuery</code>快速获取表单数据</li><li>能够知道如何安装和使用模板引擎</li><li>能够知道模板引擎的实现原理<span id="more"></span><h1 id="Form表单的基本使用"><a href="#Form表单的基本使用" class="headerlink" title="Form表单的基本使用"></a>Form表单的基本使用</h1></li></ul><h2 id="什么是表单"><a href="#什么是表单" class="headerlink" title="什么是表单"></a>什么是表单</h2><p>表单在网页中主要负责 <strong>数据采集功能</strong>。HTML中<code>&lt;form&gt;</code>标签，就是用于采集用户输入的信息，并通过 <code>&lt;form&gt; </code>标签的提交操作，把采集的信息提交到服务器端进行处理</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E4%BB%80%E4%B9%88%E6%98%AF%E8%A1%A8%E5%8D%95.png"></p><h2 id="表单的组成部分"><a href="#表单的组成部分" class="headerlink" title="表单的组成部分"></a>表单的组成部分</h2><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%A1%A8%E5%8D%95%E7%BB%84%E6%88%90.png"></p><ul><li>表单标签</li><li>表单域：包含了文本框，密码框，隐藏域，都行文本框，复选框，单选框，下拉选择框和文件上传框等等</li><li>表单按钮：通过设置<code>type</code>属性为<code>submit</code>来触发<code>form</code>表单的提交</li></ul><h2 id="lt-form-gt-标签的属性-⭐⭐⭐"><a href="#lt-form-gt-标签的属性-⭐⭐⭐" class="headerlink" title="&lt;form&gt; 标签的属性(⭐⭐⭐)"></a><code>&lt;form&gt;</code> 标签的属性(⭐⭐⭐)</h2><h3 id="action"><a href="#action" class="headerlink" title="action"></a><code>action</code></h3><p><code>action</code> 属性用来规定当提交表单时，<strong>向何处发送表单数据</strong>。</p><p><code>action</code> 属性的值应该是后端提供的一个URL地址，这个URL地址专门负责接收表单提交过来的数据。</p><p>当 <code>&lt;form&gt;</code>表单在未制定 <code>action</code> 属性值的清空下，<code>action</code>的默认值为当前页面的 <code>URL</code> 地址</p><p><strong>注意:</strong> 当提交表单后，会立即跳转到 <code>action</code> 属性指定的 <code>URL</code> 地址</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a><code>target</code></h3><p><code>target</code> 属性用来规定 在何处打开 <code>action URL</code></p><p>它的可选值有5个，默认情况下，target的值是 _self，表示在相同的框架中打开 action URL</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/target%E5%B1%9E%E6%80%A7.png"></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a><code>method</code></h3><p><code>method</code> 属性用来规定 <strong>以何种方式</strong> 把表单数据提交到 action URL</p><p>它的可选值有两个，分别是 <code>get</code> 和 <code>post</code></p><p>默认情况下，<code>method</code>的值为 <code>get</code>， 表示通过<code>URL</code>地址的形式，把表单数据提交到 <code>action URL</code></p><p><strong>注意：</strong></p><ul><li>get 方式适合用来提交<strong>少量的</strong>，<strong>简单的</strong>数据 ( 会把数据显示在地址栏)</li><li>post 方式适合用来提交<strong>大量的</strong>，<strong>复杂的</strong>，或包含<strong>文件上传</strong>的数据</li></ul><h3 id="enctype"><a href="#enctype" class="headerlink" title="enctype"></a><code>enctype</code></h3><p><code>enctype</code>属性用来规定在 <strong>发送表单数据之前如何对数据进行编码</strong></p><p>它的可选值有三个，默认情况下，<code>enctype</code>的值为 <code>application/x-www-form-urlencoded</code>，表示在发送前编码的所有字符</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/enctype%E5%B1%9E%E6%80%A7.png"></p><h2 id="表单的同步提交及缺点"><a href="#表单的同步提交及缺点" class="headerlink" title="表单的同步提交及缺点"></a>表单的同步提交及缺点</h2><h3 id="什么是表单的同步提交"><a href="#什么是表单的同步提交" class="headerlink" title="什么是表单的同步提交"></a>什么是表单的同步提交</h3><p>通过点击 submit 按钮，触发表单提交的操作，从而使页面跳转到 <code>action URL</code> 的行为，叫做表单的同步提交</p><h3 id="表单同步提交的缺点"><a href="#表单同步提交的缺点" class="headerlink" title="表单同步提交的缺点"></a>表单同步提交的缺点</h3><ul><li><code>&lt;form&gt;</code> 表单同步提交后，整个页面会发生跳转，<strong>跳转到 action URL 所指向的地址</strong>，用户体验很差</li><li><code>&lt;form&gt;</code> 表单同步提交后，<strong>页面之前的状态和数据会丢失</strong></li></ul><p><strong>如何解决呢？</strong></p><p><strong>表单只负责采集数据，Ajax负责将数据提交到服务器</strong></p><h1 id="通过Ajax提交表单数据"><a href="#通过Ajax提交表单数据" class="headerlink" title="通过Ajax提交表单数据"></a>通过Ajax提交表单数据</h1><h2 id="监听表单提交事件"><a href="#监听表单提交事件" class="headerlink" title="监听表单提交事件"></a>监听表单提交事件</h2><p>在 <code>jQuery</code> 中，可以使用如下两种方式，监听到表单的提交事件</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E7%9B%91%E5%90%AC%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E4%BA%8B%E4%BB%B6.png"></p><h2 id="阻止表单默认提交行为-⭐⭐⭐"><a href="#阻止表单默认提交行为-⭐⭐⭐" class="headerlink" title="阻止表单默认提交行为(⭐⭐⭐)"></a>阻止表单默认提交行为(⭐⭐⭐)</h2><p>当监听到表单的提交事件以后，可以调用事件对象的 <code>event.preventDefault()</code> 函数，来阻止表单的提交和页面的跳转</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E9%98%BB%E6%AD%A2%E8%A1%A8%E5%8D%95%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA.png"></p><h2 id="如何快速获取表单数据-⭐⭐⭐"><a href="#如何快速获取表单数据-⭐⭐⭐" class="headerlink" title="如何快速获取表单数据(⭐⭐⭐)"></a>如何快速获取表单数据(⭐⭐⭐)</h2><h3 id="serialize-函数-ˈsɪriəlaɪz-连载；使连续"><a href="#serialize-函数-ˈsɪriəlaɪz-连载；使连续" class="headerlink" title="serialize() 函数      /ˈsɪriəlaɪz/   连载；使连续"></a><code>serialize()</code> 函数      /ˈsɪriəlaɪz/   连载；使连续</h3><p><font style="color:red">  具体操作： let data = $(  ‘  #表单id  ‘  ).serialize()</font></p><p>为了简化表单中数据的获取操作，<code>jQu/ˈsɪriəlaɪz/ery</code>提供了 <code>serialize()</code> 函数，语法格式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/serialize%E5%87%BD%E6%95%B0.png"></p><p><strong>好处：</strong>可以一次性获取表单的数据</p><p><strong>示例代码：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/serialize%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.png"></p><p><strong>注意：</strong>在使用 serialize() 函数快速获取表单数据时，<strong>必须为每个表单元素添加 name 属性</strong></p><h1 id="案例-评论列表"><a href="#案例-评论列表" class="headerlink" title="案例-评论列表"></a>案例-评论列表</h1><h2 id="UI结构搭建"><a href="#UI结构搭建" class="headerlink" title="UI结构搭建"></a><code>UI</code>结构搭建</h2><p><strong>步骤</strong></p><ul><li>评论面板结构<ul><li>创建panel （快捷键：<code>bs3-panel:primary</code>）</li><li>修改title里面的标题</li><li>在body 里面 创建两个输入框，加上对应的文本提示</li><li>最下面加上一个 button（快捷键：<code>bs3-button:primary</code>）</li></ul></li><li>评论列表结构<ul><li>构建一个<code>list</code>列表（快捷键：<code>bs3-list-group</code>）</li><li>在第一个<code>li</code>里面放两个 <code>span</code>，写入 评论时间和评论人</li></ul></li></ul><p><strong>结构代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;padding: 15px;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 评论面板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span> <span class="attr">id</span>=<span class="string">&quot;formAddCmt&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>评论人：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>评论内容：<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>发表评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 评论列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cmt-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #F0AD4E;&quot;</span>&gt;</span>评论时间：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;badge&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #5BC0DE;&quot;</span>&gt;</span>评论人：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      Item 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取评论列表数据"><a href="#获取评论列表数据" class="headerlink" title="获取评论列表数据"></a>获取评论列表数据</h2><ul><li>定义函数来获取评论列表数据 <code>getCommentList()</code></li><li>查阅接口文档，关注请求<code>url</code>，是否需要携带参数，请求方式</li><li>利用 <code>$.ajax()</code> 来进行请求</li><li>在 <code>success</code> 回调函数中，判断请求数据是否成功，如果状态码不是200，提示用户</li></ul><p><strong>示例代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCommentList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/cmtlist&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;获取评论列表失败！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getCommentList</span>()</span><br></pre></td></tr></table></figure><h2 id="渲染评论列表"><a href="#渲染评论列表" class="headerlink" title="渲染评论列表"></a>渲染评论列表</h2><ul><li>创建一个空数组（<code>rows</code>），用来存放每一个元素的<code>html</code>字符串结构 </li><li>遍历服务器返回的数据，每遍历一次，拼接一个对应的<code>html</code>字符串结构，然后放入到数组中</li><li>找到list容器，先清空一下里面内容，然后利用 append 添加新的数据</li></ul><p><strong>示例代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCommentList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/cmtlist&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;获取评论列表失败！&#x27;</span>)</span><br><span class="line">      <span class="keyword">var</span> rows = []</span><br><span class="line">      $.<span class="title function_">each</span>(res.<span class="property">data</span>, <span class="keyword">function</span> (<span class="params">i, item</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;&lt;li class=&quot;list-group-item&quot;&gt;&lt;span class=&quot;badge&quot; style=&quot;background-color: #F0AD4E;&quot;&gt;评论时间：&#x27;</span> + item.<span class="property">time</span> + <span class="string">&#x27;&lt;/span&gt;&lt;span class=&quot;badge&quot; style=&quot;background-color: #5BC0DE;&quot;&gt;评论人：&#x27;</span> + item.<span class="property">username</span> + <span class="string">&#x27;&lt;/span&gt;&#x27;</span> + item.<span class="property">content</span> + <span class="string">&#x27;&lt;/li&gt;&#x27;</span></span><br><span class="line">        rows.<span class="title function_">push</span>(str)</span><br><span class="line">      &#125;)</span><br><span class="line">      $(<span class="string">&#x27;#cmt-list&#x27;</span>).<span class="title function_">empty</span>().<span class="title function_">append</span>(rows.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发表评论"><a href="#发表评论" class="headerlink" title="发表评论"></a>发表评论</h2><h3 id="改造form表单"><a href="#改造form表单" class="headerlink" title="改造form表单"></a>改造form表单</h3><ul><li>把之前<code>panel-body</code>的标签改成 <code>form</code> 标签</li><li>给每一个输入框设置 <code>name</code> 属性，<strong>name属性的值最好与接口文档定义的参数名称一致</strong></li><li>注册 <code>sumbit</code> 事件，阻止表单提交的默认行为</li><li>获取用户输入内容（利用 <code>serialize()</code> ）</li></ul><p><strong>示例代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#formAddCmt&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="keyword">var</span> data = $(<span class="variable language_">this</span>).<span class="title function_">serialize</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="完成发表功能"><a href="#完成发表功能" class="headerlink" title="完成发表功能"></a>完成发表功能</h3><ul><li>查阅接口文档</li><li>利用 <code>$.post()</code> 发送请求，传入数据</li><li>在成功回调函数里面判断 返回的 <code>status</code> 是否是201，如果是代表成功，失败进行提示</li><li>刷新页面（调用 <code>getCommentList()</code>），清空表单内容（<code>$(&#39;#formAddCmt&#39;)[0].reset()</code>）</li></ul><p><strong>示例代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#formAddCmt&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="keyword">var</span> data = $(<span class="variable language_">this</span>).<span class="title function_">serialize</span>()</span><br><span class="line">    $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addcmt&#x27;</span>, data, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">201</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;发表评论失败！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">getCommentList</span>()</span><br><span class="line">      $(<span class="string">&#x27;#formAddCmt&#x27;</span>)[<span class="number">0</span>].<span class="title function_">reset</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>之前在渲染<code>UI</code>结构时候，<strong>拼接字符串是比较麻烦的，而且很容易出现问题</strong></p><p><strong>模板引擎</strong>，它可以根据程序员指定的 <strong>模板结构</strong> 和 <strong>数据</strong>，自动生成一个完整的HTML页面</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png"></p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>减少了字符串的拼接操作</li><li>使代码结构更清晰</li><li>使代码更易于阅读与维护</li></ul><h1 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>art-template 是一个简约，超快的模板引擎，中文官首页：<a href="http://aui.github.io/art-template/zh-cn/index.html">http://aui.github.io/art-template/zh-cn/index.html</a></p><h2 id="安装-⭐⭐⭐"><a href="#安装-⭐⭐⭐" class="headerlink" title="安装(⭐⭐⭐)"></a>安装(⭐⭐⭐)</h2><ul><li>浏览器访问  <a href="http://aui.github.io/art-template/zh-cn/docs/installation.html">http://aui.github.io/art-template/zh-cn/docs/installation.html</a></li><li>找到 <strong>安装</strong> 导航栏，找到下载链接，右键下载即可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/art-template%E4%B8%8B%E8%BD%BD.png"></p><h2 id="基本使用-⭐⭐⭐"><a href="#基本使用-⭐⭐⭐" class="headerlink" title="基本使用(⭐⭐⭐)"></a>基本使用(⭐⭐⭐)</h2><p>通过传统方式渲染的过程，我们了解到，动态去渲染<code>UI</code>的时候需要大量去拼接字符串，比较的麻烦，而且复用性也不是很好</p><h3 id="art-template使用步骤"><a href="#art-template使用步骤" class="headerlink" title="art-template使用步骤"></a>art-template使用步骤</h3><p>1.导入 <code>art-template</code></p><p>​        在window全局，就多了一个函数，叫做 template(‘模板id’，需要渲染的数据对象)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./lib/template-web.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.定义数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><p>3.定义模板</p><pre><code> 01.模板的 HTML 结构，必须定义到 `script` 标签中，注意：需要把type属性改成  `text/html`  02.给 模板 添加一个 `id`  03.模板里面如果需要使用到传入的数据，利用 &#123;&#123;&#125;&#125; 来实现，例如：&#123;&#123;name&#125;&#125;，那么就会去找 我们调            用 template() 函数 第二个参数里面对应的`name`属性的值</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/html&quot;</span> id=<span class="string">&quot;tpl-user&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;    ------    &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>4.调用 <code>template</code> 函数</p><p>​    函数的返回值就是拼接好的模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlStr = <span class="title function_">template</span>(<span class="string">&#x27;tpl-user&#x27;</span>, data)  </span><br></pre></td></tr></table></figure><pre><code> ::oncoming_police_car:  1 调用时 tpl-user虽然是id但不要加#号 </code></pre><p>​    ::blue_car:  2 .data是一个对象（调用 <code>template</code> 函数时直接写res，返回来的res），模版引擎中直接使用                   data下的属性就行，不要写成data .name 等等</p><p>5.渲染<code>HTML</code>结构</p><p>​    最后我们需要把template返回的模板字符串设置到页面容器中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#container&#x27;</span>).<span class="title function_">html</span>(htmlStr)</span><br></pre></td></tr></table></figure><h3 id="标准语法"><a href="#标准语法" class="headerlink" title="标准语法"></a>标准语法</h3><h4 id="什么是标准语法"><a href="#什么是标准语法" class="headerlink" title="什么是标准语法"></a>什么是标准语法</h4><p>art-template 提供了  <code>&#123;&#123;&#125;&#125;`  这种语法格式，在  `&#123;&#123;&#125;&#125;</code> 内可以进行 <strong>变量输出</strong> 或 <strong>循环数组</strong> 等操作，这种  <code>&#123;&#123;&#125;&#125;`  语法在 art-template 中被称为标准语法#### 输出![](https://cdn.jsdelivr.net/gh/weihaha6089/Images/输出.png)在 `&#123;&#123;&#125;&#125;</code> 语法中，可以进行 <strong>变量</strong> 的输出，<strong>对象属性</strong>的输出，<strong>三元表达式</strong>输出，<strong>逻辑或</strong>输出，<strong>加减乘除等表达式</strong>输出</p><h4 id="原文输出"><a href="#原文输出" class="headerlink" title="原文输出"></a>原文输出</h4><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%8E%9F%E6%96%87%E8%BE%93%E5%87%BA.png"></p><p>如果输出的 value 值中，包含了 HTML 标签结构，则需要使用<strong>原文输出</strong>语法，才能保证HTML标签被正常渲染</p><h4 id="条件输出"><a href="#条件输出" class="headerlink" title="条件输出"></a>条件输出</h4><p>如果要实现条件输出，则可以在 <code>&#123;&#123;&#125;&#125;` 中使用 if...else if.../if 的方式，进行按需输出![](https://cdn.jsdelivr.net/gh/weihaha6089/Images/条件输出.png)#### 循环输出如果要实现循环输出，则可以在`&#123;&#123;&#125;&#125;</code> 内，通过 each 语法循环数组，当前循环的索引使用 <code>$index</code> 进行访问，当前循环项使用 <code>$value</code> 进行访问</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%BE%AA%E7%8E%AF%E8%BE%93%E5%87%BA.png"></p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%BF%87%E6%BB%A4%E5%99%A8.png"></p><p>过滤器本质就是一个 <code>function</code> 函数</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AF%AD%E6%B3%95.png"></p><p>过滤器语法类似于 <strong>管道操作符</strong>，它的上一个<strong>输出</strong>作为下一个<strong>输入</strong></p><p>定义过滤器的基本语法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%BF%87%E6%BB%A4%E5%99%A8%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89.png"></p><h5 id="案例-格式化时间过滤器"><a href="#案例-格式化时间过滤器" class="headerlink" title="案例-格式化时间过滤器"></a>案例-格式化时间过滤器</h5><ul><li><p>定义数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">regTime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;</span><br></pre></td></tr></table></figure></li><li><p>定义过滤器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义处理时间的过滤器</span></span><br><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">dateFormat</span> = <span class="keyword">function</span> (<span class="params">date</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>()</span><br><span class="line">      <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">      <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> y + <span class="string">&#x27;-&#x27;</span> + m + <span class="string">&#x27;-&#x27;</span> + d    <span class="comment">//一定要写return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在模板引擎中使用过滤器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl-user&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">regTime</span> | dateFormat&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="案例-新闻列表"><a href="#案例-新闻列表" class="headerlink" title="案例-新闻列表"></a>案例-新闻列表</h1><h2 id="UI效果"><a href="#UI效果" class="headerlink" title="UI效果"></a><code>UI</code>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%96%B0%E9%97%BB%E5%88%97%E8%A1%A8UI%E6%95%88%E6%9E%9C.png"></p><h2 id="获取新"><a href="#获取新" class="headerlink" title="获取新"></a>获取新</h2><h2 id="获取新闻列表数据"><a href="#获取新闻列表数据" class="headerlink" title="获取新闻列表数据"></a>获取新闻列表数据</h2><ul><li>定义函数，获取新闻列表数据 <code>getNewsList()</code></li><li>查阅接口文档，关注 请求<code>url</code>，请求方式，请求参数，响应数据</li><li>利用 <code>$.get()</code> 发起请求</li><li>在回调函数中，判断请求是否成功</li></ul><h2 id="定义新闻列表item模板"><a href="#定义新闻列表item模板" class="headerlink" title="定义新闻列表item模板"></a>定义新闻列表<code>item</code>模板</h2><ul><li>创建 script 标签，更改type属性值为 <code>text/html</code>，给模板定义id</li><li>找到静态页面中 item 的结构，拷贝到模板里面</li></ul><h2 id="编译模板渲染结构"><a href="#编译模板渲染结构" class="headerlink" title="编译模板渲染结构"></a>编译模板渲染结构</h2><ul><li>在请求成功的回调里面，先对返回数据进行改造，里面返回的 <code>tags</code> 是一个字符串，我们需要分割成数组</li><li>调用 <code>template()</code> 方法，传入<code>id</code>和返回的数据</li><li>把函数的返回值添加到页面容器中</li><li>在模板中利用 <code>each</code> 遍历列表</li><li>利用 <code>$value</code> 能够拿到每一个<code>item</code>项</li><li>设置图片 <code>img</code>，<strong>注意：</strong>需要拼接请求根路径</li><li>设置标题 <code>title</code></li><li>设置标签，注意：标签在之前改造成数组了，这里又需要进行遍历</li><li>设置来源 <code>source</code></li><li>设置时间，注意：时间需要格式化，利用过滤器来实现</li><li>设置评论数 <code>cmtcount</code></li></ul><p><strong>模板代码</strong></p><p>**</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl-news&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   </span><span class="template-variable">&#123;&#123;<span class="name"><span class="built_in">each</span></span> data&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-item&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;thumb&quot;</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">&#x27;http://www.liulongbin.top:3006&#x27;</span> + $value.img&#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-box&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.title</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         </span><span class="template-variable">&#123;&#123;<span class="name"><span class="built_in">each</span></span> $value.tags&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">each</span></span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.source</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value.time</span> | dateFormat&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">         <span class="tag">&lt;<span class="name">span</span>&gt;</span>评论数：</span><span class="template-variable">&#123;&#123;<span class="name">$value.cmtcount</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">   </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">each</span></span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>js</code>代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 给时间补零的函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">padZero</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> + n</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义格式化时间的过滤器</span></span><br><span class="line">  template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">dateFormat</span> = <span class="keyword">function</span> (<span class="params">dtStr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dtStr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">    <span class="keyword">var</span> m = <span class="title function_">padZero</span>(dt.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">var</span> d = <span class="title function_">padZero</span>(dt.<span class="title function_">getDate</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hh = <span class="title function_">padZero</span>(dt.<span class="title function_">getHours</span>())</span><br><span class="line">    <span class="keyword">var</span> mm = <span class="title function_">padZero</span>(dt.<span class="title function_">getMinutes</span>())</span><br><span class="line">    <span class="keyword">var</span> ss = <span class="title function_">padZero</span>(dt.<span class="title function_">getSeconds</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">&#x27;-&#x27;</span> + m + <span class="string">&#x27;-&#x27;</span> + d + <span class="string">&#x27; &#x27;</span> + hh + <span class="string">&#x27;:&#x27;</span> + mm + <span class="string">&#x27;:&#x27;</span> + ss</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取新闻列表的函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getNewsList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/news&#x27;</span>, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;获取新闻列表数据失败！&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; res.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 把每一项的 tags 属性，从字符串改造成字符串的数组</span></span><br><span class="line">        res.<span class="property">data</span>[i].<span class="property">tags</span> = res.<span class="property">data</span>[i].<span class="property">tags</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      <span class="keyword">var</span> htmlStr = <span class="title function_">template</span>(<span class="string">&#x27;tpl-news&#x27;</span>, res)</span><br><span class="line">      $(<span class="string">&#x27;#news-list&#x27;</span>).<span class="title function_">html</span>(htmlStr)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getNewsList</span>()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="模板引擎的实现原理-⭐⭐"><a href="#模板引擎的实现原理-⭐⭐" class="headerlink" title="模板引擎的实现原理(⭐⭐)"></a>模板引擎的实现原理(⭐⭐)</h1><p>正则与字符串操作</p><h3 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h3><p><code>exec()</code> 函数用于 <strong>检索字符串</strong> 中的正在表达式的匹配</p><p>如果字符串中又匹配的值，<strong>则返回该匹配值</strong>，<u>否则返回 <strong>null</strong></u></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/exec.png"></p><p>示例代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/exec%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.png"></p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>正则表达式中 （） 包起来的内容表示一个分组，可以通过分组来 <strong>提取自己想要的内容</strong>，示例代码如下</p><p>  ::cat:  （   /  /  双斜杠里面的所有内容都是正则表达式，都是匹配格式的一部分，包括 <code>&#123;&#123;&#125;&#125;` 模版引擎       )![](https://cdn.jsdelivr.net/gh/weihaha6089/Images/分组.png)### 字符串的 replace 函数replace() 函数用于在字符串中 用一些字符 替换 另一些字符的![](https://cdn.jsdelivr.net/gh/weihaha6089/Images/字符串replace.png)示例代码：![](https://cdn.jsdelivr.net/gh/weihaha6089/Images/字符串replace代码.png)- patternResult[0]  是我们 正则表达式匹配到的值  `&#123;&#123;name&#125;&#125;</code>  包含花括号</p><ul><li>patternResult[1] 是我们用()分组得到的值   name</li><li>正则表达式里面不要轻易加空格</li></ul><h4 id="多次replace"><a href="#多次replace" class="headerlink" title="多次replace"></a>多次replace</h4><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%A4%9A%E6%AC%A1replace.png"></p><h4 id="使用循环来replace"><a href="#使用循环来replace" class="headerlink" title="使用循环来replace"></a>使用循环来replace</h4><p>因为用户输入的字符串长度不确定，我们replace次数不确定，所以我们可以利用while循环来进行</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/while%E5%BE%AA%E7%8E%AF%E6%9D%A5replace.png"></p><h4 id="替换成真实内容"><a href="#替换成真实内容" class="headerlink" title="替换成真实内容"></a>替换成真实内容</h4><h2 id="实现简易的模板引擎"><a href="#实现简易的模板引擎" class="headerlink" title="实现简易的模板引擎"></a>实现简易的模板引擎</h2><ul><li><p>定义模板结构</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%A8%A1%E6%9D%BF%E7%BB%93%E6%9E%84.png"></p></li><li><p>预调用模板引擎</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E9%A2%84%E8%B0%83%E7%94%A8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png"></p></li><li><p>封装 template 函数</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%B0%81%E8%A3%85template%E5%87%BD%E6%95%B0.png"></p></li><li><p>导入并使用自定义的模板引擎</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;能够说出form表单的常用属性&lt;/li&gt;
&lt;li&gt;能够知道如何阻止表单的默认提交行为&lt;/li&gt;
&lt;li&gt;能够知道如何使用&lt;code&gt;jQuery&lt;/code&gt;快速获取表单数据&lt;/li&gt;
&lt;li&gt;能够知道如何安装和使用模板引擎&lt;/li&gt;
&lt;li&gt;能够知道模板引擎的实现原理&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="ajax-01" scheme="http://example.com/tags/ajax-01/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝</title>
    <link href="http://example.com/2022/05/20/04%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>http://example.com/2022/05/20/04%E6%B7%B1%E6%8B%B7%E8%B4%9D/</id>
    <published>2022-05-19T16:39:32.066Z</published>
    <updated>2022-05-20T00:30:10.225Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">        <span class="attr">msg</span>: &#123;</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newobj, oldobj</span>) &#123;</span><br><span class="line">      <span class="comment">// 对oldobj进行操作</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(oldobj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 1.获取属性值</span></span><br><span class="line">          <span class="keyword">let</span> item = oldobj[key]</span><br><span class="line">          <span class="comment">// 2.判断是不是数组</span></span><br><span class="line">          <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">              newobj[key] = []</span><br><span class="line">              <span class="title function_">deepCopy</span>(newobj[key], item)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 3.判断是不是对象</span></span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">              newobj[key] = &#123;&#125;</span><br><span class="line">              <span class="title function_">deepCopy</span>(newobj[key], item)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 4.判断是不是基本数据类型</span></span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">              newobj[key] = item</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newobj1 = &#123;&#125;</span><br><span class="line">  <span class="title function_">deepCopy</span>(newobj1, obj)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newobj1)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;andy&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;msg&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;pink&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="深拷贝" scheme="http://example.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>js高级必背</title>
    <link href="http://example.com/2022/05/19/02-js%E9%AB%98%E7%BA%A7%E5%BF%85%E8%83%8C/"/>
    <id>http://example.com/2022/05/19/02-js%E9%AB%98%E7%BA%A7%E5%BF%85%E8%83%8C/</id>
    <published>2022-05-19T15:52:34.679Z</published>
    <updated>2022-05-26T11:53:30.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-new-在执行时做的4件事"><a href="#一-new-在执行时做的4件事" class="headerlink" title="一. new 在执行时做的4件事"></a>一. new 在执行时做的4件事</h1><ol><li>在内存中创建一个新的空对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（构造函数里不需要return）<span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name,sex) &#123; <span class="comment">// class Person</span></span><br><span class="line">  <span class="comment">// var this = new Object()</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lbw = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lbw&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="二-构造函数"><a href="#二-构造函数" class="headerlink" title="二. 构造函数"></a>二. 构造函数</h1><h2 id="2-1-静态方法-属性-实例方法-属性"><a href="#2-1-静态方法-属性-实例方法-属性" class="headerlink" title="2.1 静态方法/属性 - 实例方法/属性"></a>2.1 静态方法/属性 - 实例方法/属性</h2><ul><li>实例成员只能通过实例化的对象来访问， 不可以通过构造函数来访问</li><li>静态成员只能通过构造函数来访问，不能通过对象来访问</li></ul><h2 id="2-2-构造函数原型prototype"><a href="#2-2-构造函数原型prototype" class="headerlink" title="2.2 构造函数原型prototype"></a>2.2 构造函数原型prototype</h2><h3 id="2-2-1-prototype的作用"><a href="#2-2-1-prototype的作用" class="headerlink" title="2.2.1 prototype的作用"></a>2.2.1 prototype的作用</h3><p>​        共享方法</p><h3 id="2-2-2-prototype的概念"><a href="#2-2-2-prototype的概念" class="headerlink" title="2.2.2 prototype的概念"></a>2.2.2 prototype的概念</h3><p>​        JavaScript 规定，<strong>每一个构造函数都有一个<code>prototype</code> 属性</strong>，指向另一个对象。注意这个<code>prototype</code>就是一个对象，<strong>这个对象的所有属性和方法，都会被<font color="red">构造函数</font>所拥有。</strong></p><blockquote><p>补充： 将构造函数中恒定的方法放到它的<code>prototype</code>原型对象中， 减少每次实例化对象时的内存消耗</p></blockquote><h2 id="2-3-构造函数的写法"><a href="#2-3-构造函数的写法" class="headerlink" title="2.3 构造函数的写法"></a>2.3 构造函数的写法</h2><ol><li>将公共属性定义到构造函数中</li><li>将公共方法放到它的原型对象上</li></ol><h2 id="2-4-对象原型-proto"><a href="#2-4-对象原型-proto" class="headerlink" title="2.4 对象原型 __proto__"></a>2.4 对象原型 <code>__proto__</code></h2><p>​        <strong>实例对象都会有一个属性 <code>__proto__</code> 指向构造函数的 prototype 原型对象。</strong>之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <code>__proto__</code> 原型的存在。</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/img2.png" alt="img2"></p><p>查找规则：</p><ol><li>先看实例化对象（ldh）上是否有目标方法（sing），如果有，则执行该方法</li><li>如果实例化对象（ldh）上没有该方法，因为有<code>__proto__</code>，就可以去构造函数原型对象<code>prototype</code>上去查找</li></ol><h2 id="2-5-constructor-构造函数"><a href="#2-5-constructor-构造函数" class="headerlink" title="2.5 constructor 构造函数"></a>2.5 constructor 构造函数</h2><h3 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h3><p>​        构造函数原型对象（prototype）里面有一个 constructor 属性 ，constructor 我们称为构造函数，因为<strong>它指回构造函数本身。</strong>主要用于记录该对象引用于哪个构造函数。</p><h2 id="2-6-构造函数、实例化对象，原型对象的关系-★★★★★-面试必背-500RMB"><a href="#2-6-构造函数、实例化对象，原型对象的关系-★★★★★-面试必背-500RMB" class="headerlink" title="2.6 构造函数、实例化对象，原型对象的关系(★★★★★ - 面试必背 500RMB)"></a>2.6 构造函数、实例化对象，原型对象的关系(★★★★★ - 面试必背 500RMB)</h2><ol><li>构造函数的<code>prototype</code>属性指向了构造函数原型对象<code>prototype</code></li><li>实例对象是由构造函数创建的,实例对象的<code>__proto__</code>属性指向了构造函数的原型对象</li><li>构造函数的原型对象的constructor属性指向了构造函数,实例对象的原型的constructor属性也指向了构造函数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/image-20220420103120962.png" alt="image-20220420103120962"></p><h2 id="2-7-原型链"><a href="#2-7-原型链" class="headerlink" title="2.7 原型链"></a>2.7 原型链</h2><p><font color="red">每一个实例对象都有一个<code>__proto__</code>属性，指向的构造函数的原型对象<code>prototype</code>，构造函数的原型对象<code>prototype</code>也是一个对象，也有<code>__proto__</code>属性，这样一层一层往上找直到找到<code>Object</code>的<code>prototype</code>，他的<code>__proto__</code>值为<code>null</code>，这就是原型链。</font></p><h2 id="2-7-1-原型链上的成员查找机制"><a href="#2-7-1-原型链上的成员查找机制" class="headerlink" title="2.7.1 原型链上的成员查找机制"></a>2.7.1 原型链上的成员查找机制</h2><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型（也就是 <code>__proto__</code>指向的 prototype 原型对象）。</li><li>如果还没有就查找原型对象的原型（Object的原型对象prototype）。</li><li>依此类推一直找到 Object 的prototype 为止，它的<code>__proto__</code>为（null）。</li></ol><h2 id="2-8-原型对象的this指向"><a href="#2-8-原型对象的this指向" class="headerlink" title="2.8 原型对象的this指向"></a>2.8 原型对象的this指向</h2><p><strong>构造函数</strong>中的this和<strong>原型对象</strong>的this，<strong>都</strong>指向我们new出来的实例对象</p><h2 id="三-call-apply-bind-三种改变this指向方法的总结"><a href="#三-call-apply-bind-三种改变this指向方法的总结" class="headerlink" title="三 . call() , apply(), bind() 三种改变this指向方法的总结"></a>三 . call() , apply(), bind() 三种改变this指向方法的总结</h2><ul><li><strong>共同点：</strong> 都可以改变this指向</li></ul><ul><li><strong>不同点:</strong><ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向</li><li>call 和 apply传递的参数不一样, call传递参数使用逗号隔开, apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向</li></ul></li></ul><ul><li><strong>应用场景</strong><ol><li>call 经常做继承. </li><li>apply经常跟数组有关系，比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向，比如改变定时器内部的this指向</li></ol></li></ul><h2 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4. 闭包"></a>4. 闭包</h2><p><strong>4.1 闭包的概念</strong></p><p>函数嵌套函数， 有一个函数可以访问另一个函数的局部变量</p><p><strong>4.2 闭包的作用</strong></p><p>延伸变量的作用范围</p><p><strong>特点：</strong>闭包函数执行完成后不会立即销毁，依然会占内存（这也是闭包的一个性能问题）</p><h3 id="5-递归（笔试必会）"><a href="#5-递归（笔试必会）" class="headerlink" title="5 - 递归（笔试必会）"></a>5 - 递归（笔试必会）</h3><p><strong>递归：</strong>如果一个函数在<strong>内部可以调用其本身</strong>，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><p><strong><font color="red">注意：</font>递归函数的作用和循环效果一样</strong>，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件return。</p><h1 id="7-浅拷贝和深拷贝"><a href="#7-浅拷贝和深拷贝" class="headerlink" title="7 - 浅拷贝和深拷贝"></a>7 - 浅拷贝和深拷贝</h1><blockquote><ol><li>浅拷贝只能拷贝一程，更深层次的对象级别只能拷贝引用地址</li><li>深拷贝拷贝多层，每一层的数据都会拷贝</li><li>ES6新增浅拷贝语法糖，Object.assign(newData, oldData)</li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一-new-在执行时做的4件事&quot;&gt;&lt;a href=&quot;#一-new-在执行时做的4件事&quot; class=&quot;headerlink&quot; title=&quot;一. new 在执行时做的4件事&quot;&gt;&lt;/a&gt;一. new 在执行时做的4件事&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在内存中创建一个新的空对象&lt;/li&gt;
&lt;li&gt;让this指向这个新的对象&lt;/li&gt;
&lt;li&gt;执行构造函数里面的代码，给这个新对象添加属性和方法&lt;/li&gt;
&lt;li&gt;返回这个新对象（构造函数里不需要return）&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
    <category term="js高级必背" scheme="http://example.com/tags/js%E9%AB%98%E7%BA%A7%E5%BF%85%E8%83%8C/"/>
    
  </entry>
  
  <entry>
    <title>ajax-01</title>
    <link href="http://example.com/2022/05/19/08-ajax-01/"/>
    <id>http://example.com/2022/05/19/08-ajax-01/</id>
    <published>2022-05-19T15:10:17.737Z</published>
    <updated>2022-05-26T11:53:18.819Z</updated>
    
    <content type="html"><![CDATA[<ul><li>能够知道和服务器相关的基本概念</li><li>能够知道客户端和服务器通信的过程</li><li>能够知道数据也是一种资源</li><li>能够说出什么是<code>Ajax</code>以及应用场景</li><li>能够使用<code>jQuery</code>中的<code>Ajax</code>函数请求数据</li><li>能够知道接口和接口文档的概念<span id="more"></span><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1></li></ul><h2 id="客户端与服务器（⭐⭐⭐）"><a href="#客户端与服务器（⭐⭐⭐）" class="headerlink" title="客户端与服务器（⭐⭐⭐）"></a>客户端与服务器（⭐⭐⭐）</h2><h3 id="上网的目的"><a href="#上网的目的" class="headerlink" title="上网的目的"></a>上网的目的</h3><p>上网的<strong>本质目的：</strong>通过互联网的形式来 <strong>获取和消费资源</strong></p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>上网过程中，负责 <strong>存放和对外提供资源</strong> 的电脑，叫做服务器</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E4%B8%8A%E7%BD%91%E7%9B%AE%E7%9A%84.png" alt="上网目的"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>在上网过程中，负责 <strong>获取和消费资源</strong> 的电脑，叫做客户端</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%AE%A2%E6%88%B7%E7%AB%AF.png" alt="客户端"></p><h2 id="URL地址的概念-amp-组成"><a href="#URL地址的概念-amp-组成" class="headerlink" title="URL地址的概念&amp;组成"></a>URL地址的概念&amp;组成</h2><h3 id="URL的概念"><a href="#URL的概念" class="headerlink" title="URL的概念"></a>URL的概念</h3><p>URL（全称是 <code>UniformResourceLocator</code>） 中文叫 <strong>统一资源定位符</strong>，用于标识互联网上每个资源的唯一存放位置。浏览器只有通过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源</p><h3 id="URL的组成"><a href="#URL的组成" class="headerlink" title="URL的组成"></a>URL的组成</h3><p>URL地址一般由三部分组成:</p><ul><li>客户端与服务器之间的 <strong>通信协议</strong></li><li>存有该资源的 <strong>服务器名称</strong></li><li>资源在服务器上 <strong>具体的存放位置</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/URL%E7%BB%84%E6%88%90.png" alt="URL组成"></p><h2 id="客户端与服务器通讯过程（⭐⭐⭐）"><a href="#客户端与服务器通讯过程（⭐⭐⭐）" class="headerlink" title="客户端与服务器通讯过程（⭐⭐⭐）"></a>客户端与服务器通讯过程（⭐⭐⭐）</h2><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%A6%82%E4%BD%95%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png" alt="如何请求数据"></p><p><strong>注意：</strong></p><ul><li>客户端与服务器之间的通讯过程，分为： <strong>请求-处理-响应</strong> 三个步骤</li><li>网页中每一个资源，都是通过 <strong>请求-处理-响应</strong> 的方式从服务器获取回来的</li></ul><h2 id="基于浏览器工具分析通讯过程"><a href="#基于浏览器工具分析通讯过程" class="headerlink" title="基于浏览器工具分析通讯过程"></a>基于浏览器工具分析通讯过程</h2><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%B7%A5%E5%85%B7%E6%9D%A5%E5%88%86%E6%9E%90%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png" alt="工具来分析通讯过程"></p><p><strong>步骤：</strong></p><ul><li>打开<code>Chorme</code>浏览器</li><li><code>Ctrl + Shift + I（F12）</code> 打开 Chrome 的开发者工具</li><li>切换到 <code>Network</code> 面板</li><li>选中<code>Doc</code> 页签</li><li>刷新页面，分析客户端与服务器的通讯过程</li></ul><h2 id="服务器对外提供的资源"><a href="#服务器对外提供的资源" class="headerlink" title="服务器对外提供的资源"></a>服务器对外提供的资源</h2><h3 id="常见资源"><a href="#常见资源" class="headerlink" title="常见资源"></a>常见资源</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B5%84%E6%BA%90.png" alt="对外提供的资源"></p><h3 id="数据也是资源（⭐⭐⭐）"><a href="#数据也是资源（⭐⭐⭐）" class="headerlink" title="数据也是资源（⭐⭐⭐）"></a>数据也是资源（⭐⭐⭐）</h3><p><strong>网页中的数据，也是服务器对外提供的一种资源</strong>，例如股票数据，各行业排行榜等</p><h2 id="网页中如何请求数据"><a href="#网页中如何请求数据" class="headerlink" title="网页中如何请求数据"></a>网页中如何请求数据</h2><blockquote><p>数据，也是服务器对外提供的一种 资源，只要是资源，必然要通过 请求 - 处理 - 响应 的方式进行获取</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/2022-05-19_230420.png" alt="2022-05-19_230420"></p><p>如果要在网页中请求服务器上的数据资源，需要用到 <code>XMLHttpRequest</code> 对象</p><p><code>XMLHttpRequest</code>（简称 <code>xhr</code>）是浏览器提供的<code>JS</code>成员，通过它，可以请求服务器上的数据资源</p><p>最简单的用法 <code>var xhrObj = new XMLHttpRequest()</code></p><h2 id="资源的请求方式（⭐⭐⭐）"><a href="#资源的请求方式（⭐⭐⭐）" class="headerlink" title="资源的请求方式（⭐⭐⭐）"></a>资源的请求方式（⭐⭐⭐）</h2><p>客户端请求服务器时，请求的方式 <strong>有很多种</strong>，最常见的两种请求方式分别是 <code>get</code> 和 <code>post</code> 请求</p><ul><li><p><code>get 请求</code>，通常用于 <strong>获取服务器资源</strong>（要资源）</p><p>例如：根据 <code>URL</code> 地址，从服务器获取 <code>HTML</code>文件、<code>css</code>文件、<code>js</code>文件、图片文件、数据资源等</p></li><li><p><code>post 请求</code>，通常用于 <strong>向服务器提交数据</strong>（送资源）</p><p>例如：登录时，向服务器 <strong>提交登录信息</strong>、注册时向服务器 <strong>提交注册信息</strong>、添加用户时向服务器 <strong>提交用户信息</strong>等各种 <strong>数据提交操作</strong></p></li></ul><h1 id="了解Ajax"><a href="#了解Ajax" class="headerlink" title="了解Ajax"></a>了解<code>Ajax</code></h1><h2 id="什么是Ajax（⭐⭐⭐）"><a href="#什么是Ajax（⭐⭐⭐）" class="headerlink" title="什么是Ajax（⭐⭐⭐）"></a>什么是<code>Ajax</code>（⭐⭐⭐）</h2><p><code>Ajax</code> 的全称是 <code>Asynchronous JavaScript And XML</code>（异步 <code>JavaScript</code> 和 <code>xml</code>）</p><p>通俗理解：在网页中利用 <code>XMLHttpRequest</code> 对象和服务器进行数据交互的方式，就是<code>Ajax</code></p><h2 id="为什么要学Ajax"><a href="#为什么要学Ajax" class="headerlink" title="为什么要学Ajax"></a>为什么要学<code>Ajax</code></h2><p>之前所学的技术，只能把网页做的更美观漂亮，或添加一些动画效果，但还是，<code>Ajax</code>能让我们轻松实现 <strong>网页</strong> 与 <strong>服务器</strong>之间的 <strong>数据交互</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0ajax.png"></p><h2 id="Ajax应该用场景（⭐⭐⭐）"><a href="#Ajax应该用场景（⭐⭐⭐）" class="headerlink" title="Ajax应该用场景（⭐⭐⭐）"></a><code>Ajax</code>应该用场景（⭐⭐⭐）</h2><h4 id="场景一：用户名检测"><a href="#场景一：用户名检测" class="headerlink" title="场景一：用户名检测"></a>场景一：用户名检测</h4><p>注册用户时，通过 <code>ajax</code> 的形式，动态 <strong>检测用户名是否被占用</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt="ajax应用场景"></p><h4 id="场景二：搜索提示"><a href="#场景二：搜索提示" class="headerlink" title="场景二：搜索提示"></a>场景二：搜索提示</h4><p>当输入搜索关键字时，通过 <code>ajax</code> 的形式，动态 <strong>加载搜索提示列表</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-02.png" alt="ajax应用场景-02"></p><h4 id="场景三：数据分页显示"><a href="#场景三：数据分页显示" class="headerlink" title="场景三：数据分页显示"></a>场景三：数据分页显示</h4><p>当点击页码值得时候，通过 <code>ajax</code> 的形式，<strong>根据页码值动态刷新表格的数据</strong></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-03.png"></p><h4 id="场景四：数据的增删改查"><a href="#场景四：数据的增删改查" class="headerlink" title="场景四：数据的增删改查"></a>场景四：数据的增删改查</h4><p>数据的添加、删除、修改、查询操作，都需要通过 <code>ajax</code> 的形式，来实现数据的交互<br><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-04.png"></p><h1 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a><code>jQuery</code>中的Ajax</h1><p>浏览器中提供的 <code>XMLHttpRequest</code> 用法比较复杂，所以 <code>jQuery</code> 对 <code>XMLHttpRequest</code> 进行了封装，提供了一系列Ajax相关的函数，极大地 <strong>降低了Ajax的使用难度</strong></p><p><code>jQuery</code>中发起 Ajax 请求最常用的三个方法如下：</p><ul><li><code>$.get()</code> get方式请求，用于获取数据</li><li><code>$.post()</code> post方式请求，用于提交数据</li><li><code>$.ajax()</code> 比较综合，既可以获取数据，又可以提交数据</li></ul><h2 id="get-函数介绍（⭐⭐）"><a href="#get-函数介绍（⭐⭐）" class="headerlink" title="$.get() 函数介绍（⭐⭐）"></a>$.get() 函数介绍（⭐⭐）</h2><p><code>jQuery</code> 中 <code>$.get()</code> 函数的功能单一，专门用来发起 <code>get</code> 请求，从而将服务器上的资源请求到客户端来进行使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png"></p><h3 id="get-发起不带参数的请求"><a href="#get-发起不带参数的请求" class="headerlink" title="$.get()发起不带参数的请求"></a>$.get()发起不带参数的请求</h3><p>使用 $.get() 函数 发起不带参数的请求时，直接提供给 <strong>请求的 URL 地址</strong> 和 <strong>请求成功之后的回调函数</strong> 即可，示例代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E8%AF%B7%E6%B1%82%E4%B8%8D%E5%B8%A6%E5%8F%82%E6%95%B0.png"></p><h3 id="get-发起携带参数的请求"><a href="#get-发起携带参数的请求" class="headerlink" title="$.get()发起携带参数的请求"></a>$.get()发起携带参数的请求</h3><p>使用<code>$.get()</code> 发起携带参数的请求，那么携带的参数应该写在第二个参数的位置，示例代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0.png"></p><h2 id="post-函数介绍（⭐⭐）"><a href="#post-函数介绍（⭐⭐）" class="headerlink" title="$.post() 函数介绍（⭐⭐）"></a>$.post() 函数介绍（⭐⭐）</h2><p><code>jQuery</code> 中 <code>$.post()</code> 函数的功能单一，专门用来发起<code>post</code>请求，从而向服务器提交数据</p><p><code>$.post()</code> 函数的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><p>参数各自代表的含义如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/post%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png"></p><h3 id="post-向服务器提交数据"><a href="#post-向服务器提交数据" class="headerlink" title="$.post() 向服务器提交数据"></a>$.post() 向服务器提交数据</h3><p>使用 <code>$.post()</code> 向服务器提交数据的示例代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/post%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png"></p><h2 id="ajax-函数介绍（⭐⭐⭐）"><a href="#ajax-函数介绍（⭐⭐⭐）" class="headerlink" title="$.ajax() 函数介绍（⭐⭐⭐）"></a><code>$.ajax()</code> 函数介绍（⭐⭐⭐）</h2><p>相比于 <code>$.get()</code> 和 <code>$.post()</code> 函数，<code>jQuery</code> 中提供的 <code>$.ajax()</code> 函数，是一个功能比较综合的函数，它允许我们对 <code>Ajax</code> 请求进行更详细的配置。</p><p><code>$.ajax()</code> 函数的基本语法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E8%AF%AD%E6%B3%95%E5%8F%82%E6%95%B0.png"></p><h3 id="ajax-发起-get-请求"><a href="#ajax-发起-get-请求" class="headerlink" title="$.ajax() 发起 get 请求"></a><code>$.ajax()</code> 发起 get 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>GET</code> 请求时，只需要将 <code>type</code> 属性 的值设置为 ‘<code>GET</code>’ 即可：</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%8F%91%E8%B5%B7get%E8%AF%B7%E6%B1%82.png"></p><h3 id="ajax-发起-post-请求"><a href="#ajax-发起-post-请求" class="headerlink" title="$.ajax 发起 post 请求"></a><code>$.ajax</code> 发起 post 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>post</code>请求，只需要把 <code>type</code>属性的值 设置为 ‘<code>post</code>’ 即可</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/ajax%E5%8F%91%E8%B5%B7post%E8%AF%B7%E6%B1%82.png"></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口的概念（⭐⭐⭐）"><a href="#接口的概念（⭐⭐⭐）" class="headerlink" title="接口的概念（⭐⭐⭐）"></a>接口的概念（⭐⭐⭐）</h2><p>使用 <code>Ajax</code> 请求数据时，被请求的 <code>URL</code> 地址，就叫做 数据接口（简称<strong>接口</strong>）。同时，每个接口必须有请求方式。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.liulongbin.top:<span class="number">3006</span><span class="regexp">/api/g</span>etbooks 获取图书列表的接口（get请求）</span><br><span class="line">http:<span class="regexp">//</span>www.liulongbin.top:<span class="number">3006</span><span class="regexp">/api/</span>addbook  添加图书的接口（post请求）</span><br></pre></td></tr></table></figure><h2 id="接口的请求过程"><a href="#接口的请求过程" class="headerlink" title="接口的请求过程"></a>接口的请求过程</h2><h3 id="GET方式请求接口的过程"><a href="#GET方式请求接口的过程" class="headerlink" title="GET方式请求接口的过程"></a>GET方式请求接口的过程</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/get%E6%96%B9%E5%BC%8F%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%87%E7%A8%8B.png"></p><h3 id="POST方式请求接口的过程"><a href="#POST方式请求接口的过程" class="headerlink" title="POST方式请求接口的过程"></a>POST方式请求接口的过程</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/post%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%87%E7%A8%8B.png"></p><h2 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h2><h3 id="什么是接口测试工具"><a href="#什么是接口测试工具" class="headerlink" title="什么是接口测试工具"></a>什么是接口测试工具</h3><p>为了验证接口是否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测</p><p><strong>好处：</strong>接口测试工具能让我们在 <strong>不写任何代码</strong> 的情况下，对接口进行 <strong>调用</strong> 和 <strong>测试</strong></p><p>常用的就是：<a href="https://www.getpostman.com/downloads/">PostMan</a></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/postMan.png"></p><h3 id="了解-Postman-界面结构"><a href="#了解-Postman-界面结构" class="headerlink" title="了解 Postman 界面结构"></a>了解 Postman 界面结构</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/Postman%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D.png"></p><h3 id="使用PostMan测试GET接口"><a href="#使用PostMan测试GET接口" class="headerlink" title="使用PostMan测试GET接口"></a>使用<code>PostMan</code>测试GET接口</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/Postman%E6%B5%8B%E8%AF%95get%E8%AF%B7%E6%B1%82.png"></p><h3 id="使用PostMan测试POST接口"><a href="#使用PostMan测试POST接口" class="headerlink" title="使用PostMan测试POST接口"></a>使用<code>PostMan</code>测试POST接口</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/Postman%E6%B5%8B%E8%AF%95post%E8%AF%B7%E6%B1%82.png"></p><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><h3 id="什么是接口文档（⭐⭐⭐）"><a href="#什么是接口文档（⭐⭐⭐）" class="headerlink" title="什么是接口文档（⭐⭐⭐）"></a>什么是接口文档（⭐⭐⭐）</h3><p>接口文档，顾名思义就是 <strong>接口的说明文档</strong>，<strong>它是我们调用接口的依据</strong>。好的接口文档包含了对 <strong>接口URL</strong>，<strong>参数</strong> 以及 <strong>输出内容</strong> 的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用</p><h3 id="接口文档的组成部分"><a href="#接口文档的组成部分" class="headerlink" title="接口文档的组成部分"></a>接口文档的组成部分</h3><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><ul><li><strong>接口名称：</strong>用来标识各个接口的简单说明，如 <strong>登录接口</strong>，<strong>获取图书列表接口</strong>等</li><li><strong>接口URL：</strong>接口的调用地址</li><li><strong>调用方式：</strong>接口的调用方式，如 <strong>GET</strong> 或者 <strong>POST</strong></li><li><strong>参数格式：</strong>接口需要传递的参数，每个参数必须包含 <strong>参数名称</strong>、<strong>参数类型</strong>、<strong>是否必选</strong>、<strong>参数说明</strong> 这4项内容</li><li><strong>响应格式：</strong>接口的返回值的详细描述，一般包含<strong>数据名称</strong>、<strong>数据类型</strong>、<strong>说明</strong>3项内容</li><li><strong>返回示例（可选）：</strong>通过对象的形式，列举服务器返回数据的结构</li></ul><h3 id="接口文档示例"><a href="#接口文档示例" class="headerlink" title="接口文档示例"></a>接口文档示例</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%93%8D%E5%BA%94%E7%A4%BA%E4%BE%8B.png"></p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%BF%94%E5%9B%9E%E7%A4%BA%E4%BE%8B.png"></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="图书管理"><a href="#图书管理" class="headerlink" title="图书管理"></a>图书管理</h2><h3 id="项目效果"><a href="#项目效果" class="headerlink" title="项目效果"></a>项目效果</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E6%95%88%E6%9E%9C%E5%9B%BE.png"></p><h3 id="UI界面搭建"><a href="#UI界面搭建" class="headerlink" title="UI界面搭建"></a><code>UI</code>界面搭建</h3><p><strong>需要使用到的库和插件</strong></p><ul><li>用到的 <code>css</code> 库 <code>bootstrap.css</code></li><li>用到的 <code>javascript</code> 库 <code>jquery.js</code></li><li>用到 <code>vs code</code> 插件 <code>Bootstrap 3 Snippets</code></li></ul><p><strong>搭建步骤</strong></p><ul><li>Panel面板搭建<ul><li>创建panel板 （快捷键：<code>bs3-panel:primary</code>）</li><li>在 <code>panel-body</code> 里面，创建3个对应的输入框 （快捷键：<code>bs3-input:addon:text</code>），对应修改标题</li><li>在 <code>panel-body</code> 最后面，创建 <code>button</code>按钮 （快捷键：<code>bs3-button:primary</code>）,修改内容</li></ul></li><li>图书的表格<ul><li>创建 table（快捷键：<code>bs3-table:bordered</code>）</li><li>在里面创建对应5个<code>td</code>，填写里面内容</li></ul></li></ul><h3 id="获取图书列表数据"><a href="#获取图书列表数据" class="headerlink" title="获取图书列表数据"></a>获取图书列表数据</h3><p><strong>步骤：</strong></p><ul><li>查阅资料中的接口文档，找到获取图书列表的接口</li><li>定义 script 标签，创建入口函数</li><li>利用 $.get() 方法，传入相应的<code>url</code>，和成功之后的回调函数</li><li>在回调函数中获取到请求成功的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取图书列表数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBookList</span>(<span class="params"></span>) &#123;</span><br><span class="line">   $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染图书列表"><a href="#渲染图书列表" class="headerlink" title="渲染图书列表"></a>渲染图书列表</h3><p><strong>步骤：</strong></p><ul><li>根据返回状态码来判断是否成功请求到数据</li><li>创建数组，用来存放<strong>行</strong>数据（<code>rows</code>）</li><li>遍历服务器返回的数组，每遍历一次，利用数组（<code>rows</code>）去<code>push</code>  <code>&lt;tr&gt;&lt;/tr&gt;</code></li><li>每一行 <code>tr</code> 里面包含了5个<code>td</code></li><li>给每一个 <code>td</code> 设置对应内容即可</li><li>遍历循环完毕之后，找到内容容器，先清空当前内容（以免有重复数据），然后添加 <code>rows</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rows = []</span><br><span class="line">$.<span class="title function_">each</span>(res.<span class="property">data</span>, <span class="keyword">function</span>(<span class="params">i, item</span>) &#123;</span><br><span class="line">     rows.<span class="title function_">push</span>(<span class="string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">id</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">bookname</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">author</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="property">publisher</span> + <span class="string">&#x27;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;del&quot; data-id=&quot;&#x27;</span> + item.<span class="property">id</span> + <span class="string">&#x27;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;#tb&#x27;</span>).<span class="title function_">empty</span>().<span class="title function_">append</span>(rows.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="删除功能实现"><a href="#删除功能实现" class="headerlink" title="删除功能实现"></a>删除功能实现</h3><h4 id="删除链接绑定单击事件处理函数"><a href="#删除链接绑定单击事件处理函数" class="headerlink" title="删除链接绑定单击事件处理函数"></a>删除链接绑定单击事件处理函数</h4><ul><li>利用 <code>tbody</code> 容器，通过<strong>事件委派</strong>的方式，给动态创建的<code>a</code>标签绑定事件</li><li>删除图书需要通过<code>id</code>删除，所以我们需要得到对应的<code>id</code>，我们利用自定义属性的方式，传递过来相应的<code>id</code></li></ul><h4 id="删除功能实现-1"><a href="#删除功能实现-1" class="headerlink" title="删除功能实现"></a>删除功能实现</h4><ul><li>查阅<strong>删除</strong>的接口文档  （删除利用删除接口）</li><li>在a标签点击事件处理函数里面利用<code>$.get()</code>方法，请求服务器，传入要删除的对应<code>id</code></li><li>删除成功之后，调用 <code>getBookList()</code> 刷新页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.del&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> id = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-id&#x27;</span>)</span><br><span class="line">  $.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/delbook&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: id</span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;删除图书失败！&#x27;</span>)</span><br><span class="line">    <span class="title function_">getBookList</span>()</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="添加功能实现"><a href="#添加功能实现" class="headerlink" title="添加功能实现"></a>添加功能实现</h3><h4 id="添加按钮绑定点击事件"><a href="#添加按钮绑定点击事件" class="headerlink" title="添加按钮绑定点击事件"></a>添加按钮绑定点击事件</h4><ul><li>获取三个输入框的内容</li><li>判断三个输入框是否输入了内容，如果没有进行提示</li></ul><h4 id="实现图书添加功能"><a href="#实现图书添加功能" class="headerlink" title="实现图书添加功能"></a>实现图书添加功能</h4><ul><li>查阅接口文档</li><li>注意接口文档需要提交的参数名，我们需要保持一致</li><li>调用<code>$.post()</code> 方法，传入请求路径，然后组拼需要提交的参数</li><li>在成功回调里面判断返回值是否是201，如果是201代表成功，反之没有成功，进行提示</li><li>请求成功之后，调用<code>gettBookList()</code> 方法刷新页面，同时把输入框里面值清空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnAdd&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> bookname = $(<span class="string">&#x27;#iptBookname&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="keyword">var</span> author = $(<span class="string">&#x27;#iptAuthor&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="keyword">var</span> publisher = $(<span class="string">&#x27;#iptPublisher&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="keyword">if</span> (bookname.<span class="property">length</span> &lt;= <span class="number">0</span> || author.<span class="property">length</span> &lt;= <span class="number">0</span> || publisher.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;请填写完整的图书信息！&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123;</span><br><span class="line">         <span class="attr">bookname</span>: bookname,</span><br><span class="line">         <span class="attr">author</span>: author,</span><br><span class="line">         <span class="attr">publisher</span>: publisher</span><br><span class="line">     &#125;, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">201</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;添加图书失败！&#x27;</span>)</span><br><span class="line">         <span class="title function_">getBookList</span>()</span><br><span class="line">         $(<span class="string">&#x27;#iptBookname&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">         $(<span class="string">&#x27;#iptAuthor&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">         $(<span class="string">&#x27;#iptPublisher&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="聊天机器人"><a href="#聊天机器人" class="headerlink" title="聊天机器人"></a>聊天机器人</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%88%E4%BE%8B%E6%95%88%E6%9E%9C.png"></p><h3 id="实现功能点"><a href="#实现功能点" class="headerlink" title="实现功能点"></a>实现功能点</h3><ul><li>梳理案例代码结构</li><li>将用户输入的内容渲染到聊天窗口</li><li>发起请求获取聊天消息</li><li>将机器人的聊天内容转为语音</li><li>通过 <audio> 播放语音</audio></li><li>使用回车发送消息</li></ul><h3 id="梳理案例的代码结构"><a href="#梳理案例的代码结构" class="headerlink" title="梳理案例的代码结构"></a>梳理案例的代码结构</h3><ul><li><p><code>UI</code>结构梳理</p><p><img src="https://cdn.jsdelivr.net/gh/weihaha6089/Images/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BAUI%E7%BB%93%E6%9E%84.png"></p></li><li><p>业务代码抽离</p></li><li><p><code>resetui()</code> 函数作用-让聊天框区域自动滚动到底部</p></li></ul><h3 id="将用户输入的内容渲染到聊天窗口"><a href="#将用户输入的内容渲染到聊天窗口" class="headerlink" title="将用户输入的内容渲染到聊天窗口"></a>将用户输入的内容渲染到聊天窗口</h3><ul><li>为发送按钮绑定点击事件</li><li>在点击事件函数里面判断一下用户输入内容是否为空，注意：如果为空，我们清除一下输入框内容</li><li>获取到对应的<code>ul</code>容器，调用 <code>append</code> 函数来追加 <code>li</code>，注意：追加<code>li</code>的类名叫做 <code>right_word</code></li><li>清除文本输入框的值</li><li>最后调用一下 <code>resetui()</code>，让聊天框区域自动滚动到底部</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为发送按钮绑定鼠标点击事件</span></span><br><span class="line">$(<span class="string">&#x27;#btnSend&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">    <span class="keyword">if</span> (text.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果用户输入了聊天内容，则将聊天内容追加到页面上显示</span></span><br><span class="line">    $(<span class="string">&#x27;#talk_list&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;li class=&quot;right_word&quot;&gt;&lt;img src=&quot;img/person02.png&quot; /&gt; &lt;span&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment">// 重置滚动条的位置</span></span><br><span class="line">    <span class="title function_">resetui</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="发起请求获取聊天信息"><a href="#发起请求获取聊天信息" class="headerlink" title="发起请求获取聊天信息"></a>发起请求获取聊天信息</h3><ul><li>定义一个函数 <code>getMsg()</code> 接收一个参数，参数就是用户发送的信息</li><li>利用 <code>$.ajax()</code> 发送一个 GET 方式请求，传入请求地址 <code>http://ajax.frontend.itheima.net:3006/api/robot</code></li><li>定义请求数据 <code>spoken：value</code></li><li>定义<code>success</code>成功的回调，在回调函数里面判断返回数据的 <code>message</code> 是否等于 <code>success</code></li><li>给容器动态添加返回的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取聊天机器人发送回来的消息</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">getMsg</span>(<span class="params">text</span>) &#123;</span><br><span class="line">   $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/robot&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">spoken</span>: text</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">       <span class="comment">// console.log(res)</span></span><br><span class="line">       <span class="keyword">if</span> (res.<span class="property">message</span> === <span class="string">&#x27;success&#x27;</span>) &#123;</span><br><span class="line">         <span class="comment">// 接收聊天消息</span></span><br><span class="line">         <span class="keyword">var</span> msg = res.<span class="property">data</span>.<span class="property">info</span>.<span class="property">text</span></span><br><span class="line">         $(<span class="string">&#x27;#talk_list&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;li class=&quot;left_word&quot;&gt;&lt;img src=&quot;img/person01.png&quot; /&gt; &lt;span&gt;&#x27;</span> + msg + <span class="string">&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;</span>)</span><br><span class="line">         <span class="comment">// 重置滚动条的位置</span></span><br><span class="line">         <span class="title function_">resetui</span>()</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="将机器人聊天内容转成语音"><a href="#将机器人聊天内容转成语音" class="headerlink" title="将机器人聊天内容转成语音"></a>将机器人聊天内容转成语音</h3><ul><li>封装函数 <code>getVoice()</code> 接收一个参数，机器人的聊天信息</li><li>利用 <code>$.ajax()</code> 发送一个 GET 方式请求，传入请求地址 <code>http://ajax.frontend.itheima.net:3006/api/synthesize</code></li><li>定义请求数据 <code>text：value</code></li><li>定义<code>success</code>成功的回调，判断返回的状态码是否是200，如果是代表成功</li><li>在页面上定义 <code>audio</code> 标签，设置隐藏，等数据返回之后，利用这个 <code>audio</code> 来进行播放。设置 <code>autoplay</code> 属性来进行自动播放</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把文字转化为语音进行播放</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getVoice</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/synthesize&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: text</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(res)</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// 播放语音</span></span><br><span class="line">          $(<span class="string">&#x27;#voice&#x27;</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, res.<span class="property">voiceUrl</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="通过回车键发送消息"><a href="#通过回车键发送消息" class="headerlink" title="通过回车键发送消息"></a>通过回车键发送消息</h3><ul><li>给文本输入框注册 <code>keyup</code> 事件，按键弹起的事件监听</li><li>在事件函数里面，通过<code>keycode</code> 来获取对应的按键的 机器码</li><li>判断 <code>keycode</code> 是否等于 13（不需要去记忆，开发时候打印调试一下就行了），如果是，代表是回车键</li><li>如果是回车键，模拟用户点击：  <code>$(&#39;#btnSend&#39;).click()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为文本框绑定 keyup 事件</span></span><br><span class="line"> $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="comment">// console.log(e.keyCode)</span></span><br><span class="line">   <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;</span><br><span class="line">     <span class="comment">// console.log(&#x27;用户弹起了回车键&#x27;)</span></span><br><span class="line">     $(<span class="string">&#x27;#btnSend&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;能够知道和服务器相关的基本概念&lt;/li&gt;
&lt;li&gt;能够知道客户端和服务器通信的过程&lt;/li&gt;
&lt;li&gt;能够知道数据也是一种资源&lt;/li&gt;
&lt;li&gt;能够说出什么是&lt;code&gt;Ajax&lt;/code&gt;以及应用场景&lt;/li&gt;
&lt;li&gt;能够使用&lt;code&gt;jQuery&lt;/code&gt;中的&lt;code&gt;Ajax&lt;/code&gt;函数请求数据&lt;/li&gt;
&lt;li&gt;能够知道接口和接口文档的概念&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="ajax-01" scheme="http://example.com/tags/ajax-01/"/>
    
  </entry>
  
  <entry>
    <title>let、const、var的区别</title>
    <link href="http://example.com/2022/05/11/07-let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/05/11/07-let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-05-11T10:56:28.875Z</published>
    <updated>2022-05-19T15:26:40.598Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、let、const、var的区别"><a href="#一、let、const、var的区别" class="headerlink" title="一、let、const、var的区别"></a>一、let、const、var的区别</h4><p>​    （1）块级： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级        用域解决了ES5中的两个问题：<br>​     内层变量可能覆盖外层变量<br>     用来计数的循环变量泄露为[全局变量]</p><span id="more"></span><p>​    （2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p><p>​    （3）给全局添加属性： 浏览器的全局对象是window，的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</p><p>​    （4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</p><p>​    （5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。</p><p>​    （6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</p><p>​    （7）指针指向： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</p><h4 id="二、const对象的属性可以修改吗"><a href="#二、const对象的属性可以修改吗" class="headerlink" title="二、const对象的属性可以修改吗"></a>二、const对象的属性可以修改吗</h4><p>​    const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。<br>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;一、let、const、var的区别&quot;&gt;&lt;a href=&quot;#一、let、const、var的区别&quot; class=&quot;headerlink&quot; title=&quot;一、let、const、var的区别&quot;&gt;&lt;/a&gt;一、let、const、var的区别&lt;/h4&gt;&lt;p&gt;​    （1）块级： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级        用域解决了ES5中的两个问题：&lt;br&gt;​     内层变量可能覆盖外层变量&lt;br&gt;     用来计数的循环变量泄露为[全局变量]&lt;/p&gt;</summary>
    
    
    
    
    <category term="let、const、var的区别" scheme="http://example.com/tags/let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>手写一个new</title>
    <link href="http://example.com/2022/05/09/03-%E6%89%8B%E5%86%99new%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/05/09/03-%E6%89%8B%E5%86%99new%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-05-09T07:04:06.531Z</published>
    <updated>2022-05-26T11:53:34.589Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建一个空的简单JavaScript对象（即{}）；</li><li>为步骤1新创建的对象添加属性<code>__proto__</code>，将该属性链接至构造函数的原型对象 ；</li><li>将步骤1新创建的对象作为this的上下文 ；</li><li>如果该函数没有返回对象，则返回this。</li></ol><blockquote><p>new关键词执行后总会返回一个对象, 要么是实例对象, 要么是return语句指定的对象.</p></blockquote><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params">fn,...args</span>)&#123;</span><br><span class="line">    <span class="comment">// let obj = new Object()</span></span><br><span class="line">    <span class="comment">// obj.__proto__ = fn.prototype</span></span><br><span class="line">    <span class="comment">// 基于fn构造函数原型创建一个新对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="comment">// 执行构造函数，并获取fn执行的结果</span></span><br><span class="line">    <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(obj,...args) </span><br><span class="line">    <span class="comment">// 如果执行结果有返回值并且是一个对象，返回执行结果，否则，返回新创建的对象</span></span><br><span class="line">    <span class="keyword">let</span> isObject = <span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> &amp;&amp; res !== <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> isFunction = <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> isObject || isFunction  ? res : obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好理解</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(obj,...args)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (res &amp;&amp; (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span>)) retrun res</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span> (o) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个对象，以o为新创建对象的原型对象</span></span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><ul><li>Instanceof: 用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</li><li>通俗一点就是： 判断new出的实例对象是否是当前构造函数生成的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">my_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// getProtypeOf是Object对象自带的API</span></span><br><span class="line">  <span class="comment">// 返回指定对象的原型（内部[[Prototype]]属性的值）隐式原型</span></span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left);</span><br><span class="line">  <span class="keyword">let</span> prototype = right.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;                  <span class="comment">//循环往下寻找，直到找到相同的原型对象</span></span><br><span class="line">    <span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(proto === prototype) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//找到相同原型对象，返回true</span></span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好理解版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">my_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> proto = left.<span class="property">__proto__</span></span><br><span class="line">    <span class="keyword">let</span> prototype = right.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// 右边的原型</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        proto = proto.<span class="property">__proto__</span> <span class="comment">// 向上查找，直到proto为null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔥手写Promise-all"><a href="#🔥手写Promise-all" class="headerlink" title="🔥手写Promise.all"></a>🔥手写Promise.all</h2><ol><li>参数可迭代</li><li>返回值是promise</li><li>如果全部成功，状态变为resolve</li><li>但凡有一个失败，状态变为reject</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PromiseAll</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">`<span class="subst">$&#123;arr&#125;</span> is not iterable`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = []  <span class="comment">// 存放结果</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">// 进入fullfilled的promise个数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 这里默认把所有入参都包装成promise返回了</span></span><br><span class="line">            <span class="comment">// 因为如果是普通值,在Promise内部实现 2.3.4时, 有返回值的操作</span></span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(arr[i]).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// counter++;</span></span><br><span class="line">                result[i] = value;</span><br><span class="line">                <span class="keyword">if</span> ( ++count === arr.<span class="property">length</span>) <span class="title function_">resolve</span>(result) <span class="comment">//判断已经完成</span></span><br><span class="line">                <span class="comment">// 只要有一个被rejected时, 就reject</span></span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">reject</span>(e))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手写call-apply-bind"><a href="#手写call-apply-bind" class="headerlink" title="手写call, apply, bind"></a>手写call, apply, bind</h2><ul><li><a href="https://juejin.cn/post/6844904042452221960#heading-9">https://juejin.cn/post/6844904042452221960#heading-9</a> 可参考</li><li><a href="https://juejin.cn/post/6844903809206976520#heading-10">https://juejin.cn/post/6844903809206976520#heading-10</a> 可参考</li><li>共同点：都是改变this指向 </li><li>区别<ul><li>call 和 apply是立即执行的，而bind是返回一个新的函数，需要手动去调用</li><li>call可以传递多个参数，第一个参数和apply’一样，是用来替换的对象，后边是参数列表</li><li>apply最多智能有两个参数  （新this对象，数组argsArray）-&gt;  fun.apply(thisArg, [argsArray])</li></ul></li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><ul><li>改变this指向</li><li>函数立即执行，返回执行结果</li><li><a href="https://juejin.cn/post/6844903906279964686#heading-19">https://juejin.cn/post/6844903906279964686#heading-19</a> 可参考</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_call</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断上下文对象</span></span><br><span class="line">    context = context ？<span class="title class_">Object</span>(context) : <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">// 创造唯一key值，作为我们构造的context内部方法名</span></span><br><span class="line">    <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;thisFn&#x27;</span>) </span><br><span class="line">     <span class="comment">// 1. 将fn作为属性添加到context上</span></span><br><span class="line">    context[fn] = <span class="variable language_">this</span> <span class="comment">// 隐式绑定，改变构造函数的调用者间接改变 this 指向</span></span><br><span class="line">    <span class="comment">// 2. 将挂载以后的方法调用</span></span><br><span class="line">    <span class="keyword">let</span> res = context[fn](...args)  <span class="comment">// 这里..args将args数组，变为参数列表，数组的扩展运算符</span></span><br><span class="line">    <span class="comment">// 3. 删除新添加的对象属性</span></span><br><span class="line">    <span class="keyword">delete</span> context[fn]</span><br><span class="line">    <span class="comment">// 4. 返回调用结果</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func.apply(thisArg, [argsArray])</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;fn&#x27;</span>) <span class="comment">// 创建个独一无二的方法名</span></span><br><span class="line">    thisArg[fn] = <span class="variable language_">this</span> <span class="comment">// 方法变换执行对象</span></span><br><span class="line">    <span class="keyword">let</span> res = thisArg[fn](...args) </span><br><span class="line">    <span class="keyword">delete</span> thisArg[fn] <span class="comment">// 删除对象属性</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><ul><li>改变this指向</li><li>返回一个新函数</li><li>新函数可能被当做构造函数调用，函数可能有返回值</li><li>当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效</li><li>传递参数并柯里化</li><li><a href="https://www.jianshu.com/p/b540e1e17f54">https://www.jianshu.com/p/b540e1e17f54</a> 参考</li><li><a href="https://github.com/mqyqingfeng/Blog/issues/12">https://github.com/mqyqingfeng/Blog/issues/12</a>  冴羽</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // ES2015 arguments是一个对象，类数组；</span></span><br><span class="line"><span class="comment">// const args = Array.from(arguments);</span></span><br><span class="line"><span class="comment">// const args = [...arguments];</span></span><br><span class="line"><span class="comment">// let new_array = old_array.concat(value1,value2,...)</span></span><br><span class="line"><span class="comment">// concat后面参数可以是数组，也可以是参数本身</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;this is not a function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>) <span class="comment">// 第一个参数是this，截取掉</span></span><br><span class="line">    <span class="keyword">const</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> fBound =  <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 返回一个绑定了this指向的方法，闭包</span></span><br><span class="line">        <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="comment">// _self.call(context, ...args.concat(...arguments)) 参数为数组，用apply简单</span></span><br><span class="line">      <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> instance <span class="keyword">of</span> fNOP ? <span class="variable language_">this</span> : context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.方法1 原型式继承</span></span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>(); <span class="comment">//绑定原型 原型式继承</span></span><br><span class="line">    <span class="comment">// 2. 方法2: fBound.prototype = Object.create(this.prototype)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去注释 double</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind2</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 判断调用bind的是否是函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;this is not a function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 保存当前环境上下文，取截取this后的传入参数</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>  </span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="comment">// 1.当作为构造函数 new操作的时候，this指向实例，将绑定函数的this指向该实例，可以让实例获得来自绑定函数的值</span></span><br><span class="line">      <span class="comment">// 2.当作为普通函数时，将绑定函数的this指向context</span></span><br><span class="line">      <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="variable language_">this</span> : context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.原型式继承</span></span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>()</span><br><span class="line">  <span class="comment">// 复制原函数的prototype给fBound， 一些情况下函数没有prototype，如箭头函数</span></span><br><span class="line">  <span class="comment">// fBound.prototype.__proto__ = (fNOP.prototype=this.prototype)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   fBound.prototype = this.prototype;</span></span><br><span class="line"><span class="comment">// 直接修改 fBound.prototype 的时候，也会直接修改绑定函数的 prototype</span></span><br></pre></td></tr></table></figure><h4 id="bind2"><a href="#bind2" class="headerlink" title="bind2"></a>bind2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://jsgodroad.com/interview/js/#%E6%89%8B%E5%86%99%E9%A2%98</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_this</span>(...args, ...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _this.<span class="title function_">apply</span>(context, args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔥bind3-new-2021-12-13"><a href="#🔥bind3-new-2021-12-13" class="headerlink" title="🔥bind3 new 2021-12-13"></a>🔥bind3 new 2021-12-13</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">objThis, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;what is trying to be bound is not callable&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span> <span class="comment">// 保存源函数,以及参数</span></span><br><span class="line">    <span class="keyword">const</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fBound ? <span class="variable language_">this</span> : objThis, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修复函数没有prototype的情况 // 维护原型关系</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">        fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// https://juejin.cn/post/6844903906279964686#heading-14</span></span><br></pre></td></tr></table></figure><h4 id="bind-polyfill-core-js"><a href="#bind-polyfill-core-js" class="headerlink" title="bind-polyfill-core-js"></a>bind-polyfill-core-js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Yes, it does work with `new (funcA.bind(thisArg, args))`</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span>) (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">ArrayPrototypeSlice</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>;</span><br><span class="line">  <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span>(<span class="params">otherThis</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// closest thing possible to the ECMAScript 5</span></span><br><span class="line">      <span class="comment">// internal IsCallable function</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Function.prototype.bind - what is trying to be bound is not callable&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> baseArgs= <span class="title class_">ArrayPrototypeSlice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>),</span><br><span class="line">        baseArgsLength = baseArgs.<span class="property">length</span>,</span><br><span class="line">        fToBind = <span class="variable language_">this</span>,</span><br><span class="line">        fNOP    = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        fBound  = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          baseArgs.<span class="property">length</span> = baseArgsLength; <span class="comment">// reset to default base arguments</span></span><br><span class="line">          baseArgs.<span class="property">push</span>.<span class="title function_">apply</span>(baseArgs, <span class="variable language_">arguments</span>);</span><br><span class="line">          <span class="keyword">return</span> fToBind.<span class="title function_">apply</span>(</span><br><span class="line">            <span class="comment">// 是否被new操作符调用，是的话就用新创建的this替换bind的this</span></span><br><span class="line">                 fNOP.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(<span class="variable language_">this</span>) ? <span class="variable language_">this</span> : otherThis, baseArgs</span><br><span class="line">          );</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      <span class="comment">// Function.prototype doesn&#x27;t have a prototype property</span></span><br><span class="line">      fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防止new了函数后改变原型导致原函数的原型被修改</span></span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h4 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h4><ul><li>事件响应函数在一段时间后才执行,如果这段时间内再次调用,则重新计算。 在一定的时间间隔内,将多次触发变成一次触发</li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ol><li>限制鼠标连续点击（按钮提交等）</li><li>Scroll事件滚动防抖</li><li>搜索框输入查询</li><li>浏览器窗口缩放，resize事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.30secondsofcode.org/js/s/debounce 目前看见最简写法，best！</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, ms = <span class="number">0</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutId</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123; </span><br><span class="line">    <span class="comment">// function(...args) rest参数 ，将args转为数组</span></span><br><span class="line">    <span class="comment">// 对比数组的扩展运算法 fn.call(obj,...args) 含义不一样, 将args转为参数列表</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timerId) <span class="comment">// 每次点击的时候清除上一个定时器，重新计时</span></span><br><span class="line">    timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args), ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流  throttle"></a>节流  throttle</h4><ul><li>持续的触发事件,每隔一段时间, 只执行一次 ，减少一段时间的触发频率</li></ul><h5 id="时间戳版本"><a href="#时间戳版本" class="headerlink" title="时间戳版本"></a>时间戳版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, wait</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// Date.now || + new Date() || new Date().getTime() || new Date().valueOf()</span></span><br><span class="line">      <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      <span class="keyword">if</span> (now - pre &gt; = wait) &#123;</span><br><span class="line">        <span class="comment">// apply第二个参数可以是数组，也可以是类数组对象</span></span><br><span class="line">        <span class="comment">// 所以写arguments没有问题！</span></span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        pre = <span class="title class_">Date</span>.<span class="title function_">now</span>() <span class="comment">// 将当前时间记录， 作为下一个计时起点</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时器版本"><a href="#定时器版本" class="headerlink" title="定时器版本"></a>定时器版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, wait</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timerId </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timerId) &#123;</span><br><span class="line">      <span class="comment">// 这里箭头函数，this本身指向上层</span></span><br><span class="line">      timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        timerId = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冴羽 https://github.com/mqyqingfeng/Blog/issues/26</span></span><br></pre></td></tr></table></figure><h2 id="deepClone深拷贝"><a href="#deepClone深拷贝" class="headerlink" title="deepClone深拷贝 !!!"></a>deepClone深拷贝 !!!</h2><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ol><li>Object.assign()</li><li><code>...</code>扩展运算符 <strong><code>let cloneObj = &#123;...obj&#125;</code> <code>let newArr = [...arr]</code></strong></li><li>数组的Slice(), concat()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shallowClone</span> = obj =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="乞丐版"><a href="#乞丐版" class="headerlink" title="乞丐版"></a>乞丐版</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>( obj ) )</span><br></pre></td></tr></table></figure><ol><li>拷贝对象的值中如果有<code>函数</code>、<code>undefined</code>、<code>Symbol</code>，JSON.stringify序列化后的字符串中，这个键值对丢失</li><li>拷贝Date引用类型会变成字符串</li><li>拷贝RegExp会变成空对象 <code>&#123;&#125;</code></li><li>对象中含有 <code>NaN</code>、<code>Infinity</code> 会变成 <code>null</code></li><li>无法拷贝对象的原型链</li><li>无法拷贝不可枚举的属性 如Symbol</li><li>无法拷贝对象的循环引用 ， 即对象成环 <code>obj[key] = obj</code></li></ol><h5 id="🔥优化版"><a href="#🔥优化版" class="headerlink" title="🔥优化版"></a>🔥优化版</h5><ul><li><p>考虑 Date、RegExp类型， 直接生成一个新的实例返回</p></li><li><p>考虑数组  <code>let target = Array.isArray(obj)? [] : &#123;&#125;</code></p></li><li><p>考虑循环引用  利用WeakMap作为hash表， 检测到对象已存在于哈希表中，取出该值返回即可</p></li><li><p>针对不可枚举属性以及 Symbol 类型，使用 Reflect.ownKeys()</p></li><li><p>函数部分太复杂，函数的原型，多层柯里化等</p></li><li><p>针对Map, Set, Error等，Object.getOwnPropertyDescriptors(obj) 也不考虑</p></li><li><p>递归爆栈问题，改用循环解决，广度优先</p></li><li><p> <a href="https://segmentfault.com/a/1190000016672263">深拷贝的终极探索（99%的人都不知道）</a></p></li><li><p><a href="https://juejin.cn/post/6844903929705136141#heading-4">如何写出一个惊艳面试官的深拷贝?</a> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RangeError</span>: <span class="title class_">Maximum</span> call stack size exceeded</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测对象 </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>  <span class="comment">// !!obj</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deepClone</span> = (<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 值类型 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj)) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="comment">// Date, RegExp  constructor容易被修改丢失，被认为不安全，不推荐作为判断</span></span><br><span class="line">  <span class="comment">// instanceof好一些</span></span><br><span class="line"><span class="comment">//  if (obj.constructor === Date) return new Date(obj)</span></span><br><span class="line"><span class="comment">//  if (obj.constructor === RegExp) return new RegExp(obj)</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">  <span class="comment">// 解决循环引用，查哈希表</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj)</span><br><span class="line"><span class="comment">//     let allDesc = Object.getOwnPropertyDescriptors(obj)</span></span><br><span class="line"><span class="comment">//     let target = Object.create(Object.getPrototypeOf(obj),allDesc)</span></span><br><span class="line">  <span class="keyword">let</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125; <span class="comment">// 考虑数组</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, target)</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(obj[key])) &#123;</span><br><span class="line">      target[key] = <span class="title function_">deepClone</span>(obj[key], hash)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><a href="https://yanhaijing.com/javascript/2018/10/10/clone-deep/">深拷贝的终极探索</a> </li></ol><h2 id="实现-5-add-3-minus-2-功能"><a href="#实现-5-add-3-minus-2-功能" class="headerlink" title="实现 (5).add(3).minus(2) 功能"></a>实现 (5).add(3).minus(2) 功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> number !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入数字～&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">valueOf</span>() + n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">minus</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> number !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入数字～&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// return this - n </span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">valueOf</span>() - n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// (5).add(3).minus(2)</span></span><br></pre></td></tr></table></figure><h2 id="如何求数组最大值和最小值"><a href="#如何求数组最大值和最小值" class="headerlink" title="如何求数组最大值和最小值"></a>如何求数组最大值和最小值</h2><ol><li>循环后Math.max</li><li>reduce</li><li>sort排序后取最后</li><li>ES6 … + Math.max</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Math.max</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result =  <span class="title class_">Math</span>.<span class="title function_">max</span>(result, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 2. reduce</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params">prev, next</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(prev, next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(max));</span><br><span class="line"><span class="comment">// 3. sort</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a - b;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[arr.<span class="property">length</span> - <span class="number">1</span>])</span><br><span class="line"><span class="comment">// 4. ES6 ...</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr))</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul><li>双重for循环</li><li>new Set</li><li>indexOf</li><li>array.filter + indexOf</li><li>sort排序 + 相邻元素对比</li><li>Object 键值对 obj.hasOwnProperty</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 双重for循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Set集合，不能有重复值</span></span><br><span class="line"><span class="keyword">const</span> newArr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="keyword">const</span> newArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</span></span><br><span class="line"><span class="comment">// filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. array.filter + indexOf</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> res =  arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果第一次出现，相等</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. sort排序后相邻元素对比</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="comment">// i从1开始算 arr[i-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5.obj.hasOwnProperty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">resetArr</span>(arr)) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// https://github.com/mqyqingfeng/Blog/issues/27</span></span><br></pre></td></tr></table></figure><h2 id="数组扁平化-flatten"><a href="#数组扁平化-flatten" class="headerlink" title="数组扁平化 flatten"></a>数组扁平化 flatten</h2><p><a href="https://juejin.cn/post/6844904025993773063">面试官连环追问：数组拍平（扁平化） flat 方法实现</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(flatten(arr)) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="🔥循环递归"><a href="#🔥循环递归" class="headerlink" title="🔥循环递归"></a>🔥循环递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(arr[i]))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>如果数组元素都是Number, 可以使用；但不推荐这种 toString+split方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]].<span class="title function_">toString</span>() <span class="comment">// &quot;1,2,3,4&quot;</span></span><br><span class="line"><span class="comment">// 场景却非常有限，如果数组是 [1, &#x27;1&#x27;, 2, &#x27;2&#x27;] 此方法不适合</span></span><br><span class="line"><span class="comment">// 扁平化不改变原数据类型</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> +item <span class="comment">//转为Number</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h3 id="🔥用reduce实现flat"><a href="#🔥用reduce实现flat" class="headerlink" title="🔥用reduce实现flat"></a>🔥用reduce实现flat</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法3</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, next</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> prev.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(next) ? <span class="title function_">flatten</span>(next) : next)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">flatten</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">flatten</span>(cur) : cur)</span><br><span class="line">  &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 理解 </span></span><br><span class="line"><span class="comment">// var arr = [2, [3, 4]];</span></span><br><span class="line"><span class="comment">// pre  cur</span></span><br><span class="line"><span class="comment">// []   2       0    [2]</span></span><br><span class="line"><span class="comment">// [2]  [3,4]   1    [2] wait </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []   3       0    [3]</span></span><br><span class="line"><span class="comment">// [3]  4       1    [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [2]  [3,4]       [2,3,4]</span></span><br></pre></td></tr></table></figure><h3 id="ES6-…"><a href="#ES6-…" class="headerlink" title="ES6 …"></a>ES6 …</h3><p>==[].concat(…arr)==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="title function_">concat</span>(...arr)); <span class="comment">// [1, 2, [3, 4]]</span></span><br><span class="line"><span class="comment">// 这时，只可以扁平一层，顺着这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h2 id="🔥柯里化-curry"><a href="#🔥柯里化-curry" class="headerlink" title="🔥柯里化 curry"></a>🔥柯里化 curry</h2><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">fn, ...args</span>) =&gt;&#123;</span><br><span class="line">  <span class="comment">// 当参数与fn参数相同，则直接执行函数 fn.length 形参个数</span></span><br><span class="line"><span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) <span class="keyword">return</span> <span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="comment">// 否则返回函数，合并参数，并继续自动柯里化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ...args, ...args2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数组合-compose"><a href="#函数组合-compose" class="headerlink" title="函数组合 compose"></a>函数组合 compose</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// redux中的实现 不一定准确 ，待整理</span></span><br><span class="line"><span class="comment">// https://github.com/mqyqingfeng/Blog/issues/45</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p><a href="https://juejin.cn/post/7031322059414175774#heading-16">https://juejin.cn/post/7031322059414175774#heading-16</a></p><h2 id="千位分隔符"><a href="#千位分隔符" class="headerlink" title="千位分隔符"></a>千位分隔符</h2><p><a href="https://juejin.cn/post/6844903911686406158#heading-19">https://juejin.cn/post/6844903911686406158#heading-19</a></p><h2 id="异步控制并发数"><a href="#异步控制并发数" class="headerlink" title="异步控制并发数"></a>异步控制并发数</h2><h2 id="ES5继承（寄生组合继承）"><a href="#ES5继承（寄生组合继承）" class="headerlink" title="ES5继承（寄生组合继承）"></a>ES5继承（寄生组合继承）</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/mqyqingfeng/Blog">冴羽的博客</a></li><li><a href="https://juejin.cn/post/7000374304727089159">前端必刷手写题系列 [22]</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;创建一个空的简单JavaScript对象（即{}）；&lt;/li&gt;
&lt;li&gt;为步骤1新创建的对象添加属性&lt;code&gt;__proto__&lt;/code&gt;，将该属性链接至构造函数的原型对象 ；&lt;/li&gt;
&lt;li&gt;将步骤1新创建的对象作为this的上下文 ；&lt;/li&gt;
&lt;li&gt;如果该函数没有返回对象，则返回this。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;new关键词执行后总会返回一个对象, 要么是实例对象, 要么是return语句指定的对象.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="手写一个new" scheme="http://example.com/tags/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAnew/"/>
    
  </entry>
  
  <entry>
    <title>记忆碎片</title>
    <link href="http://example.com/2022/05/08/05-%E8%AE%B0%E5%BF%86%E7%A2%8E%E7%89%87/"/>
    <id>http://example.com/2022/05/08/05-%E8%AE%B0%E5%BF%86%E7%A2%8E%E7%89%87/</id>
    <published>2022-05-08T13:08:31.578Z</published>
    <updated>2022-05-19T15:25:33.425Z</updated>
    
    <content type="html"><![CDATA[<h5 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a>元素获取</h5><p>01.getElementById(“id”)获取的是元素对象本身 或 null，不是伪数组</p><p>返回：元素对象 或null ，//对象使用节点操作获取</p><p>02.document.getElementsByTagName（“标签名”）返回值是伪数组，</p><p>返回：元素对象的集合 以伪数组形式存储     通过遍历 获取</p><p>getElementById(“id”)和document.getElementsByTagName（“标签名”）搭配使用。</p><p>因为 element.getElementsByTagName()  可以得到这个元素里面的某些标签</p><span id="more"></span><p>H5新增：</p><p>03.document.getElementsByClassName返回值是伪数组，对象集合</p><p>04.document.querySelector返回值是dom元素，第一个元素</p><p>05.document.querySelectorAll() 得到的是匹配元素的伪数组，即使只能匹配一个，得到的也是伪数组，伪数的长度为1                               // 数组通过遍历 或者索引获取里面的元素。</p><p>06.doucument . body    //返回body元素对象</p><p><span style="color:red">07.doucument.documentElement    //返回html元素对象</span></p><h5 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h5><p>element.getAttribute(‘属性’)   获取属性值</p><p>element.setAttribute(‘属性’, ‘值’); 主要针对于自定义属性   </p><p>div.removeAttribute(‘index’);移出属性</p><p><span style="color:red">括弧里面加引号</span></p><h5 id="表单的属性操作"><a href="#表单的属性操作" class="headerlink" title="表单的属性操作"></a>表单的属性操作</h5><p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p><h5 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h5><p>元素节点    1</p><p>属性节点    2</p><p>文本节点    3</p><p>子节点 vs 子元素节点 ===&gt;子节点可能是 元素 属性 文本</p><p>元素是元素节点，是节点中的一种，但元素节点中可以包含很多的节点。</p><P style="color:red">子元素节点 是  ol  ul 里面的li ,li 里面的内容也会被返回<br>大多数情况下是使用子元素或者父元素节点</P><p>node.parentNode                   返回某一节点的最近的一个父节点，没有则返回null</p><h6 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h6><p>parentNode.childNodes       返回所有子节点</p><p>parentNode.firstChild       </p><p>parentNode.lastChild</p><h6 id="子元素节点"><a href="#子元素节点" class="headerlink" title="子元素节点"></a>子元素节点</h6><p>parentNode . children             返回所有的子元素节点，它只返回子元素节点（包括里面的内容），其余节点不返回 </p><p>parentNode.firstElmentChild     第一个字元素节点</p><p>parentNode.lastElementChild        最后一个子元素节点</p><p>parentNode.children[0]                    第一个子元素节点</p><p>parentNode.children[parentNode.children.length-1]     最后一个子元素节点</p><h6 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h6><p>nextSibling                             下一个兄弟节点 包含元素节点或者 文本节点等等</p><p>previousSibling                      上一个兄弟节点</p><p>nextElementSibling                 下一个兄弟元素节点</p><p>previousElementSibling           上一个兄弟元素节点</p><h5 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h5><p>标准盒模型content部分不包含其他部分</p><p>IE盒模型content部分包含了border和padding</p><h5 id="盒子居中的的方法："><a href="#盒子居中的的方法：" class="headerlink" title="盒子居中的的方法："></a>盒子居中的的方法：</h5><p><strong>1、绝对定位法（个人感觉最好用）</strong></p><p>2.<strong>负margin居中（传统方法）</strong></p><p><strong>4、flex居中</strong></p><p><strong>5、transform居中</strong></p><p><strong>6、table-cell居中（最不常用</strong></p><h5 id="flex弹性盒子："><a href="#flex弹性盒子：" class="headerlink" title="flex弹性盒子："></a>flex弹性盒子：</h5><h5 id="class-、className、-classList区别"><a href="#class-、className、-classList区别" class="headerlink" title="class 、className、  classList区别"></a>class 、className、  classList区别</h5><ol><li><p>所有浏览器都支持className属性</p></li><li><p>  className属性返回值是一个<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，内容就是HTML元素的class属性内容。classList属性返回一个包含指定元素所有样式类的<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>对象。</p></li><li><p>​     .className的返回值就是包含元素class属性值的字符串。可以用来做判断，也可以用来给某一元素重新赋值，不过会覆盖元素原先的类名，记得把之前的类加上</p></li></ol><p>​            .classList返回值是DOMTokenList类型集合，通过此集合可以非常便利的操作元素class属性。</p><p style="color:red">通过className操作class属性，本质是对字符串的操作，比如判断class是否具有样式类"b"。那么需要自己写代码，将返回的字符串分解为各个样式类，然后再进行判断，相对比较麻烦。如果利用classList属性，那么将是非常轻松愉快的事情，使用<span style="color:red">DOM</span>TokenList集合的contains方法即可实现。</p><p>利用classList返回的集合对象，只需要一个contains方法即可。<br>集合还具有其他方法，分别如下：<br>（1）classList.add()：添加样式类。<br>（2）.item()：返回指定索引的样式类。<br>（3）.remove()：删除指定样式类。<br>（4）.toggle()：切换样式类</p><p>   (5)  .contains( )   是否包含给定类</p><p>​    (6)   . replace(“ select” , “newselect”)     替换类</p><h5 id="setAttribute和add的区别"><a href="#setAttribute和add的区别" class="headerlink" title="setAttribute和add的区别"></a>setAttribute和add的区别</h5><ol><li><p>setAttribute用于创建或改变某个新属性。</p></li><li><p>如果指定属性已经存在,则只设置该值并且会替换原来的值。</p></li><li><p>add方法是添加某个类，不会替换属性中的值，并且需要跟classList使用，因为它是classList的方法。</p></li></ol><p>​             </p><p>eg:      e.target.className == ‘down’</p><h5 id="push-appendchild"><a href="#push-appendchild" class="headerlink" title="push()   appendchild()"></a>push()   appendchild()</h5><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><h5 id="change事件"><a href="#change事件" class="headerlink" title=" change事件:"></a><span style=" color:red"> change事件:</span></h5><div style="color:red">change具有改变的意思，change事件会在原数据发生变化的时候触发。<div>该事件仅适用于文本域（text field），以及 textarea 和 select 元素。<p>注释：当用于 select 元素时，change 事件会在选择某个选项时发生。当用于 text field 或 text area 时，该事件会在元素失去焦点时发生。</p><p> $(“.checkall”).change(function() {     //事件（）里面要加function来写</p><h5 id="jquery判断checked的三种方法"><a href="#jquery判断checked的三种方法" class="headerlink" title="jquery判断checked的三种方法:"></a>jquery判断checked的三种方法:</h5><p>.attr(‘checked’):  //看版本1.6+返回:”checked”或”undefined” ;1.5-返回:true或false<br>.prop(‘checked’): //16+:true/false<br>.is(‘:checked’):   //所有版本:true/false//别忘记冒号哦</p><h5 id="jQuery获取未选中的checkbox"><a href="#jQuery获取未选中的checkbox" class="headerlink" title="jQuery获取未选中的checkbox"></a>jQuery获取未选中的checkbox</h5><p> $(‘input[type=checkbox]’).not(“input:checked”);  </p><p>eg：console.log($(“.j-checkbox”).not(“.j-checkbox:checked”))</p><h5 id="jQuery获取选中的checkbox"><a href="#jQuery获取选中的checkbox" class="headerlink" title="jQuery获取选中的checkbox"></a>jQuery获取选中的checkbox</h5><p>$(‘input[type=checkbox]:checked’);</p><p>eg：  console.log($(“.j-checkbox:checked”))     // 返回被选中的元素   $返回一个伪数组</p><p> console.log($(“.j-checkbox:checked”).length)   //返回被选中的元素的个数  </p><h5 id="jQuery中获取索引"><a href="#jQuery中获取索引" class="headerlink" title="jQuery中获取索引"></a>jQuery中获取索引</h5><p> var index = $(this).index()            //  index()  方法可以直接获取指定元素的索引</p><p>DOM中用for循环  把每次的i 赋值给定义的index</p><p>.parents()        //parents() 方法返回被选元素的所有祖先元素。</p><p>.closest()          </p><ul><li>从当前元素开始</li><li>沿 DOM 树向上遍历，并返回匹配所传递的表达式的第一个祖先</li><li>返回包含零个或一个元素的 jQuery 对象</li></ul><p>.trim()</p><p>.toFixed()</p><pre><code>   1.`$(&quot;html&quot;)`选择`html`类型的所有元素。这就是HTML中的根元素。使用~~`$(document)`或                ~~`$(document.documentElement)`也可以做到这一点。</code></pre><ol start="2"><li><p>$(document)是一个选择器，选中的是整个html所有元素的集合。</p><p>$(document).scrollTop()</p></li><li><p> $(window).scroll()检查窗口是否正在滚动经过某个点</p></li></ol><h5 id="window和document的区别"><a href="#window和document的区别" class="headerlink" title="[window和document的区别]"></a>[window和document的区别]</h5><p>[window对象]</p><p>　　它是一个顶层对象,而不是另一个对象的属性，即浏览器的窗口。</p><pre><code>  document 当前显示的文档(该属性本身也是一个对象)</code></pre><h5 id="locaStorage"><a href="#locaStorage" class="headerlink" title="locaStorage"></a>locaStorage</h5><p>localStorage.setItem                    //存储数据  本地存储    . 设置项目</p><p>本地存储：先把数据转为字符串==》存储  ==&gt;转为对象格式==》使用</p><ol><li>本地存储里面只能存储字符串的数据格式 把我们的数组对象转换为字符串格式 JSON.stringify()</li></ol><p>localStorage.setItem(“todo”, JSON.stringify(todolist));</p><ol start="2"><li>获取本地存储的数据 我们需要把里面的字符串数据转换为 对象格式 JSON.parse()</li></ol><p>​    data = JSON.parse(data);  //parse  分析</p><p><u>append() 操作的是 DOM 节点，push() 操作的是数组。</u></p><h5 id="appendChild与append区别"><a href="#appendChild与append区别" class="headerlink" title="appendChild与append区别:"></a>appendChild与append区别:</h5><p>（1）ParentNode.append()允许追加 DOMString 对象，而 Node.appendChild() 只接受 Node 对象。</p><p>  (2）ParentNode.append() 没有返回值，而 Node.appendChild() 返回追加的 Node 对象。</p><p><font style="color:red">（3）ParentNode.append() 可以追加多个节点和字符串，而 Node.appendChild() 只能追加一个节点。</font></p><p> //splice(开始索引，删除的长度)  数组删除指定位置的元素 </p><p>jQuery可以绑定多个事件放入同一个对象中，并没有被覆盖</p><p>.attr() 方法设置或返回被选元素的属性值。</p><h5 id="checkbox属性checked-”checked”通过js已设置，但是不勾选？？？？"><a href="#checkbox属性checked-”checked”通过js已设置，但是不勾选？？？？" class="headerlink" title="checkbox属性checked=”checked”通过js已设置，但是不勾选？？？？"></a>checkbox属性checked=”checked”通过js已设置，但是不勾选？？？？</h5><p>给input加了checked就可以了</p><h5 id="媒体适配（范围大于用min-，范围小于用max）"><a href="#媒体适配（范围大于用min-，范围小于用max）" class="headerlink" title="媒体适配（范围大于用min ，范围小于用max）"></a>媒体适配（范围大于用min ，范围小于用max）</h5><p>大于900px的时候，匹配900px 到无限大</p><p>@media screen and (min-width:900px)</p><p>小于900px的时候，匹配0 到900px</p><p>@media screen and (max-width:900px)</p><h5 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h5><p>浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，</p><p>深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，</p><h5 id="EM"><a href="#EM" class="headerlink" title="EM"></a>EM</h5><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</p><ol><li><p>em的值并不是固定的；</p></li><li><p>em会继承父级元素的字体大小。</p></li></ol><h5 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h5><p>使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素</p><h5 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw   vh"></a>vw   vh</h5><p>vw\vh的介绍？<br>1.什么是vw(Viewport Width)和vh（Viewport Height）？<br>    1.1 vw和vh是前端开发中的一个动态单位，是一个相对于网页视口的单位。<br>    1.2 系统会将视口的宽度和高度分为100份，1vw占用视口宽度的百分之一，1vh占用视口高度的百分之一。<br>    1.3 vw、vh和百分比不同的是，百分比永远都是以父元素为参考，而vw、vh是以视口作为参考。</p><h5 id="立即执行函数之前需要加-分号"><a href="#立即执行函数之前需要加-分号" class="headerlink" title="立即执行函数之前需要加  ;  分号"></a>立即执行函数之前需要加  ;  分号</h5><h5 id="background-size：-contain-与cover的区别："><a href="#background-size：-contain-与cover的区别：" class="headerlink" title="background-size： contain 与cover的区别："></a>background-size： contain 与cover的区别：</h5><ol><li>在no-repeat情况下，如果容器宽高比与图片宽高比不同，</li></ol><p>　cover：图片宽高比不变、铺满整个容器的宽高，而图片多出的部分则会被截掉；</p><p>　contain:图片自身的宽高比不变，缩放至图片自身能完全显示出来，所以容器会有留白区域；</p><p>2.在repeat情况下：cover:与上述相同；contain:容器内至少有一张完整的图，容器留白区域则平铺背景图，铺不下的再裁掉。</p><p>resize 事件是在浏览器窗口大小发生变化时触发，利用该事件可以跟踪窗口大小的变化来动态调整页面的元素显示。</p><p>接下来利用 resize 事件实现一个小案例：<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>浏览器窗口变化，实时获取该窗口的宽度和高度</p><p>  console.log(this)  // 某一个元素</p><p>   console.log($(this))  //一个对象</p><p>   console.log(this.dataset.type)    //直接看 this . type     dataset是自定义属性的获取方法</p><h5 id="flex属性是由flex-grow-flex-shrink-flex-basis这三个属性的缩写"><a href="#flex属性是由flex-grow-flex-shrink-flex-basis这三个属性的缩写" class="headerlink" title="flex属性是由flex-grow, flex-shrink, flex-basis这三个属性的缩写"></a>flex属性是由flex-grow, flex-shrink, flex-basis这三个属性的缩写</h5><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex-basis`默认值是`auto`，</span><br><span class="line">`flex-grow`默认值是`0`，</span><br><span class="line">`flex-shrink`默认值是`1</span><br></pre></td></tr></table></figure><h5 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h5><p><span style="color:red"> console.log(Object.prototype.toString.call(a))</span></p><p>立即执行函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h5 id="new操作构造函数生成实例的过程"><a href="#new操作构造函数生成实例的过程" class="headerlink" title="new操作构造函数生成实例的过程"></a>new操作构造函数生成实例的过程</h5><ol><li><p>首先, 当我们使用new操作符时, js会先创建一个空的对象</p></li><li><p>然后, 构造函数中的this指向该空对象</p></li><li><p>其次, 在构造函数中通过操作this, 来给这个空对象赋予相应的属性</p></li><li><p>最后, 返回这个经过处理的”空对象”(此时, 对象已经不是空的了)</p><p>缺点：每创建一个实例都要开辟一个内存空间来存放同一个方法，浪费内存。</p></li></ol><p>原型对象 只开辟一次内存空间，存放多个公共方法，new出来的实例对象都可以直接通过原型链找到 并直接使用</p><p>构造函数 是每调用一次都会在内存中开辟一个新内存来存放同一个方法</p><h5 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h5><p>对象是类的具体表达，类是对象的抽象表达。</p><h5 id="禁用双击选中文字默认功能"><a href="#禁用双击选中文字默认功能" class="headerlink" title="// 禁用双击选中文字默认功能"></a>// 禁用双击选中文字默认功能</h5><p>​      window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</p><h5 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h5><p>01.构造函数通过原型分配的函数是所有对象所共享的。</p><p>原型的作用：就是共享方法。</p><p>02.将构造函数中恒定的方法放到它的<code>prototype</code>原型对象中， 减少每次实例化对象时的内存消耗</p><p>03.</p><ol><li>将公共属性定义到构造函数中</li><li>将公共方法放到它的原型对象上</li></ol><p>04.</p><p>函数里面是原型对象prototype</p><p>实例对象里面是 隐式原型  ——proto——</p><p>05.[[proto]]就是 –proto–的浏览器渲染效果</p><p>06.一般来说，公共属性定义在构造函数里面，公共方法定义在原型对象身上</p><p>07.<code>__proto__</code>  、<code>prototype</code>返回（指向）的都是对象{}</p><p>map不会改变原数组，但是如果里面是引用类型那么他的地址不会变，但属性和方法可能会发生变化</p><p>some必须加return</p><p>return用法：在return后面加返回值的条件</p><h5 id="数组也是对象的一种，-但对象不是数组"><a href="#数组也是对象的一种，-但对象不是数组" class="headerlink" title="数组也是对象的一种， 但对象不是数组"></a>数组也是对象的一种， 但对象不是数组</h5><p>添加条件时  for循环 外面的前面  里面  外面的后面</p><h5 id="function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4"><a href="#function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4" class="headerlink" title="function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4"></a>function是一个函数，只有在调用的时候才会执行，但是在执行前，for循环已经循环完了，那么i已经全部变成了4</h5><h5 id="生成一个唯一的id"><a href="#生成一个唯一的id" class="headerlink" title="生成一个唯一的id"></a>生成一个唯一的id</h5><p>var random = Math.random().toString(36).slice(2)</p><p>​    console.log(random)</p><p>计算时间</p><p>var date1 = (+new Date()) / 1000       //写在函数外刚开始 </p><p>var date2 = (+new Date()) / 1000</p><p>​      console.log(date2 - date1);         //写在函数内 或者结束  </p><h5 id="return"><a href="#return" class="headerlink" title="return"></a>return</h5><p>if+return可以替换 if…else 进行程序流程的控制，</p><p>当条件不符合当前判断时，会自动退出当前判断；</p><p>Return False 就相当于终止符，Return True 就相当于执行符。</p></div></div>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;元素获取&quot;&gt;&lt;a href=&quot;#元素获取&quot; class=&quot;headerlink&quot; title=&quot;元素获取&quot;&gt;&lt;/a&gt;元素获取&lt;/h5&gt;&lt;p&gt;01.getElementById(“id”)获取的是元素对象本身 或 null，不是伪数组&lt;/p&gt;
&lt;p&gt;返回：元素对象 或null ，//对象使用节点操作获取&lt;/p&gt;
&lt;p&gt;02.document.getElementsByTagName（“标签名”）返回值是伪数组，&lt;/p&gt;
&lt;p&gt;返回：元素对象的集合 以伪数组形式存储     通过遍历 获取&lt;/p&gt;
&lt;p&gt;getElementById(“id”)和document.getElementsByTagName（“标签名”）搭配使用。&lt;/p&gt;
&lt;p&gt;因为 element.getElementsByTagName()  可以得到这个元素里面的某些标签&lt;/p&gt;</summary>
    
    
    
    
    <category term="记忆碎片" scheme="http://example.com/tags/%E8%AE%B0%E5%BF%86%E7%A2%8E%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</title>
    <link href="http://example.com/2022/05/07/01-%E8%B5%B5%E4%B8%BD%E9%A2%96%EF%BC%9A%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E9%85%8D%E4%B8%8D%E9%85%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E5%8F%91%E5%85%89%E4%BA%86%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%80%BC%E5%BE%97%E7%9A%84%EF%BC%81/"/>
    <id>http://example.com/2022/05/07/01-%E8%B5%B5%E4%B8%BD%E9%A2%96%EF%BC%9A%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E9%85%8D%E4%B8%8D%E9%85%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E5%8F%91%E5%85%89%E4%BA%86%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%80%BC%E5%BE%97%E7%9A%84%EF%BC%81/</id>
    <published>2022-05-07T14:18:01.659Z</published>
    <updated>2022-05-20T01:59:54.271Z</updated>
    
    <content type="html"><![CDATA[<p>网络上为赵丽颖晋身为Dior新代言人，为baby抱屈而打口水仗的人们依旧在评论区喋喋不休。</p><p>网友不是头一次抹黑赵丽颖，也不是第一次对她评头论足。</p><p>他们从来没忘记赵丽颖的中专文凭、农村出身、补刀神手的人设，以及她在时尚界那次长裙美背后却贴小花纸的“土美”事件。</p><p>他们从来没想到她以一张包子脸的长相也能进军时尚界甚至可以开疆辟土，能在颜控大长腿的天下里挤得一席之地。</p><span id="more"></span><p><img src="https://joeybling.github.io/images/2743275-53f4e13ae7bb957c.jpg" alt="img"><br>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>别说喷子们不服，就连那些以颜值、身材傲娇的模特们甚至也要掂量下要不要去拍部剧来充实一下自己的市场含金量。</p><p>也许，不过是因为赵丽颖改变了某些市场主导者的审美标准，也或者因为她让人们看到了属于某种叫做内在因素的美学吸引力。</p><p>在风云突变的娱乐圈子里，令人眼花缭乱的美的形式层出不穷，种种以花瓶自居的美少女美男子更是如过江之鲫。可以说美常有，花瓶亦常有，但是以内在实力让人发现美的内在的，却不常见。</p><p><img src="https://joeybling.github.io/images/2743275-8a989c5bb640f4bf.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>黄渤算是特例，他从来不以帅著称。</p><p>但是他有让人透过“看似抽象的外表”发现其演技魅力的能耐，继而在大大小小的场合，能让人心悦诚服地体会到他妙语连珠舌灿生花的高情商魅力。这大概就属于那种可以满足人们精神需要层次的美了。</p><p><img src="https://joeybling.github.io/images/2743275-4d63302781989ff0.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>周冬雨也算特例，而且特例得很成功。</p><p>作为18岁时就荣升为“谋女郎”的幸运儿，她的演技她的颜值，在进入电影学院以及刚毕业的阶段，都不算是人们口中的佼佼者。甚至在很长一段时间里，人们总能从她刻意扮老的衣着里发现“令人扼腕”的衣品。</p><p>她没有好身材，她也曾自嘲“自己二十四岁的年纪里，有的是十四岁的身材”；她没有欧式大眼睛，她笑起来眼睛眯成一条线的样子的确像自嘲的“小蝌蚪”“小黄鸭”。</p><p><img src="https://joeybling.github.io/images/2743275-d0b5d1c133826c9e.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>可是她知道衣品可以偷偷修炼，演技亦可以让那些吐槽她的人对她黑转粉。</p><p>现在的周冬雨，总能用梨花带雨的哭或明媚如初恋的笑牵引着观众去发现她的灵动、可爱、放肆、潇洒。她是安生、顾胜男、肖红，还是宇宙CP心中念念不忘的“小蝌蚪”。她用角色在无数人心中收获对她别样之美的肯定。</p><p>诚然，她瘦小单薄，不够丰盈饱满。但是她会努力想尽各种办法，去让自己中学时因练舞而壮硕的小腿变瘦再变瘦。于是与别人比，她会胜在肌肤胜雪、会胜在后天小白腿又瘦又直所营造出的纯真干净气质上。所以，懂得适合自己穿衣风格的姑娘，懂得扬长避短的她，终会在可以抱着奖杯时靠衣品靠气质在时尚界锦上添花。</p><p><img src="https://joeybling.github.io/images/2743275-cb84c86409b3303d.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>周冬雨也许可以成为赵丽颖在衣品上征服人心的榜样。她们虽然不够天资卓越，但胜在后天足够努力。尽管她们都曾被人很批过说话耿直情商感人，但是胜在她们都足够心大如海，能把注意力转移到自己钟爱的演技磨砺层面，继而以实力赢得业界尊重。</p><p>这时代，从耀眼高台跌倒下来的明星不胜枚举，在底层逆境中一点一点攀爬努力的演员亦多如星辰。但不管她们处在什么阶段，能够给予她们自信的，永远是自己对所爱事业的追梦执念，和一次次挫败后的执着坚持。</p><p>正所谓“闻道有先后，术业有专攻”。多少演员成为明星，立足的资本，成名的资本，踏入时尚圈的资本，永远是彰显实力的代表作。也就是说，唯有专注于自己的术业，才能脱胎换骨，再上台阶；才能有机会发光发亮，才够得住机会来时的橄榄枝！</p><p>出道十年，赵丽颖从选秀开始奋斗，跑过无数龙套，在扎扎实实的演技磨砺中成就了陆贞、杉杉、花千骨、楚乔等多个被人记到心里的角色，也算是用步步的成就证明了从平凡到华丽蜕变的自我价值。</p><p><img src="https://joeybling.github.io/images/2743275-b650a625da475f1b.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>就算曾经土气又如何，曾经籍籍无名又如何，谁的人生不是在不断修炼中成长?当你拥有一颗坚忍倔强的心，埋首修剪自我的不足时，就没空在乎别人说长道短了。</p><p>就像赵丽颖曾说的，人到一定程度，就不会再计较那么多了；以前会怕这个、怕那个，但是她觉得现在的自己心态很平和，状态也还挺好；对于这些东西就更不在意了。</p><p>正所谓，你若淡看风云，窗前自有云卷云舒的自在；你若似繁花锦绣，周围自有蝴蝶悄然翩跹。</p><p><img src="https://joeybling.github.io/images/2743275-a9e30f2c8ddd5f04.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>诚然，梦想不必过早就实现，也不必实现了就止步于当下。</p><p>我们总有困顿迷惑自我怀疑的时候，就像努力了很多年的前夫哥雷佳音，在出演鹿兆鹏几个月都快要抑郁的时候，等来了陈俊生、裴纶这样一个可以证明自己实力的角色。</p><p><img src="https://joeybling.github.io/images/2743275-8d20f5c9550d4809.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>就像被离婚大战拖累到几乎要完全没有出路的潘粤明，在跨界歌王中唱出了文艺小生的双面挣扎，也让自己有机会被制作方看中可塑性而出演了证明自己炸裂演技的角色“白夜兄弟”。</p><p><img src="https://joeybling.github.io/images/2743275-ecab8a59519a96cf.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>我们总有会爬上某个看似自我高峰的时刻，唯有清醒和自省能让自己行远路行得远。</p><p>就像周冬雨的小妞人设演多了，也需要调整战略在别的角色领域里证明自己的可塑性。就像赵丽颖的进阶更上层楼了，也需要在学识修养衣品方面内外兼修裨补缺漏。</p><p>有人说，任何人都不是超人，你的心思放在哪儿是可以看见的。</p><p>当你眼中只有名利时，纵然有一千万中想红想赚快钱的途径，但是如日中天如薛之谦又如何，火箭般翻红的速度，维持的时间却不过是两年。</p><p>当没有创新度的段子梗被他在上百个节目中玩到泛滥时，当没有专情如一的人品来维持深情人设而被昔日恋人李雨桐扒个底朝天的时候，名利来得快走得也快，还顺便把你打倒至众人踩众人唾弃的深渊。</p><p>傅雷说，我们的确是盲目着在世界上前进的。但是当你行走于世越深入，你才发现你的双眼你的灵魂会容易被浮华蔽眼而陷入盲目。</p><p>没有谁不渴望事业成功荣耀加身，但是能救赎我们灵魂的永远是自己可以拿得出手的自己钟爱的作品。</p><p>如好剧本之于演员，好书籍之于作家，好项目之于商人，好工作之于普通人。我们行走江湖的目的，就是用尽自己的全部能耐把本来就好的璞玉打造成臻于完美的玉石。</p><p>至于随之而来的物质累积、名誉傍身，都不过是立足于其上的附加之物。本立则荣加，本无则荣枯。明白这一点，世人眼中关于你的值不值得，都不足以撼动你对自己的肯定。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网络上为赵丽颖晋身为Dior新代言人，为baby抱屈而打口水仗的人们依旧在评论区喋喋不休。&lt;/p&gt;
&lt;p&gt;网友不是头一次抹黑赵丽颖，也不是第一次对她评头论足。&lt;/p&gt;
&lt;p&gt;他们从来没忘记赵丽颖的中专文凭、农村出身、补刀神手的人设，以及她在时尚界那次长裙美背后却贴小花纸的“土美”事件。&lt;/p&gt;
&lt;p&gt;他们从来没想到她以一张包子脸的长相也能进军时尚界甚至可以开疆辟土，能在颜控大长腿的天下里挤得一席之地。&lt;/p&gt;</summary>
    
    
    
    
    <category term="赵丽颖" scheme="http://example.com/tags/%E8%B5%B5%E4%B8%BD%E9%A2%96/"/>
    
  </entry>
  
  <entry>
    <title>hello my log</title>
    <link href="http://example.com/2022/04/15/06-hello-world/"/>
    <id>http://example.com/2022/04/15/06-hello-world/</id>
    <published>2022-04-15T03:41:12.897Z</published>
    <updated>2022-05-23T09:46:07.037Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
    <category term="hello my log" scheme="http://example.com/tags/hello-my-log/"/>
    
  </entry>
  
</feed>
