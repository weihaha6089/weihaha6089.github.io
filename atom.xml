<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>派大星</title>
  
  <subtitle>派大星</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-11T10:59:14.900Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>派大星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>let、const、var的区别</title>
    <link href="http://example.com/2022/05/11/let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/05/11/let%E3%80%81const%E3%80%81var%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-05-11T10:56:28.875Z</published>
    <updated>2022-05-11T10:59:14.900Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、let、const、var的区别"><a href="#一、let、const、var的区别" class="headerlink" title="一、let、const、var的区别"></a>一、let、const、var的区别</h4><p>​    （1）块级： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级        用域解决了ES5中的两个问题：<br>​     内层变量可能覆盖外层变量<br>     用来计数的循环变量泄露为[全局变量]</p><span id="more"></span><p>​    （2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p><p>​    （3）给全局添加属性： 浏览器的全局对象是window，的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</p><p>​    （4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</p><p>​    （5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。</p><p>​    （6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</p><p>​    （7）指针指向： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</p><h4 id="二、const对象的属性可以修改吗"><a href="#二、const对象的属性可以修改吗" class="headerlink" title="二、const对象的属性可以修改吗"></a>二、const对象的属性可以修改吗</h4><p>​    const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。<br>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;一、let、const、var的区别&quot;&gt;&lt;a href=&quot;#一、let、const、var的区别&quot; class=&quot;headerlink&quot; title=&quot;一、let、const、var的区别&quot;&gt;&lt;/a&gt;一、let、const、var的区别&lt;/h4&gt;&lt;p&gt;​    （1）块级： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级        用域解决了ES5中的两个问题：&lt;br&gt;​     内层变量可能覆盖外层变量&lt;br&gt;     用来计数的循环变量泄露为[全局变量]&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ES6语法</title>
    <link href="http://example.com/2022/05/10/js05-es6-ES6%E6%A6%82%E5%BF%B5-%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%8B%93%E5%B1%95/"/>
    <id>http://example.com/2022/05/10/js05-es6-ES6%E6%A6%82%E5%BF%B5-%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%8B%93%E5%B1%95/</id>
    <published>2022-05-10T08:53:17.597Z</published>
    <updated>2022-05-11T11:00:58.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>能够说出使用let关键字声明变量的特点</li><li>能够使用解构赋值从数组中提取值</li><li>能够说出箭头函数拥有的特性</li><li>能够使用剩余参数接收剩余的函数参数</li><li>能够使用拓展运算符拆分数组</li><li>能够说出模板字符串拥有的特性<span id="more"></span><h2 id="ES6相关概念（★★）"><a href="#ES6相关概念（★★）" class="headerlink" title="ES6相关概念（★★）"></a>ES6相关概念（★★）</h2></li></ul><h3 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h3><p>ES 的全称是 ECMAScript , 它是由 ECMA 国际标准化组织,制定的一项脚本语言的标准化规范。</p><h3 id="为什么使用-ES6"><a href="#为什么使用-ES6" class="headerlink" title="为什么使用 ES6 ?"></a>为什么使用 ES6 ?</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6新增语法"><a href="#ES6新增语法" class="headerlink" title="ES6新增语法"></a>ES6新增语法</h2><h3 id="let（★★★）"><a href="#let（★★★）" class="headerlink" title="let（★★★）"></a>let（★★★）</h3><p>ES6中新增了用于声明变量的关键字</p><h4 id="let声明的变量只在所处于的块级有效"><a href="#let声明的变量只在所处于的块级有效" class="headerlink" title="let声明的变量只在所处于的块级有效"></a>let声明的变量只在所处于的块级有效</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用let关键字声明的变量才具有块级作用域，使用var声明的变量不具备块级作用域特性。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>利用let声明的变量会绑定在这个块级作用域，不会受外界的影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">    tmp = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> tmp; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>经典面试题图解：</strong>此题的关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>经典面试题图解：</strong>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的i值.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ul><h3 id="const（★★★）"><a href="#const（★★★）" class="headerlink" title="const（★★★）"></a>const（★★★）</h3><p>声明常量，常量就是值（内存地址）不能变化的量</p><h4 id="具有块级作用域"><a href="#具有块级作用域" class="headerlink" title="具有块级作用域"></a>具有块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><h4 id="声明常量时必须赋值"><a href="#声明常量时必须赋值" class="headerlink" title="声明常量时必须赋值"></a>声明常量时必须赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span>; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h4 id="常量赋值后，值不能修改"><a href="#常量赋值后，值不能修改" class="headerlink" title="常量赋值后，值不能修改"></a>常量赋值后，值不能修改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">100</span>; <span class="comment">// Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span></span><br><span class="line">ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>const声明的变量是一个常量</li><li>既然是常量不能重新进行赋值，如果是基本数据类型，不能更改值，如果是复杂数据类型，不能更改地址值</li><li>声明 const时候必须要给定值</li></ul><h3 id="let、const、var-的区别"><a href="#let、const、var-的区别" class="headerlink" title="let、const、var 的区别"></a>let、const、var 的区别</h3><ul><li>使用 var 声明的变量，其作用域为该语句所在的函数内，且存在变量提升现象</li><li>使用 let 声明的变量，其作用域为该语句所在的代码块内，不存在变量提升</li><li>使用 const 声明的是常量，在后面出现的代码中不能再修改该常量的值</li></ul><p><img src="/2022/05/10/js05-es6-ES6%E6%A6%82%E5%BF%B5-%E6%96%B0%E5%A2%9E%E8%AF%AD%E6%B3%95-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%8B%93%E5%B1%95/var&let&const%E5%8C%BA%E5%88%AB.png"></p><h3 id="解构赋值（★★★）"><a href="#解构赋值（★★★）" class="headerlink" title="解构赋值（★★★）"></a>解构赋值（★★★）</h3><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//1</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//2</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125; = person; <span class="comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// &#x27;zhangsan&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myAge); <span class="comment">// 20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul><li>解构赋值就是把数据结构分解，然后给变量进行赋值</li><li>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为undefined</li><li>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</li><li>利用解构赋值能够让我们方便的去取对象中的属性跟方法</li></ul><h3 id="箭头函数（★★★）"><a href="#箭头函数（★★★）" class="headerlink" title="箭头函数（★★★）"></a>箭头函数（★★★）</h3><p>ES6中新增的定义函数的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;&#125;<span class="comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure><p>函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> num1 + num2; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; num1 + num2; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果形参只有一个，可以省略小括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span> (v) &#123;</span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = v =&gt; v;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125; </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123; </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this 指向 是obj对象</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">const</span> resFn = fn.<span class="title function_">call</span>(obj); </span><br><span class="line"> <span class="title function_">resFn</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><ul><li>箭头函数中不绑定this，箭头函数中的this指向是它所定义的位置，可以简单理解成，定义箭头函数中的作用域的this指向谁，它就指向谁</li><li>箭头函数的优点在于解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">say</span>();<span class="comment">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数（★★）"><a href="#剩余参数（★★）" class="headerlink" title="剩余参数（★★）"></a>剩余参数（★★）</h3><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这种方式很方便的去声明不知道参数情况下的一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (first, ...args) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 10</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="剩余参数和解构配合使用"><a href="#剩余参数和解构配合使用" class="headerlink" title="剩余参数和解构配合使用"></a>剩余参数和解构配合使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> students = [<span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = students; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);  <span class="comment">// &#x27;wangwu&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);  <span class="comment">// [&#x27;zhangsan&#x27;, &#x27;lisi&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ES6-的内置对象扩展"><a href="#ES6-的内置对象扩展" class="headerlink" title="ES6 的内置对象扩展"></a>ES6 的内置对象扩展</h2><h3 id="Array-的扩展方法（★★）"><a href="#Array-的扩展方法（★★）" class="headerlink" title="Array 的扩展方法（★★）"></a>Array 的扩展方法（★★）</h3><h4 id="扩展运算符（展开语法）"><a href="#扩展运算符（展开语法）" class="headerlink" title="扩展运算符（展开语法）"></a>扩展运算符（展开语法）</h4><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary  <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...ary);    <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h5 id="扩展运算符可以应用于合并数组"><a href="#扩展运算符可以应用于合并数组" class="headerlink" title="扩展运算符可以应用于合并数组"></a>扩展运算符可以应用于合并数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一 </span></span><br><span class="line"> <span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"> <span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"> <span class="comment">// 方法二 </span></span><br><span class="line"> ary1.<span class="title function_">push</span>(...ary2);</span><br></pre></td></tr></table></figure><h5 id="将类数组或可遍历对象转换为真正的数组"><a href="#将类数组或可遍历对象转换为真正的数组" class="headerlink" title="将类数组或可遍历对象转换为真正的数组"></a>将类数组或可遍历对象转换为真正的数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure><h4 id="构造函数方法：Array-from"><a href="#构造函数方法：Array-from" class="headerlink" title="构造函数方法：Array.from()"></a>构造函数方法：Array.from()</h4><p>将伪数组或可遍历对象转换为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; </span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, <span class="function"><span class="params">item</span> =&gt;</span> item *<span class="number">2</span>)<span class="comment">//[2,4]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：如果是对象，那么属性需要写对应的索引</p><h4 id="实例方法：find"><a href="#实例方法：find" class="headerlink" title="实例方法：find()"></a>实例方法：find()</h4><p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"> &#125;, &#123; </span><br><span class="line">     <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"> &#125;]; </span><br><span class="line"> <span class="keyword">let</span> target = ary.<span class="title function_">find</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.<span class="property">id</span> == <span class="number">2</span>);<span class="comment">//找数组里面符合条件的值，当数组中元素id等于2的查找出来，注意，只会匹配第一个</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例方法：findIndex"><a href="#实例方法：findIndex" class="headerlink" title="实例方法：findIndex()"></a>实例方法：findIndex()</h4><p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h4><p>判断某个数组是否包含给定的值，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">2</span>) <span class="comment">// true </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="String-的扩展方法"><a href="#String-的扩展方法" class="headerlink" title="String 的扩展方法"></a>String 的扩展方法</h3><h4 id="模板字符串（★★★）"><a href="#模板字符串（★★★）" class="headerlink" title="模板字符串（★★★）"></a>模板字符串（★★★）</h4><p>ES6新增的创建字符串的方式，使用反引号定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="模板字符串中可以解析变量"><a href="#模板字符串中可以解析变量" class="headerlink" title="模板字符串中可以解析变量"></a>模板字符串中可以解析变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure><h5 id="模板字符串中可以换行"><a href="#模板字符串中可以换行" class="headerlink" title="模板字符串中可以换行"></a>模板字符串中可以换行</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="在模板字符串中可以调用函数"><a href="#在模板字符串中可以调用函数" class="headerlink" title="在模板字符串中可以调用函数"></a>在模板字符串中可以调用函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;哈哈哈哈 追不到我吧 我就是这么强大&#x27;</span>;</span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> 哈哈哈哈`</span>;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(greet); <span class="comment">// 哈哈哈哈 追不到我吧 我就是这么强大 哈哈哈哈</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例方法：startsWith-和-endsWith"><a href="#实例方法：startsWith-和-endsWith" class="headerlink" title="实例方法：startsWith() 和 endsWith()"></a>实例方法：startsWith() 和 endsWith()</h4><ul><li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li><li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true </span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>)       <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例方法：repeat"><a href="#实例方法：repeat" class="headerlink" title="实例方法：repeat()"></a>实例方法：repeat()</h4><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)      <span class="comment">// &quot;xxx&quot; </span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>)  <span class="comment">// &quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Set-数据结构（★★）"><a href="#Set-数据结构（★★）" class="headerlink" title="Set 数据结构（★★）"></a>Set 数据结构（★★）</h3><p>ES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set本身是一个构造函数，用来生成  Set  数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br></pre></td></tr></table></figure><p>Set函数可以接受一个数组作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);<span class="comment">//&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值 </span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">2</span>)             <span class="comment">// 删除 set 结构中的2值   </span></span><br><span class="line">s.<span class="title function_">has</span>(<span class="number">1</span>)                <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span></span><br><span class="line">s.<span class="title function_">clear</span>()               <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够说出使用let关键字声明变量的特点&lt;/li&gt;
&lt;li&gt;能够使用解构赋值从数组中提取值&lt;/li&gt;
&lt;li&gt;能够说出箭头函数拥有的特性&lt;/li&gt;
&lt;li&gt;能够使用剩余参数接收剩余的函数参数&lt;/li&gt;
&lt;li&gt;能够使用拓展运算符拆分数组&lt;/li&gt;
&lt;li&gt;能够说出模板字符串拥有的特性&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级第02天</title>
    <link href="http://example.com/2022/05/09/jsadvanced02/"/>
    <id>http://example.com/2022/05/09/jsadvanced02/</id>
    <published>2022-05-09T13:21:22.279Z</published>
    <updated>2022-05-09T13:26:07.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-构造函数和原型"><a href="#1-构造函数和原型" class="headerlink" title="1 - 构造函数和原型"></a>1 - 构造函数和原型</h1><p>目标：</p><ol><li>了解构造函数与原型</li><li><strong><font color="red">原型链的概念</font></strong></li><li>通过原型扩展内置方法</li></ol><h2 id="1-1-对象的三种创建方式-复习"><a href="#1-1-对象的三种创建方式-复习" class="headerlink" title="1.1 对象的三种创建方式 - 复习"></a>1.1 对象的三种创建方式 - 复习</h2><blockquote><p>概念： **<font color="red">构造函数</font>**主要用来初始化对象，即为对象成员变量赋初始值，和<code>new</code>关键字一起使用。可以目标对象中的一些公共属性和方法抽取出来，然后封装到这个函数中 。</p></blockquote><span id="more"></span><ol><li><p>字面量方式</p><p><strong>CODE01</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>new关键字（极不推荐使用，原因见下）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure></li><li><p>构造函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name,sex) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;严海伦&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-2-new在执行时做的四件事-复习"><a href="#1-2-new在执行时做的四件事-复习" class="headerlink" title="1.2 new在执行时做的四件事 - 复习"></a>1.2 new在执行时做的四件事 - 复习</h2><ol><li>在内存中创建一个新的空对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（构造函数里不需要return）</li></ol><h2 id="1-3-静态成员和实例成员"><a href="#1-3-静态成员和实例成员" class="headerlink" title="1.3 静态成员和实例成员"></a>1.3 静态成员和实例成员</h2><h3 id="1-2-1实例成员-方法和属性"><a href="#1-2-1实例成员-方法和属性" class="headerlink" title="1.2.1实例成员(方法和属性)"></a>1.2.1实例成员(方法和属性)</h3><blockquote><ol><li><p>实例成员就是构造函数内部通过<code>this</code>添加的成员。如下列代码中<code>uname age sing</code> 就是实例成员；</p></li><li><p><strong>实例成员只能通过实例化的对象来访问， 不可以通过构造函数来访问</strong>(全文背诵)</p></li></ol></blockquote><p><strong>CODE02</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span> (uname, age) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">uname</span>) <span class="comment">// 实例成员只能通过实例化的对象来访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property">uname</span>) <span class="comment">// 错误！因为不可以通过构造函数来访问</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2静态成员-方法和属性"><a href="#1-2-2静态成员-方法和属性" class="headerlink" title="1.2.2静态成员(方法和属性)"></a>1.2.2静态成员(方法和属性)</h3><blockquote><ol><li>静态成员在构造函数本身上添加的成员，如下列代码中 sex 就是静态成员</li><li><strong>静态成员只能通过构造函数来访问，不能通过对象来访问（全文背诵）</strong></li></ol></blockquote><p><strong>CODE02</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span> (uname, age) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property">sex</span>) <span class="comment">// 静态成员只能通过构造函数来访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>) <span class="comment">// 错误！ 不能通过对象来访问</span></span><br></pre></td></tr></table></figure><blockquote><p>思考： 那这么说来，静态成员有什么用呢？</p><p>Math.PI</p><p>Math.random()</p><p>字符串 . toString-实例方法</p></blockquote><h2 id="1-4-构造函数的问题"><a href="#1-4-构造函数的问题" class="headerlink" title="1.4 构造函数的问题"></a>1.4 构造函数的问题</h2><blockquote><p>04 8:42</p></blockquote><p>构造函数方法很好用，但是存在浪费内存的问题。</p><p><img src="/2022/05/09/jsadvanced02/img1.png" alt="img1"></p><h2 id="1-5-构造函数原型-prototype-★★★★★-重中之重"><a href="#1-5-构造函数原型-prototype-★★★★★-重中之重" class="headerlink" title="1.5 构造函数原型 prototype (★★★★★ - 重中之重)"></a>1.5 构造函数原型 prototype (★★★★★ - 重中之重)</h2><p><strong>背诵：</strong></p><blockquote><p><strong>构造函数通过原型分配的函数是所有对象所共享的。</strong></p><p><strong>原型的作用：就是共享方法。</strong></p></blockquote><h3 id="1-5-1-概念"><a href="#1-5-1-概念" class="headerlink" title="1.5.1 概念"></a>1.5.1 概念</h3><p><strong>背诵：</strong></p><p>​        <strong>JavaScript 规定，每一个构造函数都有一个<code>prototype</code> 属性，指向另一个对象。注意这个<code>prototype</code>就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</strong></p><p>​        可以把那些不变的方法，直接定义在 <code>prototype</code> 对象上，这样所有对象的实例就可以共享这些方法。</p><p><img src="/2022/05/09/jsadvanced02/image-20220420095645787.png" alt="image-20220420095645787"></p><h3 id="1-5-2-prototype-的意义"><a href="#1-5-2-prototype-的意义" class="headerlink" title="1.5.2 prototype 的意义"></a>1.5.2 prototype 的意义</h3><blockquote><p>将构造函数中恒定的方法放到它的<code>prototype</code>原型对象中， 减少每次实例化对象时的内存消耗</p></blockquote><p><strong>CODE03</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>)</span><br><span class="line">ldh.<span class="title function_">sing</span>() <span class="comment">// 我会唱歌</span></span><br><span class="line">zxy.<span class="title function_">sing</span>() <span class="comment">// 我会唱歌</span></span><br></pre></td></tr></table></figure><p><strong>构造函数的写法：</strong></p><p><strong>背诵：</strong></p><pre><code>1. 将公共属性定义到构造函数中2. 将公共方法放到它的原型对象上</code></pre><h2 id="1-6-对象的原型-proto-★★★★★-重中之重"><a href="#1-6-对象的原型-proto-★★★★★-重中之重" class="headerlink" title="1.6 对象的原型 __proto__ (★★★★★ - 重中之重)"></a>1.6 对象的原型 <code>__proto__</code> (★★★★★ - 重中之重)</h2><blockquote><p>注意： 仅概念上的理解，开发中不可以使用！！！！！！！！</p></blockquote><h3 id="1-6-1-proto-概念"><a href="#1-6-1-proto-概念" class="headerlink" title="1.6.1  __proto__概念"></a>1.6.1  <code>__proto__</code>概念</h3><p><strong>背诵：</strong></p><p>​        <strong>对象都会有一个属性 <code>__proto__</code> 指向构造函数的 prototype 原型对象。之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <code>__proto__</code> 原型的存在。</strong></p><p><strong>CODE04</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh) <span class="comment">// 对象身上系统自动添加一个__proto__属性，指向构造函数的原型对象</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/09/jsadvanced02/image-20220420100603478.png" alt="image-20220420100603478"></p><h3 id="1-6-2-特点"><a href="#1-6-2-特点" class="headerlink" title="1.6.2 特点"></a>1.6.2 特点</h3><ol><li><p><strong><code>__proto__</code>对象原型和原型对象 prototype 是等价的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>查找规则：</p><ol><li>先看实例化对象（ldh）上是否有目标方法（sing），如果有，则执行该方法</li><li>如果实例化对象（ldh）上没有该方法，因为有<code>__proto__</code>，就可以去构造函数原型对象<code>prototype</code>上去查找</li></ol></li><li><p><strong><code>__proto__</code>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性。实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</strong></p><p><img src="/2022/05/09/jsadvanced02/img2.png" alt="img2"></p></li></ol><p>注：在实际开发操作中 不使用 –proto– 和  <strong>prototype</strong></p><h2 id="1-7-constructor构造函数"><a href="#1-7-constructor构造函数" class="headerlink" title="1.7 constructor构造函数"></a>1.7 constructor构造函数</h2><p><strong>背诵</strong></p><blockquote><p>constructor 主要用于记录该对象引用于哪个构造函数，</p><p><strong><span style="color:red">它可以让原型对象重新指向原来的构造函数。</span></strong></p></blockquote><h3 id="1-7-1-概念"><a href="#1-7-1-概念" class="headerlink" title="1.7.1 概念"></a>1.7.1 概念</h3><p><strong>背诵</strong></p><p>​        对象原型（ <code>__proto__</code>）和构造函数原型对象（prototype）里面都有一个 constructor 属性 ，constructor 我们称为构造函数，因为<strong>它指回构造函数本身。</strong></p><p><img src="/2022/05/09/jsadvanced02/image-20220420101732748.png" alt="image-20220420101732748"></p><p><img src="/2022/05/09/jsadvanced02/image-20220420101816830.png" alt="image-20220420101816830"></p><h3 id="1-7-2-注意事项"><a href="#1-7-2-注意事项" class="headerlink" title="1.7.2 注意事项"></a>1.7.2 注意事项</h3><p>​        <strong>描述：</strong>一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就<strong>会覆盖构造函数原型对象原来的内容</strong>，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p><p>​        <strong>处理方案：</strong>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数。<strong>换句话来说，不要这么赋值能解决100%的问题</strong>,<strong>禁止使用</strong>，<strong>一般用点语法添加原型对象，但不要与内置对象里的方法名重合，会覆盖</strong></p><p><strong>CODE05</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 点语法添加原型方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span> (uname, age) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">movie</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 以对象赋值的方式添加对象方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span> (uname, age) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="comment">// 手动设置指回原来的构造函数</span></span><br><span class="line">    <span class="comment">// 如果不加这个constructor则不会指挥Star原型</span></span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Star</span>, </span><br><span class="line">    <span class="attr">sing</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">movie</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会演电影&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-构造函数、实例化对象，原型对象的关系"><a href="#1-8-构造函数、实例化对象，原型对象的关系" class="headerlink" title="1.8 构造函数、实例化对象，原型对象的关系"></a>1.8 构造函数、实例化对象，原型对象的关系</h2><p><strong>背诵</strong></p><ol><li>构造函数的prototype属性指向了构造函数原型对象</li><li>实例对象是由构造函数创建的,实例对象的<code>__proto__</code>属性指向了构造函数的原型对象</li><li>构造函数的原型对象的constructor属性指向了构造函数,实例对象的原型的constructor属性也指向了构造函数</li></ol><p><img src="/2022/05/09/jsadvanced02/image-20220420103120962.png" alt="image-20220420103120962"></p><h2 id="1-9-原型链-★★★★★-面试必背"><a href="#1-9-原型链-★★★★★-面试必背" class="headerlink" title="1.9 原型链 (★★★★★ - 面试必背)"></a>1.9 原型链 (★★★★★ - 面试必背)</h2><p>​        <span style="color:red">每一个实例对象都有一个<code>__proto__</code>属性，指向构造函数的原型对象prototype，构造函数的原型对象也是一个对象，也有<code>__proto__</code>属性，这样一层一层往上找 直到找到object的prototype，他的–proto–值为null， 这就是原型链。</span></p><p><img src="/2022/05/09/jsadvanced02/img5-1650422003108.png" alt="img5"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h2 id="1-10-原型链和成员的查找机制-就是原型链"><a href="#1-10-原型链和成员的查找机制-就是原型链" class="headerlink" title="1.10 原型链和成员的查找机制(就是原型链)"></a>1.10 原型链和成员的查找机制(就是原型链)</h2><blockquote><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有<code>__proto__</code>属性,这样一层一层往上找,就形成了一条链,我们称此为原型链</p><p>看1.6.2 中的查找规则</p></blockquote><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型（也就是 <code>__proto__</code>指向的 prototype 原型对象）。</li><li>如果还没有就查找原型对象的原型（Object的原型对象）。</li><li>依此类推一直找到 Object 为止（null）。</li><li><code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li></ol><p><strong>思考：</strong></p><p><strong>CODE06</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line"><span class="comment">// Object.prototype.sex = &#x27;男&#x27;;</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">ldh.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象上有Object的默认方法吗？ 如toString</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><p><img src="/2022/05/09/jsadvanced02/image-20220420104503710.png" alt="image-20220420104503710"></p><h2 id="1-11-原型对象的this指向-★★★"><a href="#1-11-原型对象的this指向-★★★" class="headerlink" title="1.11 原型对象的this指向(★★★)"></a>1.11 原型对象的this指向(★★★)</h2><blockquote><p><strong>构造函数</strong>中的this和<strong>原型对象</strong>的this，<strong>都</strong>指向我们new出来的实例对象</p></blockquote><p><strong>CODE07</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    that = <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure><h2 id="1-12-通过原型为数组扩展内置方法（听听就过去了，禁止使用）"><a href="#1-12-通过原型为数组扩展内置方法（听听就过去了，禁止使用）" class="headerlink" title="1.12 通过原型为数组扩展内置方法（听听就过去了，禁止使用）"></a>1.12 通过原型为数组扩展内置方法（听听就过去了，禁止使用）</h2><blockquote><p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法</p></blockquote><p><strong>CODE08</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += <span class="variable language_">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//此时数组对象中已经存在sum()方法了  可以使用 数组.sum()进行数据的求和</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">sum</span>()</span><br></pre></td></tr></table></figure><h1 id="2-继承"><a href="#2-继承" class="headerlink" title="2 - 继承"></a>2 - 继承</h1><blockquote><p>es6之前可没有extends类的继承， 但可以通过构造函数+原型对象实现继承 - 组合继承</p></blockquote><p>目标：</p><ol><li>call、apply的使用</li><li>属性继承写法</li><li>方法继承写法</li></ol><h2 id="2-1-call-和apply-★★★★"><a href="#2-1-call-和apply-★★★★" class="headerlink" title="2.1 call()和apply() (★★★★)"></a>2.1 call()和apply() (★★★★)</h2><h3 id="2-1-1-call"><a href="#2-1-1-call" class="headerlink" title="2.1.1 call()"></a>2.1.1 call()</h3><p><font style="color:red">1. <strong>概念：</strong>调用目标函数，并修改函数运行时的this指向</font></p><ol start="2"><li><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure></li><li><p><strong>参数：</strong></p><p><code>thisArg</code>:</p><p>​        可选的。在 <em><code>function</code></em> 函数运行时使用的 <code>this</code> 值（指向对象）。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p><p><code>arg1,arg2,arg3...</code>:</p><p>​        指定的参数列表（传递的其他参数）。</p></li><li><p><strong>返回值：</strong></p><p>​        使用调用者提供的 <code>this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code>undefined</code>。</p></li></ol><p><strong>CODE09</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 调用了函数此时的this指向了对象o</span></span><br></pre></td></tr></table></figure><p><img src="/2022/05/09/jsadvanced02/img10.png" alt="img10"></p><h3 id="2-1-2-apply"><a href="#2-1-2-apply" class="headerlink" title="2.1.2 apply()"></a>2.1.2 apply()</h3><ol><li><p><strong>概念：</strong><code>apply()</code> 方法调用一个具有给定<code>this</code>值的函数，以及以一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects">类数组对象</a>）的形式提供的参数。</p></li><li><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure></li><li><p><strong>参数：</strong></p><p><code>thisArg</code>:</p><p>​        可选的。在 <em><code>function</code></em> 函数运行时使用的 <code>this</code> 值（指向对象）。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p><p><code>argsArray</code>:</p><p>​        可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"><code>null</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>，则表示不需要传入任何参数。</p></li><li><p><strong>返回值：</strong></p><p>​        使用调用者提供的 <code>this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code>undefined</code>。</p></li></ol><p><strong>CODE09</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.<span class="title function_">apply</span>(o, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 调用了函数此时的this指向了对象o</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-call-和apply-的区别"><a href="#2-1-3-call-和apply-的区别" class="headerlink" title="2.1.3 call()和apply()的区别"></a>2.1.3 call()和apply()的区别</h3><p>​        call()方法的作用和 apply() 方法类似，区别就是<code>call()</code>方法接受的是<strong>参数列表</strong>，而<code>apply()</code>方法接受的是<strong>一个参数数组</strong>。</p><h2 id="2-2-子构造函数继承父构造函数中的属性"><a href="#2-2-子构造函数继承父构造函数中的属性" class="headerlink" title="2.2 子构造函数继承父构造函数中的属性"></a>2.2 子构造函数继承父构造函数中的属性</h2><blockquote><p> <strong>核心原理：</strong>通过call()把父类型的this指向子类型的this，这样就可以实现子类型继承父类型的属性。</p></blockquote><p>步骤：</p><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><p><strong>CODE10</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1. 父构造函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Father</span> (uName, age) &#123;</span><br><span class="line">   <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">uName</span> = uName</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 2 .子构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span> (uName, age, score) &#123;</span><br><span class="line">  <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">  <span class="comment">// 3.使用call方式实现子继承父的属性</span></span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uName, age)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">score</span> = score <span class="comment">// 子构造函数的独有属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son)</span><br></pre></td></tr></table></figure><p><img src="/2022/05/09/jsadvanced02/image-20220420113633315.png" alt="image-20220420113633315"></p><p><img src="/2022/05/09/jsadvanced02/img11.png" alt="img11"></p><h2 id="2-3-借用原型对象继承方法"><a href="#2-3-借用原型对象继承方法" class="headerlink" title="2.3 借用原型对象继承方法"></a>2.3 借用原型对象继承方法</h2><p>步骤：</p><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><p><strong>CODE11</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span> (uname, age) &#123;</span><br><span class="line">    <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是父构造函数原型链上的方法</span></span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.子构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span> (uname, age, score) &#123;</span><br><span class="line">    <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是子构造函数原型链上的方法</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孩子要考试&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方案一:（不可行）将子构造函数的原型等于父构造函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure><p>问题: 这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化(父元素上也有子元素的原型方法)</p><p><strong>方案二: (推荐使用) 将子构造函数的原型指向父构造函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// 指向的是Father</span></span><br></pre></td></tr></table></figure><p>问题: 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数<br>修改: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span></span><br></pre></td></tr></table></figure><p><strong><font color="red">以上，牢记！</font></strong></p><p> <strong>CODE12: 完整代码块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span> (uname, age) &#123;</span><br><span class="line">    <span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是父构造函数原型链上的方法</span></span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.子构造函数 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span> (uname, age, score) &#123;</span><br><span class="line">    <span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是子构造函数原型链上的方法</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孩子要考试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son)</span><br></pre></td></tr></table></figure><p><img src="/2022/05/09/jsadvanced02/image-20220420120641776.png" alt="image-20220420120641776"></p><h2 id="2-4-类的本质"><a href="#2-4-类的本质" class="headerlink" title="2.4 类的本质"></a>2.4 类的本质</h2><p> <span style="color:red">本质上就是构造函数的另一种写法</span></p><p><strong>CODE13</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 之前通过 构造函数+ 原型实现面向对象 编程</span></span><br><span class="line"><span class="comment">// (1) 构造函数有原型对象prototype </span></span><br><span class="line"><span class="comment">// (2) 构造函数原型对象prototype 里面有constructor 指向构造函数本身</span></span><br><span class="line"><span class="comment">// (3) 构造函数可以通过原型对象添加方法</span></span><br><span class="line"><span class="comment">// (4) 构造函数创建的实例对象有__proto__ 原型指向 构造函数的原型对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 通过 类 实现面向对象编程 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span> &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Star</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Star</span>))</span><br><span class="line"><span class="comment">// 1. 类的本质其实还是一个函数 我们也可以简单的认为 类就是 构造函数的另外一种写法</span></span><br><span class="line"><span class="comment">// (1) 类有原型对象prototype </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="comment">// (2) 类原型对象prototype 里面有constructor 指向类本身</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>)</span><br><span class="line"><span class="comment">// (3)类可以通过原型对象添加方法</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冰雨&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(ldh)</span><br><span class="line"><span class="comment">// (4) 类创建的实例对象有__proto__ 原型指向 类的原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure><blockquote><p>ES6的类其实就是语法糖</p><p>语法糖： 就是一直便捷的写法 （如果有两种方法可以实现相同的功能，那么写法更简单的哪一种就称为语法糖）</p></blockquote><h1 id="3-ES6的新增功能"><a href="#3-ES6的新增功能" class="headerlink" title="3 - ES6的新增功能"></a>3 - ES6的新增功能</h1><h2 id="3-1-数组的使用方法"><a href="#3-1-数组的使用方法" class="headerlink" title="3.1 数组的使用方法"></a>3.1 数组的使用方法</h2><h3 id="3-1-1-forEach-遍历数组"><a href="#3-1-1-forEach-遍历数组" class="headerlink" title="3.1.1 forEach - 遍历数组"></a>3.1.1 forEach - 遍历数组</h3><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><code>value</code>:  数组元素</p><p><code>index(可选)</code>: 数组元素当前的索引</p><p><code>array(可选)</code>: 当前的数组(一般不用)</p><p><strong>示例：</strong></p><p><strong>CODE14</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach 迭代(遍历) 数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前数组元素&#x27;</span>, value)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前数组元素的索引号&#x27;</span>, index)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组本身&#x27;</span>, array)</span><br><span class="line">    sum += value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br></pre></td></tr></table></figure><blockquote><p>思考：</p><ol><li><p>与for循环做对比</p></li><li><p>forEach有无break和continue？</p><p> //不可以，因为forEach是一个函数，没有break，continue这些方法</p></li><li><p>return可以终止forEach循环吗？</p><p>不能终止循环，但可以跳过当前循环并进入到下一次循环对标==》for循环中的continue</p></li></ol></blockquote><h3 id="3-1-2-map-基于原数组-构建新数组"><a href="#3-1-2-map-基于原数组-构建新数组" class="headerlink" title="3.1.2 map - 基于原数组  构建新数组"></a>3.1.2 map - 基于原数组  构建新数组</h3><blockquote><p><code>map()</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的<u>返回值组成。(一定得加return，return执行之前，map函数已经执行完毕)</u></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="comment">// Return element for new_array</span></span><br><span class="line">    <span class="comment">// 为新数组添加一个新元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><code>value</code>:  数组元素</p><p><code>index(可选)</code>: 数组元素当前的索引</p><p><code>array(可选)</code>: 当前的数组(一般不用)</p><p><strong>返回值：</strong></p><p>​        一个由原数组每个元素执行回调函数的结果组成的新数组。</p><p>map不会改变原数组，但是如果里面是引用类型那么他的地址不会变，但属性和方法可能会发生变化</p><p><strong>示例：</strong></p><p><strong>CODE16</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value, index</span>) &#123;</span><br><span class="line">    value.<span class="property">age</span> = index</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h3 id="3-1-3-filter-过滤数组"><a href="#3-1-3-filter-过滤数组" class="headerlink" title="3.1.3 filter - 过滤数组"></a>3.1.3 filter - 过滤数组</h3><blockquote><p><code>filter()</code> 方法创建一个新数组, 其包含通过所提供函数实现的测试的**<u>所有元素。</u>** </p></blockquote><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filterArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="comment">// Return Boolean to filter Array</span></span><br><span class="line">    <span class="comment">// 返回一个布尔值确定是否过滤当前元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><code>value</code>:  数组元素</p><p><code>index(可选)</code>: 数组元素当前的索引</p><p><code>array(可选)</code>: 当前的数组(一般不用)</p><p><strong>返回值：</strong></p><p>​        一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</p><p><strong>示例：</strong></p><p><strong>CODE15</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter 筛选数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">88</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value, index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt;= <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure><h3 id="3-1-4-some-确定数组是否满足条件"><a href="#3-1-4-some-确定数组是否满足条件" class="headerlink" title="3.1.4 some - 确定数组是否满足条件"></a>3.1.4 some - 确定数组是否满足条件</h3><blockquote><p><code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="comment">// Return true or false</span></span><br><span class="line">    <span class="comment">// 返回真或假</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><code>value</code>:  数组元素</p><p><code>index(可选)</code>: 数组元素当前的索引</p><p><code>array(可选)</code>: 当前的数组(一般不用)</p><p><strong>返回值：</strong></p><p>​        数组中有至少一个元素通过回调函数的测试就会返回**<code>true</code>**；</p><p>​        所有元素都没有通过回调函数的测试返回值才会为false。</p><p><strong>注意：</strong></p><p><strong>示例：</strong></p><p><strong>CODE16</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> flag1 = arr1.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag1)</span><br></pre></td></tr></table></figure><blockquote><p>思考： some 和filter 都是判断数组元素是否满足条件，那么他们的区别是什么</p><p>答：</p><ol><li><p> filter 也是查找满足条件的元素 返回的是一个数组 而且是<u>把所有满足条件的元素返回回来</u></p></li><li><p> some 也是查找满足条件的元素是否存在  返回的是一个布尔值 <u>如果查找到第一个满足条件的元素就终止循环</u></p></li></ol></blockquote><h3 id="3-1-5-every-确定数组是否全部满足条件"><a href="#3-1-5-every-确定数组是否全部满足条件" class="headerlink" title="3.1.5 every - 确定数组是否全部满足条件"></a>3.1.5 every - 确定数组是否全部满足条件</h3><blockquote><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="comment">// Return true or false</span></span><br><span class="line">    <span class="comment">// 返回真或假</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><code>value</code>:  数组元素</p><p><code>index(可选)</code>: 数组元素当前的索引</p><p><code>array(可选)</code>: 当前的数组(一般不用)</p><p><strong>返回值：</strong></p><p>​        如果回调函数的每一次返回都为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthy</a> 值，返回 <code>true</code> ，否则返回 <code>false</code>。</p><p><strong>注意：</strong></p><p>​        <code>every()</code> 方法只要查找到一个不满足条件的元素就立马终止循环</p><p><strong>示例：</strong></p><p><strong>CODE17</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">18</span>, <span class="number">20</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">var</span> flag1 = arr1.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt;= <span class="number">18</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag1)</span><br></pre></td></tr></table></figure><h3 id="3-1-6-案例"><a href="#3-1-6-案例" class="headerlink" title="3.1.6 案例"></a>3.1.6 案例</h3><p><img src="/2022/05/09/jsadvanced02/image-20220420141309926.png" alt="image-20220420141309926"></p><p><strong>要求：</strong></p><ol><li>id、产品名称、价格不应该写死，应该通过数据渲染出来</li><li>通过查询价格区间显示下面列表中符合条件的商品</li><li>通过商品名称来显示下面列表中符合条件的商品</li></ol><h4 id="3-1-6-1-步骤一：实时渲染数据"><a href="#3-1-6-1-步骤一：实时渲染数据" class="headerlink" title="3.1.6.1 步骤一：实时渲染数据"></a>3.1.6.1 步骤一：实时渲染数据</h4><ol><li><p>定义数组对象数据</p><p><strong>CODE18</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">3999</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;oppo&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">999</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;荣耀&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">1299</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">&#125;, ];</span><br></pre></td></tr></table></figure></li><li><p>获取相应的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>) <span class="comment">// 获取tbody</span></span><br></pre></td></tr></table></figure></li><li><p>把数据渲染到页面中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setData</span>(<span class="params">mydata</span>) &#123;</span><br><span class="line">    <span class="comment">// 先清空原来tbody 里面的数据</span></span><br><span class="line">    tbody.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    mydata.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(value)</span></span><br><span class="line">        <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">        tr.<span class="property">innerHTML</span> = <span class="string">`&lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;value.id&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">$&#123;value.pname&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">$&#123;value.price&#125;</span>&lt;/td&gt;&lt;/tr&gt;`</span></span><br><span class="line">        <span class="comment">// 添加到tbody标签中</span></span><br><span class="line">        tbody.<span class="title function_">appendChild</span>(tr)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setData</span>(data)</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-1-6-2-步骤二：根据价格查询商品"><a href="#3-1-6-2-步骤二：根据价格查询商品" class="headerlink" title="3.1.6.2 步骤二：根据价格查询商品"></a>3.1.6.2 步骤二：根据价格查询商品</h4><ol><li><p>获取价格区间查询按钮元素，金额开始和结束区间元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search_price = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.search-price&#x27;</span>) <span class="comment">// 获取价格区间查询按钮元素</span></span><br><span class="line"><span class="keyword">var</span> start = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.start&#x27;</span>) <span class="comment">// 金额开始元素</span></span><br><span class="line"><span class="keyword">var</span> end = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.end&#x27;</span>) <span class="comment">// 金额结束元素</span></span><br></pre></td></tr></table></figure></li><li><p>绑定点击事件，根据商品价格去筛选数组里面的对象，把筛选完成之后的对象更新渲染到页面上去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">search_price.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 筛选列表数组中符合start和end区间中的元素</span></span><br><span class="line">    <span class="keyword">var</span> newDate = data.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">price</span> &gt;= start.<span class="property">value</span> &amp;&amp; item.<span class="property">price</span> &lt;= end.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 把筛选完之后的对象渲染到页面中</span></span><br><span class="line">    <span class="title function_">setDate</span>(newDate)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-1-6-3-根据商品名称查找商品"><a href="#3-1-6-3-根据商品名称查找商品" class="headerlink" title="3.1.6.3 根据商品名称查找商品"></a>3.1.6.3 根据商品名称查找商品</h4><ol><li><p>获取名称查询按钮元素，名称输入框元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> product = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.product&#x27;</span>); <span class="comment">// 获取名称查询按钮元素</span></span><br><span class="line"><span class="keyword">var</span> search_pro = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.search-pro&#x27;</span>); <span class="comment">// 获取名称输入框元素</span></span><br></pre></td></tr></table></figure></li><li><p>绑定点击事件，根据商品查询名称进行筛选，把筛选完成之后的对象更新渲染到页面上去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果查询数组中唯一的元素, 用some方法更合适,因为它找到这个元素,就不在进行循环,效率更高</span></span><br><span class="line">search_pro.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    data.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">pname</span> === product.<span class="property">value</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(value)</span></span><br><span class="line">            arr.<span class="title function_">push</span>(item)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// return 后面必须写 true  </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 把拿到的数据渲染到页面中</span></span><br><span class="line">    <span class="title function_">setData</span>(arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-2-字符串方法"><a href="#3-2-字符串方法" class="headerlink" title="3.2 字符串方法"></a>3.2 字符串方法</h2><h3 id="3-2-1-trim-去除两侧空格"><a href="#3-2-1-trim-去除两侧空格" class="headerlink" title="3.2.1 trim() - 去除两侧空格"></a>3.2.1 trim() - 去除两侧空格</h3><blockquote><p><code>trimStart()</code> 方法从字符串的开头删除空格。<code>trimLeft()</code> 是此方法的别名。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure><p><strong>返回值：</strong></p><p>​        一个代表调用字符串两端去掉空白的新字符串。</p><p><strong>注意：</strong></p><p>​        <code>trim()</code> 方法返回一个从两头去掉空白字符的字符串，并不影响原字符串本身。</p><p><strong>示例：</strong></p><p><strong>CODE19</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;   an  dy   &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="keyword">var</span> str1 = str.<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1);</span><br></pre></td></tr></table></figure><p><strong>实际使用场景：输入框前后有空格</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// trim 方法去除字符串两侧空格</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>); <span class="comment">// 获取输入框内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>); <span class="comment">// 获取点击按钮元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 获取后续需要展示内容的div</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> str = input.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (str === <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;请输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">innerHTML</span> = str;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-对象方法"><a href="#3-3-对象方法" class="headerlink" title="3.3 对象方法"></a>3.3 对象方法</h2><h3 id="3-3-1-Object-keys-obj-获取对象的所有属性名"><a href="#3-3-1-Object-keys-obj-获取对象的所有属性名" class="headerlink" title="3.3.1 Object.keys(obj) - 获取对象的所有属性名"></a>3.3.1 Object.keys(obj) - 获取对象的所有属性名</h3><blockquote><p><code>Object.keys()</code> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><code>obj</code>:  要返回其枚举自身属性的对象。</p><p><strong>返回值：</strong></p><p>​        一个表示给定对象的所有可枚举属性的字符串数组。</p><p><strong>描述：</strong></p><p>​        <code>Object.keys</code> 返回一个所有元素为字符串的数组，其元素来自于从给定的<code>object</code>上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p><p><strong>示例：</strong></p><p><strong>CODE20</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">1999</span>,</span><br><span class="line">    <span class="attr">num</span>: <span class="number">2000</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-3-2-Object-defineProperty-重新定义对象属性"><a href="#3-3-2-Object-defineProperty-重新定义对象属性" class="headerlink" title="3.3.2 Object.defineProperty - 重新定义对象属性"></a>3.3.2 Object.defineProperty - 重新定义对象属性</h3><blockquote><p><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p><p><font color="red">注意： 应当直接在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a> 构造器对象上调用此方法，而不是在任意一个 <code>Object</code> 类型的实例上调用。</font></p></blockquote><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><p><code>obj</code>:  要定义属性的对象。</p><p><code>prop</code>:  要定义或修改的属性的名称。</p><p><code>descriptor</code>:  要定义或修改的属性描述符，以对象的形式书写。</p><ul><li><p><code>configurable</code></p><p>当且仅当该属性的 <code>configurable</code> 键值为 <code>true</code> 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。<br><strong>默认为</strong> **<code>false</code>**。</p></li><li><p><code>enumerable</code></p><p>当且仅当该属性的 <code>enumerable</code> 键值为 <code>true</code> 时，该属性才会出现在对象的枚举属性中。<br>**默认为 <code>false</code>**。</p></li><li><p><code>value</code></p><p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<br>**默认为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>**。</p></li><li><p><code>writable</code></p><p>当且仅当该属性的 <code>writable</code> 键值为 <code>true</code> 时，属性的值，也就是上面的 <code>value</code>，才能被<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators"><code>赋值运算符</code> (en-US)</a>改变。<br><strong>默认为 <code>false</code>。</strong></p></li></ul><p><strong>返回值：</strong></p><p>​        被传递给函数的对象。</p><p><strong>示例：</strong></p><p><strong>CODE21</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.defineProperty() 定义新属性或修改原有的属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1. 以前的对象添加和修改属性的方式</span></span><br><span class="line"><span class="comment">// obj.num = 1000;</span></span><br><span class="line"><span class="comment">// obj.price = 99;</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.defineProperty() 定义新属性或修改原有的属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;num&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">100</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Object.defineProperty() 让新增的或修改的属性可以被枚举（遍历）</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;num&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Object.defineProperty() 不允许修改目标属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;id&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">writable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Object.defineProperty() 不允许删除这个属性 不允许在修改第三个参数里面的特性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;id&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">id</span>; <span class="comment">// 不能删除</span></span><br><span class="line"><span class="comment">// 再次改变 configurable 状态</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;id&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">&#125;); <span class="comment">// 不允许在修改第三个参数descriptor的特性</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-构造函数和原型&quot;&gt;&lt;a href=&quot;#1-构造函数和原型&quot; class=&quot;headerlink&quot; title=&quot;1 - 构造函数和原型&quot;&gt;&lt;/a&gt;1 - 构造函数和原型&lt;/h1&gt;&lt;p&gt;目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解构造函数与原型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;原型链的概念&lt;/font&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通过原型扩展内置方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-1-对象的三种创建方式-复习&quot;&gt;&lt;a href=&quot;#1-1-对象的三种创建方式-复习&quot; class=&quot;headerlink&quot; title=&quot;1.1 对象的三种创建方式 - 复习&quot;&gt;&lt;/a&gt;1.1 对象的三种创建方式 - 复习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;概念： **&lt;font color=&quot;red&quot;&gt;构造函数&lt;/font&gt;**主要用来初始化对象，即为对象成员变量赋初始值，和&lt;code&gt;new&lt;/code&gt;关键字一起使用。可以目标对象中的一些公共属性和方法抽取出来，然后封装到这个函数中 。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>原型--必背</title>
    <link href="http://example.com/2022/05/09/%E5%8E%9F%E5%9E%8B%E5%BF%85%E8%83%8C/"/>
    <id>http://example.com/2022/05/09/%E5%8E%9F%E5%9E%8B%E5%BF%85%E8%83%8C/</id>
    <published>2022-05-09T09:38:51.387Z</published>
    <updated>2022-05-09T09:39:57.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-new-在执行时做的4件事"><a href="#一-new-在执行时做的4件事" class="headerlink" title="一. new 在执行时做的4件事"></a>一. new 在执行时做的4件事</h3><ol><li>在内存中创建一个新的空对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（构造函数里不需要return）<span id="more"></span></li></ol><h3 id="二-构造函数"><a href="#二-构造函数" class="headerlink" title="二. 构造函数"></a>二. 构造函数</h3><h4 id="2-1-静态方法-属性-实例方法-属性"><a href="#2-1-静态方法-属性-实例方法-属性" class="headerlink" title="2.1 静态方法/属性 - 实例方法/属性"></a>2.1 静态方法/属性 - 实例方法/属性</h4><p>实例成员只能通过实例化的对象来访问， 不可以通过构造函数来访问<br>静态成员只能通过构造函数来访问，不能通过对象来访问</p><h4 id="2-2-构造函数原型prototype"><a href="#2-2-构造函数原型prototype" class="headerlink" title="2.2 构造函数原型prototype"></a>2.2 构造函数原型prototype</h4><h5 id="2-2-1-prototype的作用"><a href="#2-2-1-prototype的作用" class="headerlink" title="2.2.1 prototype的作用"></a>2.2.1 prototype的作用</h5><p>共享方法</p><h5 id="2-2-2-prototype的概念"><a href="#2-2-2-prototype的概念" class="headerlink" title="2.2.2 prototype的概念"></a>2.2.2 prototype的概念</h5><p>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象。注意这个<br>prototype 就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。<br>补充： 将构造函数中恒定的方法放到它的 prototype 原型对象中， 减少每次实例化对象时的内存<br>消耗</p><h4 id="2-3-构造函数的写法"><a href="#2-3-构造函数的写法" class="headerlink" title="2.3 构造函数的写法"></a>2.3 构造函数的写法</h4><ol><li>将公共属性定义到构造函数中</li><li>将公共方法放到它的原型对象上</li></ol><h4 id="2-4-对象原型-proto"><a href="#2-4-对象原型-proto" class="headerlink" title="2.4 对象原型 proto"></a>2.4 对象原型 <strong>proto</strong></h4><p>实例对象都会有一个属性 <strong>proto</strong> 指向构造函数的 prototype 原型对象。之所以我们对象可以<br>使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。<br>function Person (name,sex) { // class Person<br>// var this = new Object()<br>this.name = name<br>this.sex = sex<br>// return this<br>} </p><p>var obj = new Person(‘lbw’, ‘男’)<br>查找规则：</p><ol><li><p>先看实例化对象（ldh）上是否有目标方法（sing），如果有，则执行该方法</p></li><li><p>如果实例化对象（ldh）上没有该方法，因为有 <strong>proto</strong> ，就可以去构造函数原型对象<br>prototype 上去查找</p></li></ol><h4 id="2-5-constructor-构造函数"><a href="#2-5-constructor-构造函数" class="headerlink" title="2.5 constructor 构造函数"></a>2.5 constructor 构造函数</h4><h4 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h4><p>构造函数原型对象（prototype）里面有一个 constructor 属性 ，constructor 我们称为构造函数，<br>因为它指回构造函数本身。主要用于记录该对象引用于哪个构造函数。</p><h4 id="2-6-构造函数、实例化对象，原型对象的关系-★★★★★-面"><a href="#2-6-构造函数、实例化对象，原型对象的关系-★★★★★-面" class="headerlink" title="2.6 构造函数、实例化对象，原型对象的关系(★★★★★ - 面"></a>2.6 构造函数、实例化对象，原型对象的关系(★★★★★ - 面</h4><p>试必背 500RMB)</p><ol><li>构造函数的 prototype 属性指向了构造函数原型对象 prototype</li><li>实例对象是由构造函数创建的,实例对象的 <strong>proto</strong> 属性指向了构造函数的原型对象</li><li>构造函数的原型对象的constructor属性指向了构造函数,实例对象的原型的constructor属性也指向<br>了构造函数</li></ol><h4 id="2-7-原型链"><a href="#2-7-原型链" class="headerlink" title="2.7 原型链"></a>2.7 原型链</h4><p>每一个实例对象都有一个 <strong>proto</strong> 属性，指向的构造函数的原型对象 prototype ，构造函数的原型<br>对象 prototype 也是一个对象，也有 <strong>proto</strong> 属性，这样一层一层往上找直到找到 Object 的<br>prototype ，他的 <strong>proto</strong> 值为 null ，这就是原型链。<br>2.7.1 原型链上的成员查找机制</p><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li>如果没有就查找它的原型（也就是 <strong>proto</strong> 指向的 prototype 原型对象）。</li><li>如果还没有就查找原型对象的原型（Object的原型对象prototype）。</li><li>依此类推一直找到 Object 的prototype 为止，它的 <strong>proto</strong> 为（null）。</li></ol><h4 id="2-8-原型对象的this指向"><a href="#2-8-原型对象的this指向" class="headerlink" title="2.8 原型对象的this指向"></a>2.8 原型对象的this指向</h4><p>构造函数中的this和原型对象的this，都指向我们new出来的实例对象  </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一-new-在执行时做的4件事&quot;&gt;&lt;a href=&quot;#一-new-在执行时做的4件事&quot; class=&quot;headerlink&quot; title=&quot;一. new 在执行时做的4件事&quot;&gt;&lt;/a&gt;一. new 在执行时做的4件事&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在内存中创建一个新的空对象&lt;/li&gt;
&lt;li&gt;让this指向这个新的对象&lt;/li&gt;
&lt;li&gt;执行构造函数里面的代码，给这个新对象添加属性和方法&lt;/li&gt;
&lt;li&gt;返回这个新对象（构造函数里不需要return）&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>手写一个new</title>
    <link href="http://example.com/2022/05/09/7-%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/05/09/7-%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-05-09T07:04:06.531Z</published>
    <updated>2022-05-11T10:57:21.214Z</updated>
    
    <content type="html"><![CDATA[<ol><li>创建一个空的简单JavaScript对象（即{}）；</li><li>为步骤1新创建的对象添加属性<code>__proto__</code>，将该属性链接至构造函数的原型对象 ；</li><li>将步骤1新创建的对象作为this的上下文 ；</li><li>如果该函数没有返回对象，则返回this。</li></ol><blockquote><p>new关键词执行后总会返回一个对象, 要么是实例对象, 要么是return语句指定的对象.</p></blockquote><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params">fn,...args</span>)&#123;</span><br><span class="line">    <span class="comment">// let obj = new Object()</span></span><br><span class="line">    <span class="comment">// obj.__proto__ = fn.prototype</span></span><br><span class="line">    <span class="comment">// 基于fn构造函数原型创建一个新对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="comment">// 执行构造函数，并获取fn执行的结果</span></span><br><span class="line">    <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(obj,...args) </span><br><span class="line">    <span class="comment">// 如果执行结果有返回值并且是一个对象，返回执行结果，否则，返回新创建的对象</span></span><br><span class="line">    <span class="keyword">let</span> isObject = <span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> &amp;&amp; res !== <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> isFunction = <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> isObject || isFunction  ? res : obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好理解</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(obj,...args)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (res &amp;&amp; (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span>)) retrun res</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span> (o) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个对象，以o为新创建对象的原型对象</span></span><br></pre></td></tr></table></figure><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><ul><li>Instanceof: 用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</li><li>通俗一点就是： 判断new出的实例对象是否是当前构造函数生成的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">my_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// getProtypeOf是Object对象自带的API</span></span><br><span class="line">  <span class="comment">// 返回指定对象的原型（内部[[Prototype]]属性的值）隐式原型</span></span><br><span class="line">  <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left);</span><br><span class="line">  <span class="keyword">let</span> prototype = right.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;                  <span class="comment">//循环往下寻找，直到找到相同的原型对象</span></span><br><span class="line">    <span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(proto === prototype) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//找到相同原型对象，返回true</span></span><br><span class="line">    proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更好理解版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">my_instanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> proto = left.<span class="property">__proto__</span></span><br><span class="line">    <span class="keyword">let</span> prototype = right.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// 右边的原型</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (proto === prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        proto = proto.<span class="property">__proto__</span> <span class="comment">// 向上查找，直到proto为null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔥手写Promise-all"><a href="#🔥手写Promise-all" class="headerlink" title="🔥手写Promise.all"></a>🔥手写Promise.all</h2><ol><li>参数可迭代</li><li>返回值是promise</li><li>如果全部成功，状态变为resolve</li><li>但凡有一个失败，状态变为reject</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PromiseAll</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">`<span class="subst">$&#123;arr&#125;</span> is not iterable`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = []  <span class="comment">// 存放结果</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span> <span class="comment">// 进入fullfilled的promise个数</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 这里默认把所有入参都包装成promise返回了</span></span><br><span class="line">            <span class="comment">// 因为如果是普通值,在Promise内部实现 2.3.4时, 有返回值的操作</span></span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(arr[i]).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// counter++;</span></span><br><span class="line">                result[i] = value;</span><br><span class="line">                <span class="keyword">if</span> ( ++count === arr.<span class="property">length</span>) <span class="title function_">resolve</span>(result) <span class="comment">//判断已经完成</span></span><br><span class="line">                <span class="comment">// 只要有一个被rejected时, 就reject</span></span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">reject</span>(e))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手写call-apply-bind"><a href="#手写call-apply-bind" class="headerlink" title="手写call, apply, bind"></a>手写call, apply, bind</h2><ul><li><a href="https://juejin.cn/post/6844904042452221960#heading-9">https://juejin.cn/post/6844904042452221960#heading-9</a> 可参考</li><li><a href="https://juejin.cn/post/6844903809206976520#heading-10">https://juejin.cn/post/6844903809206976520#heading-10</a> 可参考</li><li>共同点：都是改变this指向 </li><li>区别<ul><li>call 和 apply是立即执行的，而bind是返回一个新的函数，需要手动去调用</li><li>call可以传递多个参数，第一个参数和apply’一样，是用来替换的对象，后边是参数列表</li><li>apply最多智能有两个参数  （新this对象，数组argsArray）-&gt;  fun.apply(thisArg, [argsArray])</li></ul></li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><ul><li>改变this指向</li><li>函数立即执行，返回执行结果</li><li><a href="https://juejin.cn/post/6844903906279964686#heading-19">https://juejin.cn/post/6844903906279964686#heading-19</a> 可参考</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_call</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断上下文对象</span></span><br><span class="line">    context = context ？<span class="title class_">Object</span>(context) : <span class="variable language_">window</span></span><br><span class="line">    <span class="comment">// 创造唯一key值，作为我们构造的context内部方法名</span></span><br><span class="line">    <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;thisFn&#x27;</span>) </span><br><span class="line">     <span class="comment">// 1. 将fn作为属性添加到context上</span></span><br><span class="line">    context[fn] = <span class="variable language_">this</span> <span class="comment">// 隐式绑定，改变构造函数的调用者间接改变 this 指向</span></span><br><span class="line">    <span class="comment">// 2. 将挂载以后的方法调用</span></span><br><span class="line">    <span class="keyword">let</span> res = context[fn](...args)  <span class="comment">// 这里..args将args数组，变为参数列表，数组的扩展运算符</span></span><br><span class="line">    <span class="comment">// 3. 删除新添加的对象属性</span></span><br><span class="line">    <span class="keyword">delete</span> context[fn]</span><br><span class="line">    <span class="comment">// 4. 返回调用结果</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func.apply(thisArg, [argsArray])</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">thisArg, args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="title class_">Symbol</span>(<span class="string">&#x27;fn&#x27;</span>) <span class="comment">// 创建个独一无二的方法名</span></span><br><span class="line">    thisArg[fn] = <span class="variable language_">this</span> <span class="comment">// 方法变换执行对象</span></span><br><span class="line">    <span class="keyword">let</span> res = thisArg[fn](...args) </span><br><span class="line">    <span class="keyword">delete</span> thisArg[fn] <span class="comment">// 删除对象属性</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><ul><li>改变this指向</li><li>返回一个新函数</li><li>新函数可能被当做构造函数调用，函数可能有返回值</li><li>当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效</li><li>传递参数并柯里化</li><li><a href="https://www.jianshu.com/p/b540e1e17f54">https://www.jianshu.com/p/b540e1e17f54</a> 参考</li><li><a href="https://github.com/mqyqingfeng/Blog/issues/12">https://github.com/mqyqingfeng/Blog/issues/12</a>  冴羽</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // ES2015 arguments是一个对象，类数组；</span></span><br><span class="line"><span class="comment">// const args = Array.from(arguments);</span></span><br><span class="line"><span class="comment">// const args = [...arguments];</span></span><br><span class="line"><span class="comment">// let new_array = old_array.concat(value1,value2,...)</span></span><br><span class="line"><span class="comment">// concat后面参数可以是数组，也可以是参数本身</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;this is not a function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>) <span class="comment">// 第一个参数是this，截取掉</span></span><br><span class="line">    <span class="keyword">const</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> fBound =  <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 返回一个绑定了this指向的方法，闭包</span></span><br><span class="line">        <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="comment">// _self.call(context, ...args.concat(...arguments)) 参数为数组，用apply简单</span></span><br><span class="line">      <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> instance <span class="keyword">of</span> fNOP ? <span class="variable language_">this</span> : context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.方法1 原型式继承</span></span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>(); <span class="comment">//绑定原型 原型式继承</span></span><br><span class="line">    <span class="comment">// 2. 方法2: fBound.prototype = Object.create(this.prototype)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去注释 double</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind2</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 判断调用bind的是否是函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;this is not a function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 保存当前环境上下文，取截取this后的传入参数</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span>  </span><br><span class="line">    <span class="keyword">const</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="comment">// 1.当作为构造函数 new操作的时候，this指向实例，将绑定函数的this指向该实例，可以让实例获得来自绑定函数的值</span></span><br><span class="line">      <span class="comment">// 2.当作为普通函数时，将绑定函数的this指向context</span></span><br><span class="line">      <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="variable language_">this</span> : context, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.原型式继承</span></span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>()</span><br><span class="line">  <span class="comment">// 复制原函数的prototype给fBound， 一些情况下函数没有prototype，如箭头函数</span></span><br><span class="line">  <span class="comment">// fBound.prototype.__proto__ = (fNOP.prototype=this.prototype)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   fBound.prototype = this.prototype;</span></span><br><span class="line"><span class="comment">// 直接修改 fBound.prototype 的时候，也会直接修改绑定函数的 prototype</span></span><br></pre></td></tr></table></figure><h4 id="bind2"><a href="#bind2" class="headerlink" title="bind2"></a>bind2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://jsgodroad.com/interview/js/#%E6%89%8B%E5%86%99%E9%A2%98</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">var</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> F) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_this</span>(...args, ...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _this.<span class="title function_">apply</span>(context, args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔥bind3-new-2021-12-13"><a href="#🔥bind3-new-2021-12-13" class="headerlink" title="🔥bind3 new 2021-12-13"></a>🔥bind3 new 2021-12-13</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">objThis, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;what is trying to be bound is not callable&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span> <span class="comment">// 保存源函数,以及参数</span></span><br><span class="line">    <span class="keyword">const</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newArgs = args.<span class="title function_">concat</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="keyword">return</span> self.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> fBound ? <span class="variable language_">this</span> : objThis, newArgs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修复函数没有prototype的情况 // 维护原型关系</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">        fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// https://juejin.cn/post/6844903906279964686#heading-14</span></span><br></pre></td></tr></table></figure><h4 id="bind-polyfill-core-js"><a href="#bind-polyfill-core-js" class="headerlink" title="bind-polyfill-core-js"></a>bind-polyfill-core-js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Yes, it does work with `new (funcA.bind(thisArg, args))`</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span>) (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">ArrayPrototypeSlice</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>;</span><br><span class="line">  <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span>(<span class="params">otherThis</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// closest thing possible to the ECMAScript 5</span></span><br><span class="line">      <span class="comment">// internal IsCallable function</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Function.prototype.bind - what is trying to be bound is not callable&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> baseArgs= <span class="title class_">ArrayPrototypeSlice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>),</span><br><span class="line">        baseArgsLength = baseArgs.<span class="property">length</span>,</span><br><span class="line">        fToBind = <span class="variable language_">this</span>,</span><br><span class="line">        fNOP    = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        fBound  = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          baseArgs.<span class="property">length</span> = baseArgsLength; <span class="comment">// reset to default base arguments</span></span><br><span class="line">          baseArgs.<span class="property">push</span>.<span class="title function_">apply</span>(baseArgs, <span class="variable language_">arguments</span>);</span><br><span class="line">          <span class="keyword">return</span> fToBind.<span class="title function_">apply</span>(</span><br><span class="line">            <span class="comment">// 是否被new操作符调用，是的话就用新创建的this替换bind的this</span></span><br><span class="line">                 fNOP.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(<span class="variable language_">this</span>) ? <span class="variable language_">this</span> : otherThis, baseArgs</span><br><span class="line">          );</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      <span class="comment">// Function.prototype doesn&#x27;t have a prototype property</span></span><br><span class="line">      fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防止new了函数后改变原型导致原函数的原型被修改</span></span><br><span class="line">    fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fBound;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h4 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h4><ul><li>事件响应函数在一段时间后才执行,如果这段时间内再次调用,则重新计算。 在一定的时间间隔内,将多次触发变成一次触发</li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ol><li>限制鼠标连续点击（按钮提交等）</li><li>Scroll事件滚动防抖</li><li>搜索框输入查询</li><li>浏览器窗口缩放，resize事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.30secondsofcode.org/js/s/debounce 目前看见最简写法，best！</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, ms = <span class="number">0</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutId</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123; </span><br><span class="line">    <span class="comment">// function(...args) rest参数 ，将args转为数组</span></span><br><span class="line">    <span class="comment">// 对比数组的扩展运算法 fn.call(obj,...args) 含义不一样, 将args转为参数列表</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timerId) <span class="comment">// 每次点击的时候清除上一个定时器，重新计时</span></span><br><span class="line">    timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args), ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流  throttle"></a>节流  throttle</h4><ul><li>持续的触发事件,每隔一段时间, 只执行一次 ，减少一段时间的触发频率</li></ul><h5 id="时间戳版本"><a href="#时间戳版本" class="headerlink" title="时间戳版本"></a>时间戳版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, wait</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// Date.now || + new Date() || new Date().getTime() || new Date().valueOf()</span></span><br><span class="line">      <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      <span class="keyword">if</span> (now - pre &gt; = wait) &#123;</span><br><span class="line">        <span class="comment">// apply第二个参数可以是数组，也可以是类数组对象</span></span><br><span class="line">        <span class="comment">// 所以写arguments没有问题！</span></span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        pre = <span class="title class_">Date</span>.<span class="title function_">now</span>() <span class="comment">// 将当前时间记录， 作为下一个计时起点</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时器版本"><a href="#定时器版本" class="headerlink" title="定时器版本"></a>定时器版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, wait</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> timerId </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timerId) &#123;</span><br><span class="line">      <span class="comment">// 这里箭头函数，this本身指向上层</span></span><br><span class="line">      timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        timerId = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冴羽 https://github.com/mqyqingfeng/Blog/issues/26</span></span><br></pre></td></tr></table></figure><h2 id="deepClone深拷贝"><a href="#deepClone深拷贝" class="headerlink" title="deepClone深拷贝 !!!"></a>deepClone深拷贝 !!!</h2><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ol><li>Object.assign()</li><li><code>...</code>扩展运算符 <strong><code>let cloneObj = &#123;...obj&#125;</code> <code>let newArr = [...arr]</code></strong></li><li>数组的Slice(), concat()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shallowClone</span> = obj =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><h5 id="乞丐版"><a href="#乞丐版" class="headerlink" title="乞丐版"></a>乞丐版</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>( <span class="title class_">JSON</span>.<span class="title function_">stringify</span>( obj ) )</span><br></pre></td></tr></table></figure><ol><li>拷贝对象的值中如果有<code>函数</code>、<code>undefined</code>、<code>Symbol</code>，JSON.stringify序列化后的字符串中，这个键值对丢失</li><li>拷贝Date引用类型会变成字符串</li><li>拷贝RegExp会变成空对象 <code>&#123;&#125;</code></li><li>对象中含有 <code>NaN</code>、<code>Infinity</code> 会变成 <code>null</code></li><li>无法拷贝对象的原型链</li><li>无法拷贝不可枚举的属性 如Symbol</li><li>无法拷贝对象的循环引用 ， 即对象成环 <code>obj[key] = obj</code></li></ol><h5 id="🔥优化版"><a href="#🔥优化版" class="headerlink" title="🔥优化版"></a>🔥优化版</h5><ul><li><p>考虑 Date、RegExp类型， 直接生成一个新的实例返回</p></li><li><p>考虑数组  <code>let target = Array.isArray(obj)? [] : &#123;&#125;</code></p></li><li><p>考虑循环引用  利用WeakMap作为hash表， 检测到对象已存在于哈希表中，取出该值返回即可</p></li><li><p>针对不可枚举属性以及 Symbol 类型，使用 Reflect.ownKeys()</p></li><li><p>函数部分太复杂，函数的原型，多层柯里化等</p></li><li><p>针对Map, Set, Error等，Object.getOwnPropertyDescriptors(obj) 也不考虑</p></li><li><p>递归爆栈问题，改用循环解决，广度优先</p></li><li><p> <a href="https://segmentfault.com/a/1190000016672263">深拷贝的终极探索（99%的人都不知道）</a></p></li><li><p><a href="https://juejin.cn/post/6844903929705136141#heading-4">如何写出一个惊艳面试官的深拷贝?</a> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RangeError</span>: <span class="title class_">Maximum</span> call stack size exceeded</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测对象 </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj != <span class="literal">null</span>  <span class="comment">// !!obj</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deepClone</span> = (<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 值类型 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj)) <span class="keyword">return</span> obj</span><br><span class="line">  <span class="comment">// Date, RegExp  constructor容易被修改丢失，被认为不安全，不推荐作为判断</span></span><br><span class="line">  <span class="comment">// instanceof好一些</span></span><br><span class="line"><span class="comment">//  if (obj.constructor === Date) return new Date(obj)</span></span><br><span class="line"><span class="comment">//  if (obj.constructor === RegExp) return new RegExp(obj)</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">  <span class="comment">// 解决循环引用，查哈希表</span></span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">has</span>(obj)) <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj)</span><br><span class="line"><span class="comment">//     let allDesc = Object.getOwnPropertyDescriptors(obj)</span></span><br><span class="line"><span class="comment">//     let target = Object.create(Object.getPrototypeOf(obj),allDesc)</span></span><br><span class="line">  <span class="keyword">let</span> target = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125; <span class="comment">// 考虑数组</span></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, target)</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(obj[key])) &#123;</span><br><span class="line">      target[key] = <span class="title function_">deepClone</span>(obj[key], hash)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = obj[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><a href="https://yanhaijing.com/javascript/2018/10/10/clone-deep/">深拷贝的终极探索</a> </li></ol><h2 id="实现-5-add-3-minus-2-功能"><a href="#实现-5-add-3-minus-2-功能" class="headerlink" title="实现 (5).add(3).minus(2) 功能"></a>实现 (5).add(3).minus(2) 功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> number !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入数字～&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">valueOf</span>() + n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">minus</span> = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> number !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入数字～&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// return this - n </span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">valueOf</span>() - n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// (5).add(3).minus(2)</span></span><br></pre></td></tr></table></figure><h2 id="如何求数组最大值和最小值"><a href="#如何求数组最大值和最小值" class="headerlink" title="如何求数组最大值和最小值"></a>如何求数组最大值和最小值</h2><ol><li>循环后Math.max</li><li>reduce</li><li>sort排序后取最后</li><li>ES6 … + Math.max</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Math.max</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result =  <span class="title class_">Math</span>.<span class="title function_">max</span>(result, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 2. reduce</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">max</span>(<span class="params">prev, next</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(prev, next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(max));</span><br><span class="line"><span class="comment">// 3. sort</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a - b;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[arr.<span class="property">length</span> - <span class="number">1</span>])</span><br><span class="line"><span class="comment">// 4. ES6 ...</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr))</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><ul><li>双重for循环</li><li>new Set</li><li>indexOf</li><li>array.filter + indexOf</li><li>sort排序 + 相邻元素对比</li><li>Object 键值对 obj.hasOwnProperty</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 双重for循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. Set集合，不能有重复值</span></span><br><span class="line"><span class="keyword">const</span> newArr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="keyword">const</span> newArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resetArr</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</span></span><br><span class="line"><span class="comment">// filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. array.filter + indexOf</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">unique</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> res =  arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果第一次出现，相等</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. sort排序后相邻元素对比</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="comment">// i从1开始算 arr[i-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5.obj.hasOwnProperty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">resetArr</span>(arr)) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">// https://github.com/mqyqingfeng/Blog/issues/27</span></span><br></pre></td></tr></table></figure><h2 id="数组扁平化-flatten"><a href="#数组扁平化-flatten" class="headerlink" title="数组扁平化 flatten"></a>数组扁平化 flatten</h2><p><a href="https://juejin.cn/post/6844904025993773063">面试官连环追问：数组拍平（扁平化） flat 方法实现</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(flatten(arr)) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="🔥循环递归"><a href="#🔥循环递归" class="headerlink" title="🔥循环递归"></a>🔥循环递归</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(arr[i]))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>如果数组元素都是Number, 可以使用；但不推荐这种 toString+split方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]].<span class="title function_">toString</span>() <span class="comment">// &quot;1,2,3,4&quot;</span></span><br><span class="line"><span class="comment">// 场景却非常有限，如果数组是 [1, &#x27;1&#x27;, 2, &#x27;2&#x27;] 此方法不适合</span></span><br><span class="line"><span class="comment">// 扁平化不改变原数据类型</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> +item <span class="comment">//转为Number</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h3 id="🔥用reduce实现flat"><a href="#🔥用reduce实现flat" class="headerlink" title="🔥用reduce实现flat"></a>🔥用reduce实现flat</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法3</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, next</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> prev.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(next) ? <span class="title function_">flatten</span>(next) : next)</span><br><span class="line">    &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">flatten</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? <span class="title function_">flatten</span>(cur) : cur)</span><br><span class="line">  &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 理解 </span></span><br><span class="line"><span class="comment">// var arr = [2, [3, 4]];</span></span><br><span class="line"><span class="comment">// pre  cur</span></span><br><span class="line"><span class="comment">// []   2       0    [2]</span></span><br><span class="line"><span class="comment">// [2]  [3,4]   1    [2] wait </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []   3       0    [3]</span></span><br><span class="line"><span class="comment">// [3]  4       1    [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [2]  [3,4]       [2,3,4]</span></span><br></pre></td></tr></table></figure><h3 id="ES6-…"><a href="#ES6-…" class="headerlink" title="ES6 …"></a>ES6 …</h3><p>==[].concat(…arr)==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([].<span class="title function_">concat</span>(...arr)); <span class="comment">// [1, 2, [3, 4]]</span></span><br><span class="line"><span class="comment">// 这时，只可以扁平一层，顺着这个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><h2 id="🔥柯里化-curry"><a href="#🔥柯里化-curry" class="headerlink" title="🔥柯里化 curry"></a>🔥柯里化 curry</h2><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">curry</span> = (<span class="params">fn, ...args</span>) =&gt;&#123;</span><br><span class="line">  <span class="comment">// 当参数与fn参数相同，则直接执行函数 fn.length 形参个数</span></span><br><span class="line"><span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) <span class="keyword">return</span> <span class="title function_">fn</span>(...args)</span><br><span class="line">  <span class="comment">// 否则返回函数，合并参数，并继续自动柯里化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">curry</span>(fn, ...args, ...args2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数组合-compose"><a href="#函数组合-compose" class="headerlink" title="函数组合 compose"></a>函数组合 compose</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// redux中的实现 不一定准确 ，待整理</span></span><br><span class="line"><span class="comment">// https://github.com/mqyqingfeng/Blog/issues/45</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h2><p><a href="https://juejin.cn/post/7031322059414175774#heading-16">https://juejin.cn/post/7031322059414175774#heading-16</a></p><h2 id="千位分隔符"><a href="#千位分隔符" class="headerlink" title="千位分隔符"></a>千位分隔符</h2><p><a href="https://juejin.cn/post/6844903911686406158#heading-19">https://juejin.cn/post/6844903911686406158#heading-19</a></p><h2 id="异步控制并发数"><a href="#异步控制并发数" class="headerlink" title="异步控制并发数"></a>异步控制并发数</h2><h2 id="ES5继承（寄生组合继承）"><a href="#ES5继承（寄生组合继承）" class="headerlink" title="ES5继承（寄生组合继承）"></a>ES5继承（寄生组合继承）</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/mqyqingfeng/Blog">冴羽的博客</a></li><li><a href="https://juejin.cn/post/7000374304727089159">前端必刷手写题系列 [22]</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;创建一个空的简单JavaScript对象（即{}）；&lt;/li&gt;
&lt;li&gt;为步骤1新创建的对象添加属性&lt;code&gt;__proto__&lt;/code&gt;，将该属性链接至构造函数的原型对象 ；&lt;/li&gt;
&lt;li&gt;将步骤1新创建的对象作为this的上下文 ；&lt;/li&gt;
&lt;li&gt;如果该函数没有返回对象，则返回this。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;new关键词执行后总会返回一个对象, 要么是实例对象, 要么是return语句指定的对象.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级第04天（查表看得懂就足够了）</title>
    <link href="http://example.com/2022/05/08/jsadvanced04/"/>
    <id>http://example.com/2022/05/08/jsadvanced04/</id>
    <published>2022-05-08T13:25:03.281Z</published>
    <updated>2022-05-09T09:43:11.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1 - 正则表达式"></a>1 - 正则表达式</h1><p>目标：</p><ol><li>了解什么是正则表达式</li><li>在JS中的应用</li><li>正则表达式中的特殊字符</li><li>正则表达式的替换操作<span id="more"></span></li></ol><h2 id="1-1-正则表达式的概念"><a href="#1-1-正则表达式的概念" class="headerlink" title="1.1 正则表达式的概念"></a>1.1 正则表达式的概念</h2><blockquote><p><strong>正则表达式（ Regular Expression ）：</strong>是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是<strong>对象</strong>。</p><p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本</p></blockquote><p><strong>实际作用：</strong></p><ol><li><p>匹配文本(查)：</p><p>​        例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)；</p><p><img src="/2022/05/08/jsadvanced04/image-20220421135725533.png" alt="image-20220421135725533"></p></li><li><p>过滤文本(改)：</p><p>​        过滤掉页面内容中的一些敏感词(替换)；</p></li><li><p>提取文本(切)：</p><p>​        从字符串中获取目标的特定部分文本(提取) ；</p></li></ol><p><img src="/2022/05/08/jsadvanced04/image-20220421140107726.png" alt="image-20220421140107726"></p><p><code>注：其他语言也会使用正则表达式，但我们前端则使用 JavaScript 正则表达式完成表单验证。</code></p><h2 id="1-2-正则表达式的特点"><a href="#1-2-正则表达式的特点" class="headerlink" title="1.2 正则表达式的特点"></a>1.2 正则表达式的特点</h2><ol><li>灵活性、逻辑性和功能性非常的强。</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li><li>对于刚接触的人来说，比较晦涩难懂。比如：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></li><li>实际开发,一般都是<strong>直接复制写好的正则表达式</strong>，但是要求会使用正则表达式并且根据实际情况修改正则表达式.   比如用户名:   <code>/^[a-z0-9_-]&#123;3,16&#125;$/</code></li></ol><h2 id="1-3-正则表达式在js中的使用"><a href="#1-3-正则表达式在js中的使用" class="headerlink" title="1.3 正则表达式在js中的使用"></a>1.3 正则表达式在js中的使用</h2><h3 id="1-3-1-创建正则-new-RegExp"><a href="#1-3-1-创建正则-new-RegExp" class="headerlink" title="1.3.1 创建正则 - new RegExp"></a>1.3.1 创建正则 - <code>new RegExp</code></h3><p>在 JavaScript 中，可以通过两种方式创建一个正则表达式。</p><p><strong>方式一：</strong>利用<code>RegExp</code>对象的<strong>构造函数</strong>创建 </p><p><img src="/2022/05/08/jsadvanced04/image-20220421140858819.png" alt="image-20220421140858819"></p><p><strong>CODE01</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regExp);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> regExp);</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong>利用字面量创建 正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-检测正则-test"><a href="#1-3-2-检测正则-test" class="headerlink" title="1.3.2 检测正则 - test"></a>1.3.2 检测正则 - <code>test</code></h3><blockquote><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p></blockquote><p><strong>CODE02</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="number">123</span>));<span class="comment">//匹配字符中是否出现123  出现结果为true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//匹配字符中是否出现123 未出现结果为false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 思考：如果测试的是&#x27;123&#x27;字符串呢？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="1-4-正则表达式中的特殊字符"><a href="#1-4-正则表达式中的特殊字符" class="headerlink" title="1.4 正则表达式中的特殊字符"></a>1.4 正则表达式中的特殊字符</h2><blockquote><p>一个正则表达式可以由简单的字符构成，比如<code> /abc/</code>；</p><p>也可以是简单和特殊字符的组合，比如 <code>/ab*c/ </code>；</p><p>其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 <code>^ 、$ 、+ </code>等。</p></blockquote><p>特殊字符非常多，可以参考： </p><p>LINK：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN正则特殊字符</a></p><p><code>下面，分门别类的来介绍各常用特殊字符</code></p><h3 id="1-4-1-边界符"><a href="#1-4-1-边界符" class="headerlink" title="1.4.1 边界符 (^ $)"></a>1.4.1 边界符 (<code>^ $</code>)</h3><blockquote><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p></blockquote><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p>如果 ^和 $ 在一起，表示必须是精确匹配。</p><p><strong>CODE03</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>; <span class="comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /^abc/ 开头必须以abc开头</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// /abc$/ 结尾必须以abc开头</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/abc$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;aabc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^abc$/</span>; <span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-字符类"><a href="#1-4-2-字符类" class="headerlink" title="1.4.2 字符类"></a>1.4.2 字符类</h3><blockquote><p>字符类表示有<strong>一系列字符</strong>可供选择，只要匹配<strong>其中一个</strong>就可以了。所有可供选择的字符都放在方括号内。</p><p>简单来说就是更加模糊的匹配</p></blockquote><h4 id="1-4-2-1-方括号-匹配模式"><a href="#1-4-2-1-方括号-匹配模式" class="headerlink" title="1.4.2.1 [] 方括号 (匹配模式)"></a>1.4.2.1 [] 方括号 (匹配模式)</h4><blockquote><p> 表示有一系列字符可供选择，只要匹配其中一个就可以了</p></blockquote><p><strong>CODE04</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="comment">// 对比/abc/</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;baby&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;color&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;red&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三选一 只有是a 或者是b 或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;b&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;c&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg1.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 26个英文字母任何一个字母返回 true  - 表示的是a到z 的范围</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;z&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;A&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>字符组合</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大小写英文</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z]$/</span>;</span><br><span class="line"><span class="comment">// 大小写英文+数字</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="comment">// 大小写英文+数字+_-</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9_-]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="number">8</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;_&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg1.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>));</span><br><span class="line"><span class="comment">// 给正则加个!</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9_-!]$/</span>; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9!_-]$/</span>; <span class="comment">// 正确</span></span><br><span class="line"><span class="comment">// 原因: 有时候特殊符号组合起来是需要一定先后顺序的，遇到一个记一个</span></span><br></pre></td></tr></table></figure><p><strong>取反： [^]方括号内加^</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;B&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="number">8</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;!&#x27;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>思考： 上面[]方括号内的正则都只能检查一个字符，如果想要检查多个该怎么办呢？</p></blockquote><h4 id="1-4-2-2-量词符"><a href="#1-4-2-2-量词符" class="headerlink" title="1.4.2.2 量词符"></a>1.4.2.2 量词符</h4><blockquote><p>量词符用来设定某个模式出现的次数。</p></blockquote><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><ol><li><p>* 相当于 &gt;= 0 可以出现0次或者很多次</p><p><strong>CODE05</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a*$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比一下下面的精准匹配</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>+ 相当于 &gt;= 1 可以出现1次或者很多次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a+$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>?  相当于 1 || 0， 只可以出现一次或0次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a?$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>{ 3 } 需要重复3次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>{ 3, }  大于等于3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>{3, 16}  大于等于3 并且 小于等于16</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,16&#125;$/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaa&#x27;</span>));</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-4-2-3-匹配模式与量词的混合使用-输入验证"><a href="#1-4-2-3-匹配模式与量词的混合使用-输入验证" class="headerlink" title="1.4.2.3 匹配模式与量词的混合使用(输入验证)"></a>1.4.2.3 匹配模式与量词的混合使用(输入验证)</h4><blockquote><p>问题： 创建用户名，要求长度在6~16位，且只能出现字母数字和<code>_-</code></p><p><strong>CODE06</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  量词可以设定某个模式出现的次数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这个模式用户只能输入英文字母 数字 下划线 短横线但是有边界符和[]这就限定了只能多选1</span></span><br><span class="line"><span class="comment">通过量词来确定字符串中的每一个字符是否符合要求</span></span><br><span class="line"><span class="comment">&#123;6,16&#125; 中间不能有空格</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一下内容既要满足 匹配模式 又要满足 数量限制 才会返回 true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;8&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;18&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;andy-red&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;andy_red&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;andy007&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;andy!007&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-4-2-4-案例：用户名表单验证"><a href="#1-4-2-4-案例：用户名表单验证" class="headerlink" title="1.4.2.4 案例：用户名表单验证"></a>1.4.2.4 案例：用户名表单验证</h4><p><strong>需求：</strong></p><ol><li>如果用户名输入合法, 则后面提示信息为:  用户名合法,并且颜色为绿色</li><li>如果用户名输入不合法, 则后面提示信息为:  用户名不符合规范, 并且颜色为红色</li></ol><p><img src="/2022/05/08/jsadvanced04/img2-1650524983317.png" alt="img2"></p><p><img src="/2022/05/08/jsadvanced04/img1-1650524985886.png" alt="img1"></p><p><strong>分析：</strong></p><ol><li><p>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为6~16位；</p></li><li><p>首先准备好这种正则表达式模式 <code>/$[a-zA-Z0-9-_]&#123;6,16&#125;^/</code>；</p></li><li><p>当表单失去焦点就开始验证；</p></li><li><p>如果符合正则规范, 则让后面的span标签添加 right类；</p></li><li><p>如果不符合正则规范, 则让后面的span标签添加 wrong类</p><p><strong>CODE07</strong></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#aaa</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrong</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>逻辑代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取输入框</span></span><br><span class="line"><span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.uname&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取后面的提示信息</span></span><br><span class="line"><span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给输入框添加失焦事件</span></span><br><span class="line">uname.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 正则判断</span></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正确的&#x27;</span>);</span><br><span class="line">        span.<span class="property">className</span> = <span class="string">&#x27;right&#x27;</span>; <span class="comment">// 修改类名</span></span><br><span class="line">        span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入正确&#x27;</span>; <span class="comment">// 修改提示文本</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误的&#x27;</span>);</span><br><span class="line">        span.<span class="property">className</span> = <span class="string">&#x27;wrong&#x27;</span>; <span class="comment">// 修改类名</span></span><br><span class="line">        span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入不正确&#x27;</span>; <span class="comment">// 修改提示文本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-5-括号总结"><a href="#1-4-2-5-括号总结" class="headerlink" title="1.4.2.5 括号总结"></a>1.4.2.5 括号总结</h4><ol><li><p>中括号 字符集合。匹配方括号中的任意字符. </p><p><strong>CODE08</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示abc中任意一个即可</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[abc]$/</span></span><br></pre></td></tr></table></figure></li><li><p>大括号  量词符.  里面表示重复次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示重复3个a</span></span><br><span class="line"><span class="keyword">var</span> rag = <span class="regexp">/^a&#123;3&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rag = <span class="regexp">/^abc&#123;3&#125;$/</span> <span class="comment">// 它只是让c重复三次 精准匹配abccc</span></span><br></pre></td></tr></table></figure><blockquote><p>思考： 如何让<code>abc</code>都重复3次呢？</p></blockquote></li><li><p>小括号表示优先级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(abc)&#123;3&#125;$/</span>; <span class="comment">// 它是让abcc重复三次</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcabcabc&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abccc&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://c.runoob.com/">正则表达式在线测试</a></p><h3 id="1-4-3-预定义类"><a href="#1-4-3-预定义类" class="headerlink" title="1.4.3 预定义类"></a>1.4.3 预定义类</h3><blockquote><p> 预定义类指的是某些常见模式的简写方式</p></blockquote><p><img src="/2022/05/08/jsadvanced04/img3-1650526170781.png" alt="img3"></p><p><em>辅助记忆： 大写就是取反</em></p><blockquote><p>练习：验证座机号</p><p>座机号格式： 010-12345678  或者  0530-1234567</p><p>也就是：先有3<del>4个数字，然后中横线<code>-</code>连接，最后7</del>8位数字</p></blockquote><p><strong>CODE09</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// 补充： 正则表达式里也有或者符号 |</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br></pre></td></tr></table></figure><h2 id="1-5-案例：表单验证"><a href="#1-5-案例：表单验证" class="headerlink" title="1.5 案例：表单验证"></a>1.5 案例：表单验证</h2><p><img src="/2022/05/08/jsadvanced04/image-20220421154914552.png" alt="image-20220421154914552"></p><p><img src="/2022/05/08/jsadvanced04/image-20220421160102173.png" alt="image-20220421160102173"></p><h3 id="1-5-1-手机号验证"><a href="#1-5-1-手机号验证" class="headerlink" title="1.5.1 手机号验证"></a>1.5.1 手机号验证</h3><blockquote><p><code>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</code></p></blockquote><p>分析：</p><ol><li><p>号码开头3位规则</p><ol><li><code>13[0-9]</code> </li><li><code>14[5|7]</code></li><li><code>15[0|1|2|3|4|5|6|7|8|9]</code></li><li><code>18[0|1|2|3|5|6|7|8|9]</code></li></ol></li><li><p>后续8位</p><ol><li><p><code>\d&#123;8&#125;</code></p><p><strong>CODE10</strong></p></li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网页加载完毕后立刻执行的操作</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 手机号码的正则(精简版)</span></span><br><span class="line">    <span class="keyword">var</span> regTel = <span class="regexp">/^1[3|4|5|7|8]\d&#123;9&#125;$/</span>; </span><br><span class="line">    <span class="comment">// 获取手机号输入框的元素</span></span><br><span class="line">    <span class="keyword">var</span> tel = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#tel&#x27;</span>);</span><br><span class="line"><span class="comment">// 失焦事件</span></span><br><span class="line">    tel.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line">        <span class="keyword">if</span> (regTel.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">            <span class="comment">// nextElementSibling返回下一个兄弟元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt;格式不正确,请从新输入 &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-2-QQ验证"><a href="#1-5-2-QQ验证" class="headerlink" title="1.5.2 QQ验证"></a>1.5.2 QQ验证</h3><blockquote><p>/^[1-9]\d{4,}$/</p></blockquote><p>分析： 开头不能是0，至少5位数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// QQ的正则</span></span><br><span class="line">    <span class="keyword">var</span> regQq = <span class="regexp">/^[1-9]\d&#123;4,&#125;$/</span>;</span><br><span class="line">    <span class="comment">// 获取手机号输入框的元素</span></span><br><span class="line">    <span class="keyword">var</span> qq = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#qq&#x27;</span>);</span><br><span class="line">qq.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line">        <span class="keyword">if</span> (regQq.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">            <span class="comment">// nextElementSibling返回下一个兄弟元素</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt;格式不正确,请从新输入 &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-3-封装事件函数"><a href="#1-5-3-封装事件函数" class="headerlink" title="1.5.3 封装事件函数"></a>1.5.3 封装事件函数</h3><blockquote><p>上面两个验证发现点击事件内的代码是一样的，那么封装成一个功能方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 创建验证方法</span></span><br><span class="line"><span class="comment">* @params ele 需要监听失焦事件的元素</span></span><br><span class="line"><span class="comment">* @params reg 正则规则</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @ return null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">regexp</span>(<span class="params">ele, reg</span>) &#123;</span><br><span class="line">    ele.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt; 格式不正确，请从新输入 &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将电话和qq的验证改写一下</span></span><br><span class="line"><span class="keyword">var</span> regTel = <span class="regexp">/^1[3|4|5|7|8]\d&#123;9&#125;$/</span>; <span class="comment">// 手机号码的正则表达式</span></span><br><span class="line"><span class="keyword">var</span> regQq = <span class="regexp">/^[1-9]\d&#123;4,&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tel = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#tel&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> qq = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#qq&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">regexp</span>(tel, regTel);</span><br><span class="line"><span class="title function_">regexp</span>(qq, regQq);</span><br></pre></td></tr></table></figure><h3 id="1-5-4-昵称"><a href="#1-5-4-昵称" class="headerlink" title="1.5.4 昵称"></a>1.5.4 昵称</h3><blockquote><p><code>/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</code></p><p>注意：以上是中文的unicode编码，代表的是第一个中文的编码到最后一个中文的编码</p></blockquote><p>分析： 需要输入2~8位的中文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regnc = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,8&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> nc = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nc&#x27;</span>);</span><br><span class="line"><span class="title function_">regexp</span>(nc, regnc); <span class="comment">// 昵称</span></span><br></pre></td></tr></table></figure><h3 id="1-5-5-短信验证"><a href="#1-5-5-短信验证" class="headerlink" title="1.5.5 短信验证"></a>1.5.5 短信验证</h3><blockquote><p><code>/^\d&#123;6&#125;$/</code></p></blockquote><p>分析： 6位任意数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regmsg = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#msg&#x27;</span>);</span><br><span class="line"><span class="title function_">regexp</span>(msg, regmsg); <span class="comment">// 短信验证</span></span><br></pre></td></tr></table></figure><h3 id="1-5-6-密码验证"><a href="#1-5-6-密码验证" class="headerlink" title="1.5.6 密码验证"></a>1.5.6 密码验证</h3><blockquote><p><code>/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</code></p></blockquote><p>分析：密码需要6~16位，英文数字或者下划线和中划线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regpwd = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> pwd = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#pwd&#x27;</span>);</span><br><span class="line"><span class="title function_">regexp</span>(pwd, regpwd); <span class="comment">// 密码框</span></span><br></pre></td></tr></table></figure><h3 id="1-5-7-再次输入密码验证"><a href="#1-5-7-再次输入密码验证" class="headerlink" title="1.5.7 再次输入密码验证"></a>1.5.7 再次输入密码验证</h3><blockquote><p>只需要匹配上一次输入的密码框是否一致</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> surepwd = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#surepwd&#x27;</span>);</span><br><span class="line">surepwd.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> == pwd.<span class="property">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;success_icon&quot;&gt;&lt;/i&gt; 恭喜您输入正确&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">className</span> = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextElementSibling</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i class=&quot;error_icon&quot;&gt;&lt;/i&gt; 两次密码输入不一致&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-正则替换-replace"><a href="#1-6-正则替换-replace" class="headerlink" title="1.6 正则替换 - replace"></a>1.6 正则替换 - replace</h2><blockquote><p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式。</p></blockquote><p><strong>替换字符串</strong></p><p><strong>CODE11</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&#x27;andy&#x27;</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>替换正则</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="regexp">/andy/</span>, <span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr);</span><br></pre></td></tr></table></figure><p><strong>案例：过滤敏感词</strong></p><blockquote><p>输入一串字符，点击提交，将里面的目标敏感词替换成*后显示在下面的div里</p></blockquote><p><img src="/2022/05/08/jsadvanced04/image-20220421162947173.png" alt="image-20220421162947173"></p><p><strong>CODE12</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取控件元素</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">// 添加点击事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    div.<span class="property">innerHTML</span> = text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/敏感/</span>, <span class="string">&#x27;**&#x27;</span>);</span><br><span class="line">    <span class="comment">// div.innerHTML = text.value.replace(/敏感|脱敏/, &#x27;**&#x27;);</span></span><br><span class="line">    <span class="comment">// div.innerHTML = text.value.replace(/敏感|脱敏/g, &#x27;**&#x27;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/g</code>：正则表达式后的”g”是一个表示全局搜索选项或标记，将在整个字符串查找并返回所有匹配结果。</p><h3 id="1-6-1-正则表达式参数"><a href="#1-6-1-正则表达式参数" class="headerlink" title="1.6.1 正则表达式参数"></a>1.6.1 正则表达式参数</h3><blockquote><p>语法： /正则/[switch]</p><p>switch（也称为修饰符）表示按照什么模式来匹配</p></blockquote><ol><li><code>g</code>：全局匹配</li><li><code>i</code>：忽略大小写</li><li><code>gi</code>：全局匹配且忽略大小写</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-正则表达式&quot;&gt;&lt;a href=&quot;#1-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;1 - 正则表达式&quot;&gt;&lt;/a&gt;1 - 正则表达式&lt;/h1&gt;&lt;p&gt;目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解什么是正则表达式&lt;/li&gt;
&lt;li&gt;在JS中的应用&lt;/li&gt;
&lt;li&gt;正则表达式中的特殊字符&lt;/li&gt;
&lt;li&gt;正则表达式的替换操作&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级第03天（★★★★★ - ( ･´ω`･ )建议全文背诵）</title>
    <link href="http://example.com/2022/05/08/jsadvanced03/"/>
    <id>http://example.com/2022/05/08/jsadvanced03/</id>
    <published>2022-05-08T13:17:06.404Z</published>
    <updated>2022-05-09T09:49:19.088Z</updated>
    
    <content type="html"><![CDATA[<p>目标： </p><ol><li><p>函数的多种定义方式</p></li><li><p><strong><font color="red">函数调用方式</font></strong></p></li><li><p><strong><font color="red">改变函数的内部this指向</font></strong></p></li><li><p>严格模式</p></li><li><p><strong><font color="red">高阶函数 - 将函数作为参数或返回值传递</font></strong></p></li><li><p><strong><font color="red">闭包</font></strong></p></li><li><p><strong><font color="red">递归</font></strong></p></li><li><p><strong><font color="red">深拷贝和浅拷贝</font></strong></p><span id="more"></span></li></ol><h1 id="1-函数的定义和调用-复习"><a href="#1-函数的定义和调用-复习" class="headerlink" title="1 - 函数的定义和调用 (复习)"></a>1 - 函数的定义和调用 (复习)</h1><h2 id="1-1函数的定义方式"><a href="#1-1函数的定义方式" class="headerlink" title="1.1函数的定义方式"></a>1.1函数的定义方式</h2><ol><li><p>方式1 函数声明方式 function 关键字 (命名函数)</p><p><strong>CODE01</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2 函数表达式(匿名函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式3 new Function() 了解即可，不要使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>..., <span class="string">&#x27;函数体&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意</span></span><br><span class="line"><span class="comment">Function 里面参数都必须是字符串格式</span></span><br><span class="line"><span class="comment">第三种方式执行效率低，也不方便书写，因此较少使用</span></span><br><span class="line"><span class="comment">所有函数都是 Function 的实例(对象)  </span></span><br><span class="line"><span class="comment">函数也属于对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：</strong></p><ol><li><p>所有的函数都是Funtion的实例(对象)</p></li><li><p> 函数也属于对象</p></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span><br></pre></td></tr></table></figure><p>1.2函数的调用</p><ol><li><p>普通函数</p><p><strong>CODE02</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;&#125;</span><br><span class="line"><span class="title function_">fn</span>(); </span><br></pre></td></tr></table></figure></li><li><p>对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">o.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure></li><li><p>构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span> () &#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Star</span>();</span><br></pre></td></tr></table></figure></li><li><p>绑定事件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;   <span class="comment">// 点击了按钮就可以调用这个函数</span></span><br></pre></td></tr></table></figure></li><li><p>定时器函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="number">1000</span>);  <span class="comment">// 这个函数是定时器自动1秒钟调用一次</span></span><br></pre></td></tr></table></figure></li><li><p>立即执行函数(自调用函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)();</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-this"><a href="#2-this" class="headerlink" title="2 - this"></a>2 - this</h1><h2 id="2-1-函数内部的this指向（复习）"><a href="#2-1-函数内部的this指向（复习）" class="headerlink" title="2.1 函数内部的this指向（复习）"></a>2.1 函数内部的this指向（复习）</h2><blockquote><p>这些 this 的指向，是当我们调用函数的时候确定的。调用方式的不同决定了this 的指向不同</p></blockquote><ol><li><p>普通函数 this 指向window</p><p><strong>CODE03</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;普通函数的this&#x27;</span> + <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure></li><li><p>对象的方法  this指向的是对象 o</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;对象方法的this:&#x27;</span> + <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure></li><li><p>构造函数 指向 ldh 这个实例对象 原型对象里面的this 指向的也是 ldh这个实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br></pre></td></tr></table></figure></li><li><p>绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;绑定时间函数的this:&#x27;</span> + <span class="variable language_">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>定时器函数  this 指向的也是window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定时器的this:&#x27;</span> + <span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>立即执行函数 this还是指向window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;立即执行函数的this&#x27;</span> + <span class="variable language_">this</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2改变函数内部-this-指向"><a href="#2-2改变函数内部-this-指向" class="headerlink" title="2.2改变函数内部 this 指向"></a>2.2改变函数内部 this 指向</h2><h3 id="2-2-1-call-方法"><a href="#2-2-1-call-方法" class="headerlink" title="2.2.1 call()方法"></a>2.2.1 call()方法</h3><ol><li><p><strong>概念：</strong>调用目标函数，并修改函数运行时的this指向</p></li><li><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure></li><li><p><strong>参数：</strong></p><p><code>thisArg</code>:</p><p>​        可选的。在 <em><code>function</code></em> 函数运行时使用的 <code>this</code> 值（指向对象）。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p><p><code>arg1,arg2,arg3...</code>:</p><p>​        指定的参数列表（传递的其他参数）。</p></li><li><p><strong>返回值：</strong></p><p>​        使用调用者提供的 <code>this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code>undefined</code>。</p></li></ol><p><strong>CODE04</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 此时的this指向的是对象o,参数使用逗号隔开,运行结果为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call主要作用是去实现继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span> (name, age) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span> (name, age) &#123;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-apply-方法"><a href="#2-1-2-apply-方法" class="headerlink" title="2.1.2 apply()方法"></a>2.1.2 apply()方法</h3><ol><li><p><strong>概念：</strong><code>apply()</code> 方法调用一个具有给定<code>this</code>值的函数，以及以一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects">类数组对象</a>）的形式提供的参数。</p></li><li><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure></li><li><p><strong>参数：</strong></p><p><code>thisArg</code>:</p><p>​        可选的。在 <em><code>function</code></em> 函数运行时使用的 <code>this</code> 值（指向对象）。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。</p><p><code>argsArray</code>:</p><p>​        可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 <code>func</code> 函数。如果该参数的值为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null"><code>null</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>，则表示不需要传入任何参数。</p></li><li><p><strong>返回值：</strong></p><p>​        使用调用者提供的 <code>this</code> 值和参数调用该函数的返回值。若该方法没有返回值，则返回 <code>undefined</code>。</p></li></ol><p><strong>CODE04</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fn.<span class="title function_">apply</span>(o, [<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">// 调用了函数此时的this指向了对象o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// apply 和call唯一区别是传参方式的不同，而这种方式有恰好可以做一些数字运算</span></span><br><span class="line"><span class="comment">// 如求数组中的最大值 - Math.max()</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br></pre></td></tr></table></figure><h3 id="2-1-3-bind-方法"><a href="#2-1-3-bind-方法" class="headerlink" title="2.1.3 bind() 方法"></a>2.1.3 bind() 方法</h3><ol><li><p><strong>概念：</strong><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p></li><li><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure></li><li><p><strong>参数：</strong></p><p><code>thisArg</code>:</p><p>​        调用绑定函数时作为 <code>this</code> 参数传递给目标函数的值。 如果使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new"><code>new</code></a>运算符构造绑定函数，则忽略该值。当使用 <code>bind</code> 在 <code>setTimeout</code> 中创建一个函数（作为回调提供）时，作为 <code>thisArg</code> 传递的任何原始值都将转换为 <code>object</code>。</p><p><code>arg1,arg2,arg3...</code>:</p><p>​        当目标函数被调用时，被预置入绑定函数的参数列表中的参数。</p></li><li><p><strong>返回值：</strong></p><p>​        返回一个原函数的拷贝，并拥有指定的 <strong><code>this</code></strong> 值和初始参数。</p></li><li><p><strong>注意：</strong></p><ul><li>不会调用原来的函数 可以改变原来函数内部的this 指向</li><li>返回的是原函数改变this之后产生的新函数</li></ul></li><li><p><strong>使用场景：</strong></p><p>​        如果有的函数我们不需要立即调用, 但是又想改变这个函数内部的this指向此时用bind</p></li></ol><p><strong>CODE05</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (a, b) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = fn.<span class="title function_">bind</span>(o); <span class="comment">// 并不会主动执行</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>练习1： 一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮（节流操作）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>; <span class="comment">// 指向的是按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.disabled = false; // 定时器里的this指向的是window</span></span></span><br><span class="line"><span class="language-javascript">                that.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 高级写法</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>; <span class="comment">// 指向的是btn按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span>; <span class="comment">// 定时器里的this指向的是btn</span></span></span><br><span class="line"><span class="language-javascript">            &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>思考： 如果有多个按钮，都分别设置3s延迟呢</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-总结"><a href="#2-1-4-总结" class="headerlink" title="2.1.4 总结"></a>2.1.4 总结</h3><ul><li>共同点 : 都可以改变this指向</li><li>不同点:<ul><li>call 和 apply  会调用函数, 并且改变函数内部this指向</li><li>call 和 apply传递的参数不一样, call传递参数使用逗号隔开, apply使用数组传递</li><li>bind  不会调用函数, 可以改变函数内部this指向</li></ul></li></ul><ul><li>应用场景<ol><li>call 经常做继承. </li><li>apply经常跟数组有关系，比如借助于数学对象实现数组最大值最小值</li><li>bind  不调用函数,但是还想改变this指向，比如改变定时器内部的this指向</li></ol></li></ul><h1 id="3-严格模式（了解即可）"><a href="#3-严格模式（了解即可）" class="headerlink" title="3 - 严格模式（了解即可）"></a>3 - 严格模式（了解即可）</h1><h2 id="3-1什么是严格模式"><a href="#3-1什么是严格模式" class="headerlink" title="3.1什么是严格模式"></a>3.1什么是严格模式</h2><blockquote><p>简单来说： 严格模式消除了一些js不合理的地方，同时为了以后的发展做了一些铺垫。</p></blockquote><p>​        JavaScript 除了提供正常模式外，还提供了<strong>严格模式（strict mode）</strong>。ES5 的严格模式是采用具有限制性 JavaScript变体的一种方式，即在严格的条件下运行 JS 代码。</p><p>​        严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p>​        严格模式对正常的 JavaScript 语义做了一些更改： </p><ol><li><p>消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。例如： 不声明变量直接赋值</p></li><li><p>消除代码运行的一些不安全之处，保证代码运行的安全。</p></li><li><p>提高编译器效率，增加运行速度。</p></li><li><p>禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super 不能做变量名</p></li></ol><h2 id="3-2开启严格模式"><a href="#3-2开启严格模式" class="headerlink" title="3.2开启严格模式"></a>3.2开启严格模式</h2><p>​        严格模式可以应用到<strong>整个脚本</strong>或<strong>个别函数</strong>中。因此在使用时，我们可以将严格模式分为为脚本开启严格模式和为函数开启严格模式两种情况。</p><h3 id="3-2-1-为脚本开启严格模式"><a href="#3-2-1-为脚本开启严格模式" class="headerlink" title="3.2.1 为脚本开启严格模式"></a>3.2.1 为脚本开启严格模式</h3><p>​        有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。</p><p><strong>CODE06</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为整个脚本(script标签)开启严格模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript">    &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 下面的js 代码就会按照严格模式执行代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 在脚本的独立作用域里开启严格模式， 这样可以防止全局污染</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-为函数开启严格模式"><a href="#3-2-2-为函数开启严格模式" class="headerlink" title="3.2.2 为函数开启严格模式"></a>3.2.2 为函数开启严格模式</h3><p>​        要给某个函数开启严格模式，需要把“use strict”;  (或 ‘use strict’; ) 声明放在函数体所有语句之前。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为某个函数开启严格模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时只是给fn函数开启严格模式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下面的代码按照严格模式执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span> () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 里面的还是按照普通模式执行</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-严格模式中的变化"><a href="#3-3-严格模式中的变化" class="headerlink" title="3.3 严格模式中的变化"></a>3.3 严格模式中的变化</h2><p>严格模式对 Javascript 的语法和行为，都做了一些改变。</p><ol><li><p>我们的变量名必须先声明再使用</p><p><strong>CODE07</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="comment">// num = 10;</span></span><br><span class="line"><span class="comment">// console.log(num);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br></pre></td></tr></table></figure></li><li><p>不能随意删除已经声明好的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">delete</span> num;</span><br></pre></td></tr></table></figure></li><li><p>严格模式下全局作用域中函数中的 this 是 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure></li><li><p>严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Star</span>();</span><br><span class="line"><span class="comment">// 以下是正确的使用</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure><p>定时器 this 还是指向 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li><li><p>严格模式下函数里面的参数不允许有重名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, a</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + a);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>4 - 高阶函数(回调函数)</p></li></ol><blockquote><ol><li>高阶函数是对其他函数进行操作的函数</li><li>它接收函数作为参数或将函数作为返回值输出</li></ol></blockquote><p>此时fn 就是一个高阶函数</p><p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为回调函数。</p><p>同理函数也可以作为返回值传递回来。</p><p><strong>CODE08</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数- 函数可以作为参数传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是最后调用的&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 让div先移动，然后在变色</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">left</span>: <span class="number">500</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;purple&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5-闭包-面试必背"><a href="#5-闭包-面试必背" class="headerlink" title="5 - 闭包(面试必背)"></a>5 - 闭包(面试必背)</h1><h2 id="5-1-变量的作用域（复习）"><a href="#5-1-变量的作用域（复习）" class="headerlink" title="5.1 变量的作用域（复习）"></a>5.1 变量的作用域（复习）</h2><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p><ol><li>函数内部可以使用全局变量。</li><li>函数外部不可以使用局部变量。</li><li>当函数执行完毕，本作用域内的局部变量会销毁。</li></ol><h2 id="5-2-闭包的概念"><a href="#5-2-闭包的概念" class="headerlink" title="5.2 闭包的概念"></a>5.2 闭包的概念</h2><blockquote><p>简单来说，函数嵌套函数， 有一个函数可以访问另一个的局部变量</p></blockquote><p><strong>概念：</strong>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包（closure）指有权访问另一个函数作用域中变量的函数。</span></span><br><span class="line"><span class="comment">// 闭包: 我们fun 这个函数作用域 访问了另外一个函数 fn 里面的局部变量 num</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><h2 id="5-3闭包的作用"><a href="#5-3闭包的作用" class="headerlink" title="5.3闭包的作用"></a>5.3闭包的作用</h2><blockquote><p>fn 函数外面的作用域可以访问 fn 内部的局部变量 - 通过<code>return</code>实现</p></blockquote><p><strong>作用：</strong>延伸变量的作用范围。</p><p><strong>特点：</strong>闭包函数执行完成后不会立即销毁，依然会占内存（这也是闭包的一个性能问题）</p><p><strong>CODE09</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(num++);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">return</span> fun;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">f</span>();</span><br><span class="line"><span class="comment">// f可以看作</span></span><br><span class="line"><span class="comment">// var f =  function fun() &#123;</span></span><br><span class="line"><span class="comment">// console.log(num);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者可以把fn看作是</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4闭包的案例"><a href="#5-4闭包的案例" class="headerlink" title="5.4闭包的案例"></a>5.4闭包的案例</h2><h3 id="5-4-1-利用闭包的方式得到当前li-的索引号"><a href="#5-4-1-利用闭包的方式得到当前li-的索引号" class="headerlink" title="5.4.1 利用闭包的方式得到当前li 的索引号"></a>5.4.1 利用闭包的方式得到当前li 的索引号</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>臭豆腐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>鲱鱼罐头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方案一： 不用闭包，使用动态添加属性获取</p><p><strong>CODE10</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取li元素列表</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">// 循环列表为每一个li附上索引属性和点击事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    lis[i].<span class="property">index</span> = i;</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(i);</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">index</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二： 利用闭包的方式得到当前小li 的索引号（立即执行函数也是闭包）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line">    <span class="comment">// 立即执行函数也是闭包，因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(i);</span></span><br><span class="line">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-2-3秒钟之后-打印所有li元素的内容"><a href="#5-4-2-3秒钟之后-打印所有li元素的内容" class="headerlink" title="5.4.2 3秒钟之后,打印所有li元素的内容"></a>5.4.2 3秒钟之后,打印所有li元素的内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>臭豆腐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>鲱鱼罐头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>CODE11</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取li元素列表</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">// 循环列表为每一个li添加延时打印</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 方案一： 直接写延时方法</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line"><span class="comment">// 会报错，为什么？</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方案二： 使用闭包</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-3-计算打车价格"><a href="#5-4-3-计算打车价格" class="headerlink" title="5.4.3 计算打车价格"></a>5.4.3 计算打车价格</h3><blockquote><p>需求分析</p><p>打车起步价13元(3公里内)，之后每多一公里增加 5块钱，如果有拥堵情况总价格多收取10块钱拥堵费</p><p>用户输入公里数就可以计算打车价格</p></blockquote><p><strong>CODE12</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">function fn () &#123;&#125;</span></span><br><span class="line"><span class="comment">var car = fn()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建计价方法</span></span><br><span class="line"><span class="keyword">var</span> car = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">13</span>; <span class="comment">// 起步价  局部变量</span></span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>; <span class="comment">// 总价  局部变量</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 正常的总价</span></span><br><span class="line">        <span class="attr">price</span>: <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">                total = start;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total = start + (n - <span class="number">3</span>) * <span class="number">5</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> total;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 3. 拥堵之后的费用</span></span><br><span class="line">        <span class="attr">congestion</span>: <span class="keyword">function</span> (<span class="params">flag</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> flag ? total + <span class="number">10</span> : total;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="title function_">price</span>(<span class="number">5</span>)); <span class="comment">// 23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="title function_">congestion</span>(<span class="literal">true</span>)); <span class="comment">// 33</span></span><br></pre></td></tr></table></figure><h1 id="6-递归（笔试必会）"><a href="#6-递归（笔试必会）" class="headerlink" title="6 - 递归（笔试必会）"></a>6 - 递归（笔试必会）</h1><blockquote><p>就是函数内部调用自己本身的函数，叫递归函数</p></blockquote><h2 id="6-1-递归的概念"><a href="#6-1-递归的概念" class="headerlink" title="6.1 递归的概念"></a>6.1 递归的概念</h2><p><strong>递归：</strong>如果一个函数在<strong>内部可以调用其本身</strong>，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><p><strong><font color="red">注意：</font>递归函数的作用和循环效果一样</strong>，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件return。</p><p><strong>CODE13</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归函数 : 函数内部自己调用自己, 这个函数就是递归函数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我要打印6句话&#x27;</span>, num);</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 递归里面必须加退出条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><h2 id="6-2-递归的应用"><a href="#6-2-递归的应用" class="headerlink" title="6.2 递归的应用"></a>6.2 递归的应用</h2><h3 id="6-2-1-利用递归求1-n的阶乘"><a href="#6-2-1-利用递归求1-n的阶乘" class="headerlink" title="6.2.1 利用递归求1~n的阶乘"></a>6.2.1 利用递归求1~n的阶乘</h3><blockquote><p>阶乘：n! 也就是<code>1*2*3*...n</code></p></blockquote><p><strong>CODE14</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="title function_">fn</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">3</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 详细思路 假如用户输入的是3</span></span><br><span class="line"><span class="comment">//return  3 * fn(2)</span></span><br><span class="line"><span class="comment">//return  3 * (2 * fn(1))</span></span><br><span class="line"><span class="comment">//return  3 * (2 * 1)</span></span><br><span class="line"><span class="comment">//return  3 * (2)</span></span><br><span class="line"><span class="comment">//return  6</span></span><br></pre></td></tr></table></figure><h3 id="6-2-2-利用递归求斐波那契数列"><a href="#6-2-2-利用递归求斐波那契数列" class="headerlink" title="6.2.2 利用递归求斐波那契数列"></a>6.2.2 利用递归求斐波那契数列</h3><blockquote><p>斐波那契：前两项相加等于后一项的和，<code> 1、1、2、3、5、8、13、21...</code></p></blockquote><p><strong>CODE15</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户输入一个数字 n 就可以求出 这个数字对应的兔子序列值</span></span><br><span class="line"><span class="comment">// 需要知道 n 的前面两项(n-1 n-2)就可以计算出 n 对应的序列值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fb</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fb</span>(n - <span class="number">1</span>) + <span class="title function_">fb</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fb</span>(<span class="number">3</span>)); <span class="comment">// fb(1) + fb(2)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fb</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// fb(4) + fb(5)</span></span><br><span class="line"><span class="comment">// =&gt; fb(2) + fb(3) + fb(3) + fb(4)</span></span><br><span class="line"><span class="comment">// =&gt; fb(2) + fb(1) + fb(2) + fb(1) + fb(2) + fb (2) + fb(3)</span></span><br><span class="line"><span class="comment">// =&gt; fb(2) + fb(1) + fb(2) + fb(1) + fb(2) + fb (2) + fb(1) + fb(2)</span></span><br></pre></td></tr></table></figure><h3 id="6-2-3-利用递归遍历数据"><a href="#6-2-3-利用递归遍历数据" class="headerlink" title="6.2.3 利用递归遍历数据"></a>6.2.3 利用递归遍历数据</h3><blockquote><p>输入id号,就可以返回的对应的数据对象</p></blockquote><p><strong>CODE16</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据</span></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;家电&#x27;</span>,</span><br><span class="line">        <span class="attr">goods</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">gname</span>: <span class="string">&#x27;冰箱&#x27;</span>,</span><br><span class="line">                <span class="attr">goods</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">id</span>: <span class="number">111</span>,</span><br><span class="line">                        <span class="attr">gname</span>: <span class="string">&#x27;海尔&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">id</span>: <span class="number">112</span>,</span><br><span class="line">                        <span class="attr">gname</span>: <span class="string">&#x27;美的&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">                <span class="attr">gname</span>: <span class="string">&#x27;洗衣机&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;服饰&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 输入id号,就可以返回的对应的数据对象</span></span><br><span class="line"><span class="comment">* @params json 大的数据对象</span></span><br><span class="line"><span class="comment">* @params id 目标id号</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* @return o id号所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 1. 利用 forEach 去遍历里面的每一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getID</span>(<span class="params">json, id</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 循环这个数组</span></span><br><span class="line">    json.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(item); // 2个数组元素</span></span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">id</span> === id) &#123;</span><br><span class="line">            <span class="comment">// console.log(item);</span></span><br><span class="line">            o = item;</span><br><span class="line">            <span class="comment">// 2. 我们想要得里层K的数据 11 12 可以利用递归函数</span></span><br><span class="line">            <span class="comment">// 里面应该有goods这个数组并且数组的长度不为 0 </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">goods</span> &amp;&amp; item.<span class="property">goods</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 思考，这里遍历的数据是否是data？</span></span><br><span class="line">            o = <span class="title function_">getID</span>(item.<span class="property">goods</span>, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getID</span>(data, <span class="number">111</span>));</span><br></pre></td></tr></table></figure><h1 id="7-浅拷贝和深拷贝"><a href="#7-浅拷贝和深拷贝" class="headerlink" title="7 - 浅拷贝和深拷贝"></a>7 - 浅拷贝和深拷贝</h1><blockquote><ol><li>浅拷贝只能拷贝一程，更深层次的对象级别只能拷贝引用地址</li><li>深拷贝拷贝多层，每一层的数据都会拷贝</li></ol></blockquote><p><strong>浅拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将obj的属性拷贝给o</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// k 是属性名   obj[k] 属性值</span></span><br><span class="line">    o[k] = obj[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">o.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 更深层次只拷贝了引用地址 =&gt; obj的age也会改变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p><strong>ES6 浅拷贝新方法 Object.assign(newData, oldData)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(o, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">o.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p><strong>深拷贝</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要拷贝每一层次，需要用到递归思想 =&gt; 封装函数并内部调用自己</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newobj, oldobj</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环旧对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> oldobj) &#123;</span><br><span class="line">        <span class="comment">// 判断我们的属性值属于那种数据类型，简单数据类型直接拷贝，引用数据类型进入下一层</span></span><br><span class="line">        <span class="comment">// 1. 获取属性值  oldobj[k]</span></span><br><span class="line">        <span class="keyword">var</span> item = oldobj[k];</span><br><span class="line">        <span class="comment">// 2. 判断这个值是否是数组</span></span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">            <span class="comment">// 先增加一个空数组</span></span><br><span class="line">            newobj[k] = [];</span><br><span class="line">            <span class="title function_">deepCopy</span>(newobj[k], item)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            <span class="comment">// 3. 判断这个值是否是对象</span></span><br><span class="line">            newobj[k] = &#123;&#125;;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newobj[k], item)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 4. 属于简单数据类型</span></span><br><span class="line">            newobj[k] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">deepCopy</span>(o, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">o.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><blockquote><p>思考，为什么要把数组判断放在对象判断的上面？</p></blockquote><p><strong>总结：</strong></p><ol><li>浅拷贝只能拷贝一程，更深层次的对象级别只能拷贝引用地址</li><li>深拷贝拷贝多层，每一层的数据都会拷贝</li><li>ES6新增浅拷贝语法糖，Object.assign(newData, oldData)</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;目标： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数的多种定义方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;函数调用方式&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;改变函数的内部this指向&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;严格模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;高阶函数 - 将函数作为参数或返回值传递&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;闭包&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;递归&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;深拷贝和浅拷贝&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>复习</title>
    <link href="http://example.com/2022/05/08/all/"/>
    <id>http://example.com/2022/05/08/all/</id>
    <published>2022-05-08T13:08:31.578Z</published>
    <updated>2022-05-09T09:39:59.330Z</updated>
    
    <content type="html"><![CDATA[<h5 id="元素获取"><a href="#元素获取" class="headerlink" title="元素获取"></a>元素获取</h5><p>01.getElementById(“id”)获取的是元素对象本身 或 null，不是伪数组</p><p>返回：元素对象 或null ，//对象使用节点操作获取</p><p>02.document.getElementsByTagName（“标签名”）返回值是伪数组，</p><p>返回：元素对象的集合 以伪数组形式存储     通过遍历 获取</p><p>getElementById(“id”)和document.getElementsByTagName（“标签名”）搭配使用。</p><p>因为 element.getElementsByTagName()  可以得到这个元素里面的某些标签</p><span id="more"></span><p>H5新增：</p><p>03.document.getElementsByClassName返回值是伪数组，对象集合</p><p>04.document.querySelector返回值是dom元素，第一个元素</p><p>05.document.querySelectorAll() 得到的是匹配元素的伪数组，即使只能匹配一个，得到的也是伪数组，伪数的长度为1                               // 数组通过遍历 或者索引获取里面的元素。</p><p>06.doucument . body    //返回body元素对象</p><p><span style="color:red">07.doucument.documentElement    //返回html元素对象</span></p><h5 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h5><p>element.getAttribute(‘属性’)   获取属性值</p><p>element.setAttribute(‘属性’, ‘值’); 主要针对于自定义属性   </p><p>div.removeAttribute(‘index’);移出属性</p><p><span style="color:red">括弧里面加引号</span></p><h5 id="表单的属性操作"><a href="#表单的属性操作" class="headerlink" title="表单的属性操作"></a>表单的属性操作</h5><p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p><h5 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h5><p>元素节点    1</p><p>属性节点    2</p><p>文本节点    3</p><p>子节点 vs 子元素节点 ===&gt;子节点可能是 元素 属性 文本</p><p>元素是元素节点，是节点中的一种，但元素节点中可以包含很多的节点。</p><P style="color:red">子元素节点 是  ol  ul 里面的li ,li 里面的内容也会被返回<br>大多数情况下是使用子元素或者父元素节点</P><p>node.parentNode                   返回某一节点的最近的一个父节点，没有则返回null</p><h6 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h6><p>parentNode.childNodes       返回所有子节点</p><p>parentNode.firstChild       </p><p>parentNode.lastChild</p><h6 id="子元素节点"><a href="#子元素节点" class="headerlink" title="子元素节点"></a>子元素节点</h6><p>parentNode . children             返回所有的子元素节点，它只返回子元素节点（包括里面的内容），其余节点不返回 </p><p>parentNode.firstElmentChild     第一个字元素节点</p><p>parentNode.lastElementChild        最后一个子元素节点</p><p>parentNode.children[0]                    第一个子元素节点</p><p>parentNode.children[parentNode.children.length-1]     最后一个子元素节点</p><h6 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h6><p>nextSibling                             下一个兄弟节点 包含元素节点或者 文本节点等等</p><p>previousSibling                      上一个兄弟节点</p><p>nextElementSibling                 下一个兄弟元素节点</p><p>previousElementSibling           上一个兄弟元素节点</p><h5 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h5><p>标准盒模型content部分不包含其他部分</p><p>IE盒模型content部分包含了border和padding</p><h5 id="盒子居中的的方法："><a href="#盒子居中的的方法：" class="headerlink" title="盒子居中的的方法："></a>盒子居中的的方法：</h5><p><strong>1、绝对定位法（个人感觉最好用）</strong></p><p>2.<strong>负margin居中（传统方法）</strong></p><p><strong>4、flex居中</strong></p><p><strong>5、transform居中</strong></p><p><strong>6、table-cell居中（最不常用</strong></p><h5 id="flex弹性盒子："><a href="#flex弹性盒子：" class="headerlink" title="flex弹性盒子："></a>flex弹性盒子：</h5><h5 id="class-、className、-classList区别"><a href="#class-、className、-classList区别" class="headerlink" title="class 、className、  classList区别"></a>class 、className、  classList区别</h5><ol><li><p>所有浏览器都支持className属性</p></li><li><p>  className属性返回值是一个<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，内容就是HTML元素的class属性内容。classList属性返回一个包含指定元素所有样式类的<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>对象。</p></li><li><p>​     .className的返回值就是包含元素class属性值的字符串。可以用来做判断，也可以用来给某一元素重新赋值，不过会覆盖元素原先的类名，记得把之前的类加上</p></li></ol><p>​            .classList返回值是DOMTokenList类型集合，通过此集合可以非常便利的操作元素class属性。</p><p style="color:red">通过className操作class属性，本质是对字符串的操作，比如判断class是否具有样式类"b"。那么需要自己写代码，将返回的字符串分解为各个样式类，然后再进行判断，相对比较麻烦。如果利用classList属性，那么将是非常轻松愉快的事情，使用<span style="color:red">DOM</span>TokenList集合的contains方法即可实现。</p><p>利用classList返回的集合对象，只需要一个contains方法即可。<br>集合还具有其他方法，分别如下：<br>（1）classList.add()：添加样式类。<br>（2）.item()：返回指定索引的样式类。<br>（3）.remove()：删除指定样式类。<br>（4）.toggle()：切换样式类</p><p>   (5)  .contains( )   是否包含给定类</p><p>​    (6)   . replace(“ select” , “newselect”)     替换类</p><h5 id="setAttribute和add的区别"><a href="#setAttribute和add的区别" class="headerlink" title="setAttribute和add的区别"></a>setAttribute和add的区别</h5><ol><li><p>setAttribute用于创建或改变某个新属性。</p></li><li><p>如果指定属性已经存在,则只设置该值并且会替换原来的值。</p></li><li><p>add方法是添加某个类，不会替换属性中的值，并且需要跟classList使用，因为它是classList的方法。</p></li></ol><p>​             </p><p>eg:      e.target.className == ‘down’</p><h5 id="push-appendchild"><a href="#push-appendchild" class="headerlink" title="push()   appendchild()"></a>push()   appendchild()</h5><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><h5 id="change事件"><a href="#change事件" class="headerlink" title=" change事件:"></a><span style=" color:red"> change事件:</span></h5><div style="color:red">change具有改变的意思，change事件会在原数据发生变化的时候触发。<div>该事件仅适用于文本域（text field），以及 textarea 和 select 元素。<p>注释：当用于 select 元素时，change 事件会在选择某个选项时发生。当用于 text field 或 text area 时，该事件会在元素失去焦点时发生。</p><p> $(“.checkall”).change(function() {     //事件（）里面要加function来写</p><h5 id="jquery判断checked的三种方法"><a href="#jquery判断checked的三种方法" class="headerlink" title="jquery判断checked的三种方法:"></a>jquery判断checked的三种方法:</h5><p>.attr(‘checked’):  //看版本1.6+返回:”checked”或”undefined” ;1.5-返回:true或false<br>.prop(‘checked’): //16+:true/false<br>.is(‘:checked’):   //所有版本:true/false//别忘记冒号哦</p><h5 id="jQuery获取未选中的checkbox"><a href="#jQuery获取未选中的checkbox" class="headerlink" title="jQuery获取未选中的checkbox"></a>jQuery获取未选中的checkbox</h5><p> $(‘input[type=checkbox]’).not(“input:checked”);  </p><p>eg：console.log($(“.j-checkbox”).not(“.j-checkbox:checked”))</p><h5 id="jQuery获取选中的checkbox"><a href="#jQuery获取选中的checkbox" class="headerlink" title="jQuery获取选中的checkbox"></a>jQuery获取选中的checkbox</h5><p>$(‘input[type=checkbox]:checked’);</p><p>eg：  console.log($(“.j-checkbox:checked”))     // 返回被选中的元素   $返回一个伪数组</p><p> console.log($(“.j-checkbox:checked”).length)   //返回被选中的元素的个数  </p><h5 id="jQuery中获取索引"><a href="#jQuery中获取索引" class="headerlink" title="jQuery中获取索引"></a>jQuery中获取索引</h5><p> var index = $(this).index()            //  index()  方法可以直接获取指定元素的索引</p><p>DOM中用for循环  把每次的i 赋值给定义的index</p><p>.parents()        //parents() 方法返回被选元素的所有祖先元素。</p><p>.closest()          </p><ul><li>从当前元素开始</li><li>沿 DOM 树向上遍历，并返回匹配所传递的表达式的第一个祖先</li><li>返回包含零个或一个元素的 jQuery 对象</li></ul><p>.trim()</p><p>.toFixed()</p><pre><code>   1.`$(&quot;html&quot;)`选择`html`类型的所有元素。这就是HTML中的根元素。使用~~`$(document)`或                ~~`$(document.documentElement)`也可以做到这一点。</code></pre><ol start="2"><li><p>$(document)是一个选择器，选中的是整个html所有元素的集合。</p><p>$(document).scrollTop()</p></li><li><p> $(window).scroll()检查窗口是否正在滚动经过某个点</p></li></ol><h5 id="window和document的区别"><a href="#window和document的区别" class="headerlink" title="[window和document的区别]"></a>[window和document的区别]</h5><p>[window对象]</p><p>　　它是一个顶层对象,而不是另一个对象的属性，即浏览器的窗口。</p><pre><code>  document 当前显示的文档(该属性本身也是一个对象)</code></pre><h5 id="locaStorage"><a href="#locaStorage" class="headerlink" title="locaStorage"></a>locaStorage</h5><p>localStorage.setItem                    //存储数据  本地存储    . 设置项目</p><p>本地存储：先把数据转为字符串==》存储  ==&gt;转为对象格式==》使用</p><ol><li>本地存储里面只能存储字符串的数据格式 把我们的数组对象转换为字符串格式 JSON.stringify()</li></ol><p>localStorage.setItem(“todo”, JSON.stringify(todolist));</p><ol start="2"><li>获取本地存储的数据 我们需要把里面的字符串数据转换为 对象格式 JSON.parse()</li></ol><p>​    data = JSON.parse(data);  //parse  分析</p><p>append() 操作的是 DOM 节点，push() 操作的是数组。</p><h5 id="appendChild与append区别"><a href="#appendChild与append区别" class="headerlink" title="appendChild与append区别:"></a>appendChild与append区别:</h5><p>（1）ParentNode.append()允许追加 DOMString 对象，而 Node.appendChild() 只接受 Node 对象。</p><p>  (2）ParentNode.append() 没有返回值，而 Node.appendChild() 返回追加的 Node 对象。</p><p>（3）ParentNode.append() 可以追加多个节点和字符串，而 Node.appendChild() 只能追加一个节点。</p><p> //splice(开始索引，删除的长度)  数组删除指定位置的元素 </p><p>jQuery可以绑定多个事件放入同一个对象中，并没有被覆盖</p><p>.attr() 方法设置或返回被选元素的属性值。</p><h5 id="checkbox属性checked-”checked”通过js已设置，但是不勾选？？？？"><a href="#checkbox属性checked-”checked”通过js已设置，但是不勾选？？？？" class="headerlink" title="checkbox属性checked=”checked”通过js已设置，但是不勾选？？？？"></a>checkbox属性checked=”checked”通过js已设置，但是不勾选？？？？</h5><p>给input加了checked就可以了</p><h5 id="媒体适配（范围大于用min-，范围小于用max）"><a href="#媒体适配（范围大于用min-，范围小于用max）" class="headerlink" title="媒体适配（范围大于用min ，范围小于用max）"></a>媒体适配（范围大于用min ，范围小于用max）</h5><p>大于900px的时候，匹配900px 到无限大</p><p>@media screen and (min-width:900px)</p><p>小于900px的时候，匹配0 到900px</p><p>@media screen and (max-width:900px)</p><h5 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h5><p>浅拷贝（shallowCopy）只是增加了一个指针指向已存在的内存地址，</p><p>深拷贝（deepCopy）是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，</p><h5 id="EM"><a href="#EM" class="headerlink" title="EM"></a>EM</h5><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</p><ol><li><p>em的值并不是固定的；</p></li><li><p>em会继承父级元素的字体大小。</p></li></ol><h5 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h5><p>使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素</p><h5 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw   vh"></a>vw   vh</h5><p>vw\vh的介绍？<br>1.什么是vw(Viewport Width)和vh（Viewport Height）？<br>    1.1 vw和vh是前端开发中的一个动态单位，是一个相对于网页视口的单位。<br>    1.2 系统会将视口的宽度和高度分为100份，1vw占用视口宽度的百分之一，1vh占用视口高度的百分之一。<br>    1.3 vw、vh和百分比不同的是，百分比永远都是以父元素为参考，而vw、vh是以视口作为参考。</p><h5 id="立即执行函数之前需要加-分号"><a href="#立即执行函数之前需要加-分号" class="headerlink" title="立即执行函数之前需要加  ;  分号"></a>立即执行函数之前需要加  ;  分号</h5><h5 id="background-size：-contain-与cover的区别："><a href="#background-size：-contain-与cover的区别：" class="headerlink" title="background-size： contain 与cover的区别："></a>background-size： contain 与cover的区别：</h5><ol><li>在no-repeat情况下，如果容器宽高比与图片宽高比不同，</li></ol><p>　cover：图片宽高比不变、铺满整个容器的宽高，而图片多出的部分则会被截掉；</p><p>　contain:图片自身的宽高比不变，缩放至图片自身能完全显示出来，所以容器会有留白区域；</p><p>2.在repeat情况下：cover:与上述相同；contain:容器内至少有一张完整的图，容器留白区域则平铺背景图，铺不下的再裁掉。</p><p>resize 事件是在浏览器窗口大小发生变化时触发，利用该事件可以跟踪窗口大小的变化来动态调整页面的元素显示。</p><p>接下来利用 resize 事件实现一个小案例：<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>浏览器窗口变化，实时获取该窗口的宽度和高度</p><p>  console.log(this)  // 某一个元素</p><p>   console.log($(this))  //一个对象</p><p>   console.log(this.dataset.type)    //直接看 this . type     dataset是自定义属性的获取方法</p><h5 id="flex属性是由flex-grow-flex-shrink-flex-basis这三个属性的缩写"><a href="#flex属性是由flex-grow-flex-shrink-flex-basis这三个属性的缩写" class="headerlink" title="flex属性是由flex-grow, flex-shrink, flex-basis这三个属性的缩写"></a>flex属性是由flex-grow, flex-shrink, flex-basis这三个属性的缩写</h5><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex-basis`默认值是`auto`，</span><br><span class="line">`flex-grow`默认值是`0`，</span><br><span class="line">`flex-shrink`默认值是`1</span><br></pre></td></tr></table></figure><h5 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h5><p><span style="color:red"> console.log(Object.prototype.toString.call(a))</span></p><p>立即执行函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h5 id="proto-、prototype返回的都是对象"><a href="#proto-、prototype返回的都是对象" class="headerlink" title="__proto__  、prototype返回的都是对象{}"></a><code>__proto__</code>  、<code>prototype</code>返回的都是对象{}</h5><h5 id="一般来说，公共属性定义在构造函数里面，公共方法定义在原型对象身上"><a href="#一般来说，公共属性定义在构造函数里面，公共方法定义在原型对象身上" class="headerlink" title="一般来说，公共属性定义在构造函数里面，公共方法定义在原型对象身上"></a>一般来说，公共属性定义在构造函数里面，公共方法定义在原型对象身上</h5><h5 id="new操作构造函数生成实例的过程"><a href="#new操作构造函数生成实例的过程" class="headerlink" title="new操作构造函数生成实例的过程"></a>new操作构造函数生成实例的过程</h5><ol><li><p>首先, 当我们使用new操作符时, js会先创建一个空的对象</p></li><li><p>然后, 构造函数中的this指向该空对象</p></li><li><p>其次, 在构造函数中通过操作this, 来给这个空对象赋予相应的属性</p></li><li><p>最后, 返回这个经过处理的”空对象”(此时, 对象已经不是空的了)</p><p>缺点：每创建一个实例都要开辟一个内存空间来存放同一个方法，浪费内存。</p></li></ol><p>原型对象 只开辟一次内存空间，存放多个公共方法，new出来的实例对象都可以直接通过原型链找到 并直接使用</p><p>构造函数 是每调用一次都会在内存中开辟一个新内存来存放同一个方法</p><h5 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h5><p>对象是类的具体表达，类是对象的抽象表达。</p></div></div>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;元素获取&quot;&gt;&lt;a href=&quot;#元素获取&quot; class=&quot;headerlink&quot; title=&quot;元素获取&quot;&gt;&lt;/a&gt;元素获取&lt;/h5&gt;&lt;p&gt;01.getElementById(“id”)获取的是元素对象本身 或 null，不是伪数组&lt;/p&gt;
&lt;p&gt;返回：元素对象 或null ，//对象使用节点操作获取&lt;/p&gt;
&lt;p&gt;02.document.getElementsByTagName（“标签名”）返回值是伪数组，&lt;/p&gt;
&lt;p&gt;返回：元素对象的集合 以伪数组形式存储     通过遍历 获取&lt;/p&gt;
&lt;p&gt;getElementById(“id”)和document.getElementsByTagName（“标签名”）搭配使用。&lt;/p&gt;
&lt;p&gt;因为 element.getElementsByTagName()  可以得到这个元素里面的某些标签&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</title>
    <link href="http://example.com/2022/05/07/%E8%B5%B5%E4%B8%BD%E9%A2%96%EF%BC%9A%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E9%85%8D%E4%B8%8D%E9%85%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E5%8F%91%E5%85%89%E4%BA%86%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%80%BC%E5%BE%97%E7%9A%84%EF%BC%81/"/>
    <id>http://example.com/2022/05/07/%E8%B5%B5%E4%B8%BD%E9%A2%96%EF%BC%9A%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E9%85%8D%E4%B8%8D%E9%85%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B%E5%8F%91%E5%85%89%E4%BA%86%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%80%BC%E5%BE%97%E7%9A%84%EF%BC%81/</id>
    <published>2022-05-07T14:18:01.659Z</published>
    <updated>2022-05-07T15:19:57.808Z</updated>
    
    <content type="html"><![CDATA[<p>网络上为赵丽颖晋身为Dior新代言人，为baby抱屈而打口水仗的人们依旧在评论区喋喋不休。</p><p>网友不是头一次抹黑赵丽颖，也不是第一次对她评头论足。</p><p>他们从来没忘记赵丽颖的中专文凭、农村出身、补刀神手的人设，以及她在时尚界那次长裙美背后却贴小花纸的“土美”事件。</p><p>他们从来没想到她以一张包子脸的长相也能进军时尚界甚至可以开疆辟土，能在颜控大长腿的天下里挤得一席之地。</p><span id="more"></span><p><img src="https://joeybling.github.io/images/2743275-53f4e13ae7bb957c.jpg" alt="img"><br>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>别说喷子们不服，就连那些以颜值、身材傲娇的模特们甚至也要掂量下要不要去拍部剧来充实一下自己的市场含金量。</p><p>也许，不过是因为赵丽颖改变了某些市场主导者的审美标准，也或者因为她让人们看到了属于某种叫做内在因素的美学吸引力。</p><p>在风云突变的娱乐圈子里，令人眼花缭乱的美的形式层出不穷，种种以花瓶自居的美少女美男子更是如过江之鲫。可以说美常有，花瓶亦常有，但是以内在实力让人发现美的内在的，却不常见。</p><p><img src="https://joeybling.github.io/images/2743275-8a989c5bb640f4bf.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>黄渤算是特例，他从来不以帅著称。</p><p>但是他有让人透过“看似抽象的外表”发现其演技魅力的能耐，继而在大大小小的场合，能让人心悦诚服地体会到他妙语连珠舌灿生花的高情商魅力。这大概就属于那种可以满足人们精神需要层次的美了。</p><p><img src="https://joeybling.github.io/images/2743275-4d63302781989ff0.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>周冬雨也算特例，而且特例得很成功。</p><p>作为18岁时就荣升为“谋女郎”的幸运儿，她的演技她的颜值，在进入电影学院以及刚毕业的阶段，都不算是人们口中的佼佼者。甚至在很长一段时间里，人们总能从她刻意扮老的衣着里发现“令人扼腕”的衣品。</p><p>她没有好身材，她也曾自嘲“自己二十四岁的年纪里，有的是十四岁的身材”；她没有欧式大眼睛，她笑起来眼睛眯成一条线的样子的确像自嘲的“小蝌蚪”“小黄鸭”。</p><p><img src="https://joeybling.github.io/images/2743275-d0b5d1c133826c9e.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>可是她知道衣品可以偷偷修炼，演技亦可以让那些吐槽她的人对她黑转粉。</p><p>现在的周冬雨，总能用梨花带雨的哭或明媚如初恋的笑牵引着观众去发现她的灵动、可爱、放肆、潇洒。她是安生、顾胜男、肖红，还是宇宙CP心中念念不忘的“小蝌蚪”。她用角色在无数人心中收获对她别样之美的肯定。</p><p>诚然，她瘦小单薄，不够丰盈饱满。但是她会努力想尽各种办法，去让自己中学时因练舞而壮硕的小腿变瘦再变瘦。于是与别人比，她会胜在肌肤胜雪、会胜在后天小白腿又瘦又直所营造出的纯真干净气质上。所以，懂得适合自己穿衣风格的姑娘，懂得扬长避短的她，终会在可以抱着奖杯时靠衣品靠气质在时尚界锦上添花。</p><p><img src="https://joeybling.github.io/images/2743275-cb84c86409b3303d.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>周冬雨也许可以成为赵丽颖在衣品上征服人心的榜样。她们虽然不够天资卓越，但胜在后天足够努力。尽管她们都曾被人很批过说话耿直情商感人，但是胜在她们都足够心大如海，能把注意力转移到自己钟爱的演技磨砺层面，继而以实力赢得业界尊重。</p><p>这时代，从耀眼高台跌倒下来的明星不胜枚举，在底层逆境中一点一点攀爬努力的演员亦多如星辰。但不管她们处在什么阶段，能够给予她们自信的，永远是自己对所爱事业的追梦执念，和一次次挫败后的执着坚持。</p><p>正所谓“闻道有先后，术业有专攻”。多少演员成为明星，立足的资本，成名的资本，踏入时尚圈的资本，永远是彰显实力的代表作。也就是说，唯有专注于自己的术业，才能脱胎换骨，再上台阶；才能有机会发光发亮，才够得住机会来时的橄榄枝！</p><p>出道十年，赵丽颖从选秀开始奋斗，跑过无数龙套，在扎扎实实的演技磨砺中成就了陆贞、杉杉、花千骨、楚乔等多个被人记到心里的角色，也算是用步步的成就证明了从平凡到华丽蜕变的自我价值。</p><p><img src="https://joeybling.github.io/images/2743275-b650a625da475f1b.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>就算曾经土气又如何，曾经籍籍无名又如何，谁的人生不是在不断修炼中成长?当你拥有一颗坚忍倔强的心，埋首修剪自我的不足时，就没空在乎别人说长道短了。</p><p>就像赵丽颖曾说的，人到一定程度，就不会再计较那么多了；以前会怕这个、怕那个，但是她觉得现在的自己心态很平和，状态也还挺好；对于这些东西就更不在意了。</p><p>正所谓，你若淡看风云，窗前自有云卷云舒的自在；你若似繁花锦绣，周围自有蝴蝶悄然翩跹。</p><p><img src="https://joeybling.github.io/images/2743275-a9e30f2c8ddd5f04.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>诚然，梦想不必过早就实现，也不必实现了就止步于当下。</p><p>我们总有困顿迷惑自我怀疑的时候，就像努力了很多年的前夫哥雷佳音，在出演鹿兆鹏几个月都快要抑郁的时候，等来了陈俊生、裴纶这样一个可以证明自己实力的角色。</p><p><img src="https://joeybling.github.io/images/2743275-8d20f5c9550d4809.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>就像被离婚大战拖累到几乎要完全没有出路的潘粤明，在跨界歌王中唱出了文艺小生的双面挣扎，也让自己有机会被制作方看中可塑性而出演了证明自己炸裂演技的角色“白夜兄弟”。</p><p><img src="https://joeybling.github.io/images/2743275-ecab8a59519a96cf.jpg" alt="img"></p><p>赵丽颖：没有什么配不配，你的努力发光了，你就是值得的！</p><p>我们总有会爬上某个看似自我高峰的时刻，唯有清醒和自省能让自己行远路行得远。</p><p>就像周冬雨的小妞人设演多了，也需要调整战略在别的角色领域里证明自己的可塑性。就像赵丽颖的进阶更上层楼了，也需要在学识修养衣品方面内外兼修裨补缺漏。</p><p>有人说，任何人都不是超人，你的心思放在哪儿是可以看见的。</p><p>当你眼中只有名利时，纵然有一千万中想红想赚快钱的途径，但是如日中天如薛之谦又如何，火箭般翻红的速度，维持的时间却不过是两年。</p><p>当没有创新度的段子梗被他在上百个节目中玩到泛滥时，当没有专情如一的人品来维持深情人设而被昔日恋人李雨桐扒个底朝天的时候，名利来得快走得也快，还顺便把你打倒至众人踩众人唾弃的深渊。</p><p>傅雷说，我们的确是盲目着在世界上前进的。但是当你行走于世越深入，你才发现你的双眼你的灵魂会容易被浮华蔽眼而陷入盲目。</p><p>没有谁不渴望事业成功荣耀加身，但是能救赎我们灵魂的永远是自己可以拿得出手的自己钟爱的作品。</p><p>如好剧本之于演员，好书籍之于作家，好项目之于商人，好工作之于普通人。我们行走江湖的目的，就是用尽自己的全部能耐把本来就好的璞玉打造成臻于完美的玉石。</p><p>至于随之而来的物质累积、名誉傍身，都不过是立足于其上的附加之物。本立则荣加，本无则荣枯。明白这一点，世人眼中关于你的值不值得，都不足以撼动你对自己的肯定。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网络上为赵丽颖晋身为Dior新代言人，为baby抱屈而打口水仗的人们依旧在评论区喋喋不休。&lt;/p&gt;
&lt;p&gt;网友不是头一次抹黑赵丽颖，也不是第一次对她评头论足。&lt;/p&gt;
&lt;p&gt;他们从来没忘记赵丽颖的中专文凭、农村出身、补刀神手的人设，以及她在时尚界那次长裙美背后却贴小花纸的“土美”事件。&lt;/p&gt;
&lt;p&gt;他们从来没想到她以一张包子脸的长相也能进军时尚界甚至可以开疆辟土，能在颜控大长腿的天下里挤得一席之地。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>WEB API</title>
    <link href="http://example.com/2022/04/21/WEB-API-DAY4/"/>
    <id>http://example.com/2022/04/21/WEB-API-DAY4/</id>
    <published>2022-04-21T10:26:08.596Z</published>
    <updated>2022-05-05T14:38:56.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB-API"><a href="#WEB-API" class="headerlink" title="WEB API"></a>WEB API</h1><p>常用得到的键盘事件</p><h3 id="1-1-onkeyup-键盘抬起时触发"><a href="#1-1-onkeyup-键盘抬起时触发" class="headerlink" title="1.1 onkeyup 键盘抬起时触发"></a>1.1 onkeyup 键盘抬起时触发</h3><h3 id="1-2代码实现"><a href="#1-2代码实现" class="headerlink" title="1.2代码实现"></a>1.2代码实现</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;键盘弹起&#x27;</span>);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="2-1onkeydown-键盘按下触发"><a href="#2-1onkeydown-键盘按下触发" class="headerlink" title="2.1onkeydown 键盘按下触发"></a>2.1onkeydown 键盘按下触发</h3><p>那个值还没有输入，事件就被触发了</p><h3 id="2-2代码的实现"><a href="#2-2代码的实现" class="headerlink" title="2.2代码的实现"></a>2.2代码的实现</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(<span class="string">&#x27;keydown&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(e);</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;键盘按下&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1onkeypress-键盘按下触发"><a href="#3-1onkeypress-键盘按下触发" class="headerlink" title="3.1onkeypress 键盘按下触发"></a>3.1onkeypress 键盘按下触发</h3><p>keypress不能被功能键识别</p><h3 id="3-2代码实现"><a href="#3-2代码实现" class="headerlink" title="3.2代码实现"></a>3.2代码实现</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(<span class="string">&#x27;keypress&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;我被按下了press&#x27;</span>);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="4-三个键盘事件的执行顺序"><a href="#4-三个键盘事件的执行顺序" class="headerlink" title="4.三个键盘事件的执行顺序"></a>4.三个键盘事件的执行顺序</h3><p>keydown –&gt; keypress  —-&gt; keyup</p><p>keydown ，keypress在我们输入键的时候就已经触发事件了</p><h2 id="键盘事件对象之keyCode属性"><a href="#键盘事件对象之keyCode属性" class="headerlink" title="键盘事件对象之keyCode属性"></a>键盘事件对象之keyCode属性</h2><p>键盘事件中对象的keyCode 属性可以得到相应键的ACSSII码值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;up:&#x27;</span> + e.keyCode);</span><br><span class="line">            <span class="keyword">if</span> (e.keyCode === <span class="number">65</span>) &#123;</span><br><span class="line">                alert(<span class="string">&#x27;您按下a键&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">&#x27;您没按下a键&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        document.addEventListener(<span class="string">&#x27;press&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;press:&#x27;</span> + e.keyCode);</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="模拟京东按键输入内容"><a href="#模拟京东按键输入内容" class="headerlink" title="模拟京东按键输入内容"></a>模拟京东按键输入内容</h2><p>核心 思路：检测用户是否按下了 s键 ，如果按下了s键就把光标定位到搜索框里面</p><p>代码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">       <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="comment">//打印出s的ACSII码值 </span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>);  <span class="comment">//s= 83</span></span><br><span class="line">           <span class="keyword">if</span>(e.<span class="property">keyCode</span> == <span class="number">83</span>) &#123;</span><br><span class="line">               search.<span class="title function_">focus</span>()</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>模拟京东快递单号查询 的案例</p><p>核心思路：</p><ol><li><p>快递单号输入内容时, 上面的大号字体盒子(con)显示(这里面的字号更大)</p></li><li><p>表单检测用户输入: 给表单添加键盘事件</p></li><li><p>同时把快递单号里面的值(value)获取过来赋值给 con盒子(innerText)做为内容</p></li><li><p>如果快递单号里面内容为空,则隐藏大号字体盒子(con)盒子</p></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line">        <span class="selector-tag">var</span> con = document<span class="selector-class">.querySelector</span>(<span class="string">&#x27;.con&#x27;</span>)</span><br><span class="line">        <span class="selector-tag">var</span> inputs = document<span class="selector-class">.querySelector</span>(<span class="string">&#x27;.jd&#x27;</span>)</span><br><span class="line">        <span class="comment">//当jd按下时绑定事件</span></span><br><span class="line">        inputs<span class="selector-class">.addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="built_in">function</span>()&#123;</span><br><span class="line">            <span class="comment">//当表单框里面没有内容的时候,con盒子也没有内容 当有内容的时候,</span></span><br><span class="line">            <span class="comment">//内容也会给到con盒子</span></span><br><span class="line">            <span class="built_in">if</span>(this<span class="selector-class">.value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                con<span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                con<span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">                con<span class="selector-class">.innerHTML</span> = this<span class="selector-class">.value</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//jd获得焦点的时候con这个盒子显示</span></span><br><span class="line">        inputs<span class="selector-class">.addEventListener</span>(<span class="string">&#x27;focus&#x27;</span>,<span class="built_in">function</span>()&#123;</span><br><span class="line">            con<span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//jd失去焦点的时候con这个盒子隐藏</span></span><br><span class="line">        inputs<span class="selector-class">.addEventListener</span>(<span class="string">&#x27;blur&#x27;</span>,<span class="built_in">function</span>()&#123;</span><br><span class="line">            con<span class="selector-class">.style</span><span class="selector-class">.display</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="BOM顶级对象window"><a href="#BOM顶级对象window" class="headerlink" title="BOM顶级对象window"></a>BOM顶级对象window</h2><p>BOM浏览器对象模型  </p><p>  BOM提供了独立于内容 而与浏览器窗口进行交互的对象；</p><h2 id="window常见的事件"><a href="#window常见的事件" class="headerlink" title="window常见的事件"></a>window常见的事件</h2><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><h4 id="为什么有页面加载事件"><a href="#为什么有页面加载事件" class="headerlink" title="为什么有页面加载事件"></a>为什么有页面加载事件</h4><p>因为 JavaScript 中的函数方法需要在 HTML 文档渲染完成后才可以使用</p><p>如果没有渲染完成,此时的 DOM 树是不完整的,这样在调用一些 JavaScript 代码时就可能报出”undefined”错误</p><h3 id="页面加载事件的方式"><a href="#页面加载事件的方式" class="headerlink" title="页面加载事件的方式"></a>页面加载事件的方式</h3><p>传统的方式window.onload = function(){}</p><p>window.addEventListener (‘load’,function(){})</p><p>window.addEventListener(‘DOMContentLoaded’,function(){})</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">window.onload = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//第2种 load 表示页面全部加载完毕包含图片,css</span></span><br><span class="line">           window.addEventListener(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line">           &#125;)</span><br><span class="line">           <span class="comment">//第三种   DOMContentLoaded 文档加载完了,DOM树叶加载完了</span></span><br><span class="line">           <span class="comment">//不包含css 图片</span></span><br><span class="line">           document.addEventListener(<span class="string">&#x27;DONContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;3333&#x27;</span>);</span><br><span class="line">           &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">           <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了变化&#x27;</span>);</span><br><span class="line">               <span class="comment">//window.innerWidth  获得当前浏览器宽度</span></span><br><span class="line">               <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">600</span>) &#123;</span><br><span class="line">                   div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>resize 事件是在浏<strong>览器窗口被重置时触发的，</strong>如当用户调整窗口大小，或者最大化、最小化、恢复窗口大小显示时触发 resize 事件</p><h2 id="定时器之setTimeout"><a href="#定时器之setTimeout" class="headerlink" title="定时器之setTimeout"></a>定时器之setTimeout</h2><p>1.setTimeout </p><p>​    语法规范:  window.setTimeout(调用函数, 延时时间);</p><ol><li><p>这个window在调用的时候可以省略</p></li><li><p>这个延时时间单位是毫秒 但是可以省略,如果省略默认的是0</p></li><li><p>这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 ‘函数名()’</p></li><li><p>页面中可能有很多的定时器,我们经常给定时器加标识符 (名字)</p></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setTimeout(调用函数,延时时间)</span></span><br><span class="line">       <span class="comment">//第一种写法</span></span><br><span class="line">       setTimeout(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;时间到给我爆&#x27;</span>);</span><br><span class="line">       &#125;,<span class="number">2000</span>)</span><br><span class="line">       <span class="comment">//第二种写法</span></span><br><span class="line">       <span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;我是回调函数&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> cb = setTimeout(fn,<span class="number">5000</span>)</span><br><span class="line">       <span class="comment">//这个延时时间是毫秒数,但是可以省略,如果省略默认的是0 </span></span><br><span class="line">       <span class="comment">//浏览器中最小延迟是4ms</span></span><br></pre></td></tr></table></figure><h2 id="清除-clearTimeout定时器"><a href="#清除-clearTimeout定时器" class="headerlink" title="清除 clearTimeout定时器"></a>清除 clearTimeout定时器</h2><p>clearTimeout(定时器名)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">      <span class="comment">//开启定时器</span></span><br><span class="line">      <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;时间到给我爆&#x27;</span>);</span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">      <span class="comment">//点击的时候清除定时器,在这个延迟事件前我们清除他 他就不会回调了</span></span><br><span class="line">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h2 id="定时器之setInterval"><a href="#定时器之setInterval" class="headerlink" title="定时器之setInterval"></a>定时器之setInterval</h2><p> 语法规范:  window.setInterval(调用函数, 延时时间);</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.直接写在setInterval里面</span></span><br><span class="line">       setInterval(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;无敌是多么寂寞&#x27;</span>);</span><br><span class="line">       &#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.声明或者表达式 先初始化回调函数 在传入</span></span><br><span class="line">       <span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;加油老铁&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       setInterval(fn,<span class="number">1000</span>)</span><br><span class="line">       <span class="comment">//清除定时器</span></span><br><span class="line">       <span class="comment">//clearInterval(IntervalID)</span></span><br></pre></td></tr></table></figure><h3 id="setTimout与setInterval的区别"><a href="#setTimout与setInterval的区别" class="headerlink" title="setTimout与setInterval的区别"></a>setTimout与setInterval的区别</h3><p>setTimeout 延时时间到了 就执行回调函数，只执行一次</p><p>setInterval 每隔这个延时时间就调用函数，重复执行</p><h2 id="清除setIterval-定时器"><a href="#清除setIterval-定时器" class="headerlink" title="清除setIterval 定时器"></a>清除setIterval 定时器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> begin = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.begin&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> stop = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stop&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="comment">//注册点击事件</span></span><br><span class="line">begin.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我来了&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">stop.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="倒计时效果"><a href="#倒计时效果" class="headerlink" title="倒计时效果"></a>倒计时效果</h2><hr><h2 id="发送短信案例"><a href="#发送短信案例" class="headerlink" title="发送短信案例"></a>发送短信案例</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> btn = document<span class="selector-class">.querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">      <span class="selector-tag">var</span> <span class="selector-tag">time</span> = <span class="number">3</span> <span class="comment">//定义剩下的秒数</span></span><br><span class="line">      btn<span class="selector-class">.addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="built_in">function</span>()&#123;</span><br><span class="line">          <span class="comment">//当按钮绑定点击事件后,开启定时器</span></span><br><span class="line">         timer = <span class="built_in">setInterval</span>(<span class="built_in">function</span>()&#123;</span><br><span class="line">             btn<span class="selector-class">.disable</span> = true</span><br><span class="line">              <span class="built_in">if</span>(<span class="selector-tag">time</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//时间为0 的话恢复按钮,清除定时器</span></span><br><span class="line">                  <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">                  btn<span class="selector-class">.disable</span> = false</span><br><span class="line">                  btn<span class="selector-class">.innerHTML</span> = <span class="string">&#x27;发送&#x27;</span></span><br><span class="line">                  <span class="selector-tag">time</span> = <span class="number">3</span></span><br><span class="line">              &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                  btn<span class="selector-class">.innerHTML</span> = <span class="string">&#x27;还剩下&#x27;</span>+time+<span class="string">&#x27;秒&#x27;</span></span><br><span class="line">                  time--</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h2 id="this的指向问题（重点面试题）"><a href="#this的指向问题（重点面试题）" class="headerlink" title="this的指向问题（重点面试题）"></a><strong>this的指向问题</strong>（重点面试题）</h2><p>1.this在全局作用域和普通函数中的this指向是window（还有定时器中d的this）</p><p>2.方法中this，是调用就是谁</p><p>3.构造函数中this指向new的实例对象</p><p>//new构造寒素</p><p>1，在内存中创建一个空对象</p><p>2.让this指向这个空对象</p><p>3，执行构造函数里面的代码给这个空对象添加属性和方法</p><p>4，返回这个对象（构造函数里面 不需要写return）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span><br><span class="line">      <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">      <span class="comment">// 2. 方法调用中谁调用this指向谁</span></span><br><span class="line">      <span class="keyword">var</span> o = &#123;</span><br><span class="line">          <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是 o 这个对象</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      o.<span class="title function_">sayHi</span>();</span><br><span class="line">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">      <span class="comment">// btn.onclick = function() &#123;</span></span><br><span class="line">      <span class="comment">//     console.log(this); // this指向的是btn这个按钮对象</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是btn这个按钮对象</span></span><br><span class="line"></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="comment">// 3. 构造函数中this指向构造函数的实例</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this 指向的是fun 实例对象</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="执行队列"><a href="#执行队列" class="headerlink" title="执行队列"></a>执行队列</h2><h3 id="1-同步任务和异步任务"><a href="#1-同步任务和异步任务" class="headerlink" title="1. 同步任务和异步任务"></a>1. 同步任务和异步任务</h3><p>​    单线程导致的问题就是后面的任务等待前面任务完成，如果前面任务很耗时（比如读取网络数据），后面任务不得不一直等待！！</p><p>​    为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>​    前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>​    你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><h2 id="location常见的方法"><a href="#location常见的方法" class="headerlink" title="location常见的方法"></a>location常见的方法</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var btn = document.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>() &#123;</span><br><span class="line"></span><br><span class="line">     <span class="regexp">//</span> 记录浏览历史,所以可以实现后退功能</span><br><span class="line"></span><br><span class="line">     <span class="regexp">//</span> location.assign(<span class="string">&#x27;http://www.itcast.cn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="regexp">//</span> 不记录浏览历史,所以不可以实现后退功能</span><br><span class="line"></span><br><span class="line">     <span class="regexp">//</span> location.replace(<span class="string">&#x27;http://www.itcast.cn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     location.reload(true);</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;WEB-API&quot;&gt;&lt;a href=&quot;#WEB-API&quot; class=&quot;headerlink&quot; title=&quot;WEB API&quot;&gt;&lt;/a&gt;WEB API&lt;/h1&gt;&lt;p&gt;常用得到的键盘事件&lt;/p&gt;
&lt;h3 id=&quot;1-1-onkeyup-键盘抬起时触发&quot;&gt;&lt;a href=&quot;#1-1-onkeyup-键盘抬起时触发&quot; class=&quot;headerlink&quot; title=&quot;1.1 onkeyup 键盘抬起时触发&quot;&gt;&lt;/a&gt;1.1 onkeyup 键盘抬起时触发&lt;/h3&gt;&lt;h3 id=&quot;1-2代码实现&quot;&gt;&lt;a href=&quot;#1-2代码实现&quot; class=&quot;headerlink&quot; title=&quot;1.2代码实现&quot;&gt;&lt;/a&gt;1.2代码实现&lt;/h3&gt;&lt;figure class=&quot;highlight arcade&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;document.addEventListener(&lt;span class=&quot;string&quot;&gt;&amp;#x27;keyup&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;键盘弹起&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://example.com/2022/04/15/hello-world/"/>
    <id>http://example.com/2022/04/15/hello-world/</id>
    <published>2022-04-15T03:41:12.897Z</published>
    <updated>2022-05-05T13:18:41.508Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
